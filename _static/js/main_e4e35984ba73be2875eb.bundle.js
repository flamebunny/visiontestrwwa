webpackJsonp([5,10],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Global page navigation module. Handles navigation between pages via AJAX, loading indicators and more.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(0), __webpack_require__(1), __webpack_require__(5), __webpack_require__(4), __webpack_require__(247), __webpack_require__(242), __webpack_require__(241)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, jQuery, ko, common, msgBus, navService, navRules, LoadingIndicator) {
    var homeUrl = "",
        lastRequestedUrl = "",
        ajax403Handler = null,
        timeoutStatus = "timeout",
        errorWindow = "#error-window",
        raceBettingPageHandler = null;


    //Create a loading indicator
    var navLoading = new LoadingIndicator("#loading-overlay");


    /**
     * Initialises our nav module. Primarily assigns events so our server-rendered templates can hook into this module.
     * Note: "return false;" in bindLiveEvent() will stop other event handlers from firing.
     */
    function init() {
        common.bindLiveEvent('click', '[data-nav]', function (e) {
            var opts = {}, href = "";

            //If it contains either a URL or a list of props as JSON
            if (this.dataset.nav) {
                //Try to get the JSON
                try {
                    opts = JSON.parse(this.dataset.nav);

                    if ('href' in opts) {
                        href = opts.href;
                    }
                } catch (e) {
                    //or assume it is a URL
                    href = this.dataset.nav;
                }
            } else {
                href = this.href;
            }

            //nav() returns if the hash should change (lol)
            return nav(href, opts);
        });

        common.bindLiveEvent('click', '[data-nav-no-update]', function(e) {
            var opts = {
                shouldUpdateAddress: false
            }, hash = this.hash;

            //Hand it off
            nav(hash, opts);

            //Always disable default anchor behavior
            e.preventDefault();
            return false;
        });

        common.bindLiveEvent('click', '[data-nav-hide-error-popup]', function(e) {
            hideErrorPopup();
            e.preventDefault();
        });

        common.bindLiveEvent('click', '[data-nav-refresh]', function(e) {
            refresh();
            e.preventDefault();
        });

        common.bindLiveEvent('click', '[data-nav-change]', function(e) {
            onChange(this.href);
            e.preventDefault();
        });

        common.bindLiveEvent('click', '[data-nav-confirm]', function(e) {
            var opts = { conf: '', sub: '', url: '' };

            //If it contains a list of props as JSON
            if (this.dataset.navConfirm) {
                opts = JSON.parse(this.dataset.navConfirm);
            }

            //Default to this anchor's href
            if (!opts.url) {
                opts.url = this.href;
            }

            confirm(opts.conf, opts.sub, opts.url, { control: jQuery(this) });
            e.preventDefault();
        });

        common.bindLiveEvent('click', '[data-nav-bet-error]', function(e) {
            navBetError(this.href);
            e.preventDefault();
        });

        common.bindLiveEvent('click', '[data-nav-post]', function(e) {
            var opts = {};

            //If it contains a list of props as JSON
            if (this.dataset.navPost) {
                opts = JSON.parse(this.dataset.navPost);
            }

            //Default to this anchor's href
            if (!opts.url) {
                opts.url = this.href;
            }

            ajaxPost(opts.url, null, null, { control: jQuery(this) });
            e.preventDefault();
        });
    }


    /**
     * Gets the location.hash (or what you'd expect location.hash to be) without the leading #.
     * @param {string} url
     */ 
    function getHashFragment(url) {
        url = url || window.location.href;
        return url.replace(/^[^#]*#?(.*)$/, '$1');
    }


    /**
     * The standard way to load and show content into the main content area of our web app.
     * @param {string} url
     * @todo depend on GA module
     */
    function ajaxContent(url) {
        msgBus.publish("nav.content.start", url);

        return ajaxGet(url, function(data, textStatus, jqXHR) {
            //If to redirect
            if (data.redirectUrl) {
                window.location.href = data.redirectUrl;
            } else {
                msgBus.publish("nav.content.showing", url);

                //Output
                showContent(data);

                msgBus.publish("nav.content.shown", url);
            }
        }, {}, function(xhr, textStatus, jqXHR) {
            msgBus.publish("nav.content.error", xhr, textStatus);
        }, function(xhr, textStatus) {
            msgBus.publish("nav.content.complete", xhr, textStatus);
        });
    }


    /**
     * The standard way to display content in the main content area of our web app.
     * @param {string} html
     */
    function showContent(html) {
        //Hide any errors
        jQuery('#ajax-error').hide();

        //Display
        var container = jQuery('#main-container');

        /* temporary fix to bpr memory leak */
        var startersContainer = document.getElementById("starters-content");
        if (startersContainer) {
            ko.removeNode(startersContainer);
        }

        if (container.length) {
            container.html(html);
        }

        //Hide the URL bar on the iPhone
        setTimeout(common.hideURLbar, 20);
    }


    // An async AJAX post used for requests such as placing bets or making deposits. Will automatically show the loading overlay.
    // Parameters:
    // * url - url to call
    // * data - data to provide (the anti-forgery token will automatically be added)
    // * successCallback - function to call on success
    // * options - option object for additional parameters.
    //
    // The supported option parameters are:
    // * error -- the function to call on error
    // * control -- a control to automatically disable before making the call
    // * reenable -- boolean controlling whether to re-enable the control on an error (default true)
    // * hideOverlay -- boolean controlling whether to hide the overlay when complete (default true)
    // * timeout -- timeout in milliseconds (only necessary if non-default is desired)
    function ajaxPost(url, data, successCallback, options, excludeAntiForgeryToken) {
        var ds = "";

        //set up the defaults for the options, most of them are OK as undefined.
        var settings = jQuery.extend({ reenable: true, hideOverlay: true, contentType: 'application/x-www-form-urlencoded; charset=UTF-8' }, options || {});

        showLoading();

        if (settings.control !== undefined) {
            common.setDisableState(settings.control, false);
        }

        if (excludeAntiForgeryToken !== true) {
            var af = jQuery('#anti-forgery [name=__RequestVerificationToken]');

            if (af.length) {
                ds = af.serialize();
            }
        }

        if (data != undefined) {
            ds = ((ds === "") ? "" : (ds + '&')) + data;
        }

        var defaultSuccessCallback = function(data) {
            if (data) {
                //if the data has a RedirectUrl property we need to redirect.
                if (data.RedirectUrl) {
                    navChange(data.RedirectUrl);
                } else {
                    //otherwise assume it's content
                    showContent(data);
                }
            }
        }

        return jQuery.ajax({
            type: "POST",
            url: url,
            data: ds,
            success: successCallback || defaultSuccessCallback,
            timeout: settings.timeout,
            contentType: settings.contentType,
            error: function(xhr, textStatus) {
                var status = textStatus === timeoutStatus ? 0 : xhr.status;

                if (settings.reenable && (settings.control !== undefined)) {
                    common.setDisableState(settings.control, true);
                }

                if (settings.error !== undefined) {
                    settings.error(status, xhr);
                }

                //Show error
                ajaxError(status, xhr, false);
            },
            complete: function(xhr, status) {
                if (settings.hideOverlay) {
                    hideLoading();
                }

                //Special handling for some browsers that report timeouts/server down errors as success with status 0.
                if (status === timeoutStatus || xhr.status === 0) {
                    ajaxError(0);
                }
            }
        });
    }


    /**
     * Makes an AJAX POST call to a URL with JSON data.
     * @param {string} url
     * @param {string} data - NEVER USED?
     * @param {function} onSuccess
     * @param {object} options
     * @param {boolean} excludeAntiForgeryToken
     */
    function ajaxPostWithJsonData(url, data, onSuccess, options, excludeAntiForgeryToken) {
        var ds = "";

        //set up the defaults for the options, most of them are OK as undefined.
        var settings = jQuery.extend({ reenable: true, hideOverlay: true, contentType: 'application/json' }, options || {});

        showLoading();

        if (settings.control !== undefined) {
            common.setDisableState(settings.control, false);
        }

        if (excludeAntiForgeryToken !== true) {
            var af = jQuery('#anti-forgery [name=__RequestVerificationToken]');

            if (af.length) {
                ds = af.serialize();
            }
        }

        var defaultSuccessCallback = function(data) {
            if (data) {
                //if the data has a RedirectUrl property we need to redirect.
                if (data.RedirectUrl) {
                    navChange(data.RedirectUrl);
                } else {
                    //otherwise assume it's content
                    showContent(data);
                }
            }
        }

        return jQuery.ajax({
            type: "POST",
            url: url,
            data: ds,
            success: onSuccess || defaultSuccessCallback,
            timeout: settings.timeout,
            contentType: settings.contentType,
            error: function(xhr, textStatus) {
                var status = textStatus === timeoutStatus ? 0 : xhr.status;
                if (settings.reenable && (settings.control !== undefined)) {
                    common.setDisableState(settings.control, true);
                }
                if (settings.error !== undefined) { settings.error(status, xhr); }

                ajaxError(status, xhr, false);

            },
            complete: function(xhr, status) {
                if (settings.hideOverlay) {
                    hideLoading();
                }

                //Special handling for some browsers that report timeouts/server down errors as success with status 0.
                if (status === timeoutStatus || xhr.status === 0) {
                    ajaxError(0);
                }
            }
        });
    }


    /**
     * Basic ajax get for requests that don't require forgery tokens or data submission.
     * @param {string} url
     * @param {function} onSuccess
     * @param {object} options - { hideOverlay: bool }
     * @param {function} onError
     * @param {function} onComplete
     */
    function ajaxGet(url, onSuccess, options, onError, onComplete) {
        //set up the defaults for the options, most of them are OK as undefined.
        var settings = jQuery.extend({ hideOverlay: true }, options || {});

        onError = onError || function() { }
        onComplete = onComplete || function() {}

        showLoadingNoAuto();

        jQuery.ajax({
            url: url,
            success: function(xhr, textStatus, jqXHR) {
                onSuccess(xhr, textStatus, jqXHR);
            },
            cache: true,
            error: function(xhr, textStatus) {
                var status = textStatus === timeoutStatus ? 0 : xhr.status;
                ajaxError(status, xhr, true);
                onError(xhr, textStatus);
            },
            complete: function(xhr, textStatus) {
                if (settings.hideOverlay) {
                    hideLoading();
                }

                //Special handling for some browsers that report timeouts/server down errors as success with status 0.
                if (textStatus === timeoutStatus || xhr.status === 0) {
                    ajaxError(0);
                    onError(xhr, textStatus);
                }

                onComplete(xhr, textStatus);
            }
       });
    }


    /**
     * Standard error handling for ajax errors.
     */
    function ajaxError(status, xhr, isGet) {
        hideLoading();

        // If accessing a protected page when not logged in we'll get a 403 forbidden response
        // Errors with status 550 are to be displayed as popups.
        // Everything else displays the generic ajax error message.
        switch (status) {
            case 403:
                if (ajax403Handler) {
                    ajax403Handler(lastRequestedUrl, isGet);
                }
                break;
            case 550:
                jQuery(errorWindow).html(xhr.responseText);
                common.showPopup(jQuery(errorWindow));
                jQuery('#error-window .close').click(function() {
                    hideErrorPopup();
                });
                break;
            case 551:
                location.reload(true);
                break;
            default:
                jQuery('#ajax-error').show();
                jQuery('#main-container').html("");
                break;
        }

        msgBus.publish('error', { status: status, description: xhr });
        msgBus.publish('nav.error', { status: status, description: xhr });
    }


    /**
     * Handles standard TabTouch navigation.
     * @deprecated Use router instead
     * @param {string} url
     * @param {object} { hideErrorPopup: bool, shouldUpdateAddress: bool }
     */
    function nav(url, options) {
        options = options || {};

        if (options.hideErrorPopup) {
            hideErrorPopup();
        }

        var toUrl = getHashFragment(url);
        var navConfig = navRules.configFor(toUrl);

        if (navConfig.useNavStack) {
            //
            // Only push 'sideways' or 'deeper' navigation in the view heirarchy.
            // Assume that the same or shorter match of url fragment is either a refresh
            // or a kind of backwards/cancel navigation, which is not to be pushed.
            //
            var fromUrl = getHashFragment(location.href);

            if (fromUrl.substring(0, toUrl.length) != toUrl) {
                // get return url override if defined in the NavRules
                var returnUrl = navConfig.returnUrl || fromUrl;
                navService.pushUrl('#' + returnUrl);
            }
        }
        else {
            // revert to standard tabtouch navigation scheme
            navService.clearUrlStack();
        }

        msgBus.publish('nav.nav', url);

        return _performNav(url, options.shouldUpdateAddress);
    }


    /**
     * Actually perform the page navigation and load the content into the main content area.
     */
    function _performNav(url, shouldUpdateAddress) {
        var actualUrl = getHashFragment(url);

        lastRequestedUrl = actualUrl;

        // clean up nav stack, now that we're at this page
        navService.pruneUrl('#' + actualUrl);

        if (isHomeUrl(actualUrl)) {
            actualUrl = homeUrl;
        }

        if (new RegExp("tote\/meetings\/([a-z]+)\/([0-9]+)", "i").test(actualUrl)) {
            if (typeof raceBettingPageHandler == "function") {
                raceBettingPageHandler(actualUrl)
                    .catch(function(err) {
                        console.log("Race betting page handler failed to handle route: " + err);
                        ajaxContent(actualUrl);
                    });
            } else {
                throw new Error("Invalid race betting page handler");
            }
        } else {
            ajaxContent(actualUrl);
        }

        //return true to follow the #link which will just update the address bar.
        return (shouldUpdateAddress === undefined) || shouldUpdateAddress;
    }


    /**
     * Performs a standard navigation but does not change the URL hash.
     * @param {string} url 
     */
    function navChange(url) {
        hideLoading();
        nav(url);
        location.hash = getHashFragment(url);
    }


    /**
     * Callback for when the page's hash changes (for browsers that support it). Bound in tabtouch (for some reason). Enables the back button to work (somehow).
     */
    function hashChange() {
        // make sure we aren't reloading the last request.
        if (lastRequestedUrl !== getHashFragment(window.location.hash)) {
            msgBus.publish("nav.hashchange");

            nav(window.location.href);
        }
    }


    /**
     * Refreshes the main content.
     * @returns {boolean} false - probably stops default action for anchors
     */
    function refresh() {
        // Clearing the login-form so that on the off chance that a user changes from 3G to bunbury wifi or vice versa
        // They get or don't get the buttons in the right circumstances.
        jQuery('form#login-form').remove();

        var refreshUrl = window.location.hash;

        var overrideRefresh = jQuery('#overrideRefreshUrl');

        if (overrideRefresh.length > 0) {
            refreshUrl = overrideRefresh.val();
        }

        nav(refreshUrl);
        return false;
    }


    /**
     * Overrides the "back" button "click" event handler.
     * @param {function} handler 
     * @param {string} label 
     * @param {string} url 
     * @returns {} 
     */
    function overrideBack(handler, label, url) {
        var btn = jQuery('a#backButton');
        
        if (btn.length) {
            btn.find('span').text(label ? label : "Back");

            btn.unbind('click').bind('click', function(event) { return handler(this.href, event); });

            if (url) {
                setBackUrl(url);
            }
        }
    }


    //
    // Set the page fixed back url
    //
    function setBackUrl(backUrl) {
        navService.setBackUrl(backUrl);

        var btn = jQuery('a#backButton');

        if (btn.length) {
            btn.show().attr('href', navService.peekUrl());
        }
    }


    /**
     * Resets the "back" button back to the default behavior.
     * @param {} backText 
     * @returns {} 
     */
    function resetBack(backText) {
        var btn = jQuery('a#backButton');

        if (btn.length) {
            btn.find('span').text(backText ? backText : "Back");
            btn.unbind('click').bind('click', function () {
                var self = this;
                return navService.popUrl(function (url) {
                    self.href = url;

                    msgBus.publish('nav.resetback', url);

                    return _performNav(self.href);
                });
            });
        }
    }


    /**
     * Hides the "back" button in the header of the web app.
     * @returns {boolean}
     */
    function hideBack() {
        var btn = jQuery('a#backButton');

        if (btn.length) {
            btn.hide();
            return true;
        } else {
            return false;
        }
    }


    /**
     * Overrides the "click" action (and the HTML?) of the refresh button (that is somewhere).
     * @param {function} handler 
     */
    function overrideRefresh(handler) {
        var btn = jQuery('.refresh-button');
        btn.unbind('click').bind('click', handler);
        btn.html('<span class="tticon tticon-refresh fz-21"><span class="accessible">Refresh</span></span>');
    }


    /**
     * Hides an error popup?
     */
    function hideErrorPopup() {
        jQuery(errorWindow).fadeOut('fast');
    }


    /**
     * Scrolls to the top Y position of an element, found by ID attribute.
     * @param {string} id 
     * @returns {boolean} false - disables onclick event
     * @todo not do this lol
     */
    function scrollTo(id) {
        if (id == '#top') {
            id = 'body';
        }
        jQuery('html, body').animate({
            scrollTop: jQuery(id).offset().top
        }, 'fast');
        return false;
    }


    function showLoading() {
        navLoading.showLoading();
    }


    function showLoadingNoAuto() {
        navLoading.showLoadingNoAuto();
    }


    function showLoadingFullScreenFixed() {
        navLoading.showLoadingFullScreenFixed();
    }


    function hideLoading() {
        navLoading.hideLoading();
    }


    function pushLoading(action) {
        return navLoading.pushLoading(action);
    }


    function pushLoadingFor(promise) {
        return pushLoading(function(hide) {
            return promise
                .then(function(value) {
                    hide();
                    return value;
                })
                .catch(function(err) {
                    hide();
                    throw err;
                });
        });
    }


    /**
     * Sets the function to call if a 403 error occurs during an AJAX operation.
     * @param {function} handler
     */
    function set403Handler(handler) {
        ajax403Handler = handler;
    }


    /**
     * Redirect back to a URL after a bet error after closing a popup. Only called when it's impossible to proceed with the bet (e.g. pool closed).
     * @todo Move to a betting-related module
     */
    function navBetError(url) {
        hideErrorPopup();
        return nav(url);
    }


    /**
     * Stores the "home" page URL.
     * @param {string} url 
     */
    function initHomeUrl(url) {
        homeUrl = url;
    }


    /**
     * Checks if a URL is the "home" page URL.
     * @param {string} url 
     * @returns {boolean}
     */
    function isHomeUrl(url) {
        return url === '' || url === '#';
    }


    /**
     * Checks if on the "home" page of the app.
     * @returns {boolean}
     */
    function isHome() {
        return isHomeUrl(window.location.hash);
    }


    /**
     * Displays a confirmation dialog.
     * @param {string} selector
     * @param {string} selector
     * @param {string} url
     */
    function confirm(confDiv, subDiv, url) {
        jQuery('.sub-div').hide();
        jQuery(subDiv + ' .confirm-yes').attr('href', url);
        common.setDisableState(jQuery(subDiv + ' .confirm-yes'), true);
        jQuery(subDiv).show();
        common.showPopup(jQuery(confDiv));
    }

    /**
     * Performs an AJAX get followed by a redirect. Used in conjunction with confirmation dialogs.
     * @param {string} url 
     * @param {string} onSuccessUrl 
     * @param {object} elemToDisable 
     * @param {boolean} hideOverlay 
     * @returns {boolean} 
     */
    function redirect(url, onSuccessUrl, elemToDisable, hideOverlay) {
        if (elemToDisable.is('.disabled') === false) {
            common.setDisableState(elemToDisable, false);

            ajaxGet(
                url,
                function() {
                    navChange(onSuccessUrl);
                    return false;
                },
                { hideOverlay: (hideOverlay === undefined) ? true : hideOverlay }
            );
        }
        return false;
    }


    /**
     * Redirects to an external URL.
     * @param {string} url 
     */
    function redirectExternal(url) {
        window.location.href = url;
    }


    function setRaceBettingPageHandler(handler) {
        raceBettingPageHandler = handler;
    }


    return {
        init: init,
        ajaxContent: ajaxContent,
        showContent: showContent,
        ajaxError: ajaxError,
        ajaxPost: ajaxPost,
        ajaxPostWithJsonData: ajaxPostWithJsonData,
        ajaxGet: ajaxGet,
        nav: nav,
        navChange: navChange,
        hashChange: hashChange,
        refresh: refresh,
        overrideBack: overrideBack,
        setBackUrl: setBackUrl,
        resetBack: resetBack,
        hideBack: hideBack,
        overrideRefresh: overrideRefresh,
        hideErrorPopup: hideErrorPopup,
        initHomeUrl: initHomeUrl,
        set403Handler: set403Handler,
        navBetError: navBetError,
        isHome: isHome,
        scrollTo: scrollTo,
        redirect: redirect,
        confirm: confirm,
        redirectExternal: redirectExternal,
        showLoading: showLoading,
        showLoadingFullScreenFixed: showLoadingFullScreenFixed,
        hideLoading: hideLoading,
        pushLoading: pushLoading,
        pushLoadingFor: pushLoadingFor,
        showLoadingNoAuto: showLoadingNoAuto,
        setRaceBettingPageHandler: setRaceBettingPageHandler
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Handles subscribing and publishing to various topics.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(5), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function(amplify, common, loggingService) {
    //Assign events
    (function() {
        common.bindLiveEvent('click', '[data-msg-publish]', function(e) {
            var topic = this.dataset.msgPublish,
                data = this.dataset.msgData;

            try {
                data = JSON.parse(data);
            } catch (e) {
                //Assume a string
            }

            publish(topic, data);
        });
    })();

    return {
        publish: publish,
        subscribe: subscribe,
        unsubscribe: unsubscribe
    }

    function publish (topic, data) {
        amplify.publish(topic, data);
        loggingService.logDebug("MessageBusService.publish('" + topic + "')");
    };

    function subscribe (topic, func) {
        amplify.subscribe(topic, func);
        loggingService.logDebug("MessageBusService.subscribe('" + topic + "')");
    };

    function unsubscribe (topic, func) {
        amplify.unsubscribe(topic, func);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Common legacy functions. It handles popups, binding events to elements and more.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(63), __webpack_require__(22), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, Base64, loggingService, cookies) {
    var self = this;

    var disabled = "disabled";
    var appCapabilityCookieName = "AppCapability";
    var timezoneOffsetCookieName = "TimezoneOffset";

    /**
     * Binds an event to a selector. This means any element inserted later (through AJAX or whatever) can trigger it.
     */
    function bindLiveEvent(eventType, elementQuerySelector, cb) {
        document.addEventListener(eventType, function(event) {
            var qs = document.querySelectorAll(elementQuerySelector);

            if (qs) {
                var el = event.target, index = -1;
                while (el && ((index = Array.prototype.indexOf.call(qs, el)) === -1)) {
                    el = el.parentElement;
                }

                if (index > -1) {
                    return cb.call(el, event);
                }
            }
        });
    }

    function hideURLbar() {
        window.scrollTo(0, 1);
        setLocalTime();
    }

    function showPopup(popupDiv) {
        //delay 50 milliseconds to allow background layout completed
        setTimeout(function() {
            jQuery('div .popup').hide(); // hide all other popups (especially any confirmation popup)
            var documentHeight = jQuery(document).height();
            popupDiv.css({ 'height': documentHeight }).fadeIn('fast');
            popupDiv.children('.overlay').animate({ opacity: 0.6 }, 'fast');

            var scrollTop = window.pageYOffset ? window.pageYOffset : ((document.body.parentElement) ? document.body.parentElement.scrollTop : 0);

            //Using a minimum scroll top to stop the close popup being over the 'log out' button.
            popupDiv.children('.window').css({ 'top': Math.max(scrollTop + 20, 40) });

            //Check if the height has changed due to showing the popup, and increase the overlay size accordingly
            var newHeight = (popupDiv.children('.window').height() + scrollTop + 100);
            if (newHeight > documentHeight) {
                popupDiv.children('.overlay').css({ 'height': newHeight });
            }
        }, 50);
    }

    //changes disable state for elements that use both a class and attribute

    function setDisableState(selector, enable) {
        if (enable) {
            selector.removeClass(disabled).removeAttr(disabled);
        } else {
            selector.addClass(disabled).prop(disabled, true);
        }
    }

    //KeyPress validation checks for input to numeric text boxes.
    //We do regex check even if the input type=number is supported, since we may not want decimal points or scientific notation
    //e is the keypress event, isInt is true for integer-only, false for decimal input

    function numericKeyPress(e, isInt) {
        var theEvent = e || window.event,
            key = theEvent.keyCode || theEvent.which,
            regex = isInt ? /[0-9]/ : /[0-9]|\./;

        //if it's the enter key or backspace, return to allow standard handling.
        //backspace check is only necessary for iPhone3
        if (key === 13 || key === 8) {
            return;
        }

        key = String.fromCharCode(key);
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            theEvent.preventDefault();
        }
    }

    function maxlengthKeyPress(s, e) {
        //if it's the enter key or backspace, return to allow standard handling.
        //backspace check is only necessary for iPhone3
        if (e.keyCode === 13 || e.keyCode === 8) {
            return true;
        }
        return s.value.length < jQuery(s).attr("maxlength");
    }

    //sets the alternating style for each 'li' element within the supplied selector

    function initDisplayListStyle(ul) {
        ul.each(function() { jQuery(this).children("li:even").addClass('alt'); });
    }

    //animated scroll to function

    function scrollTo(destination, duration) {
        var loc = destination.length ? destination.position().top : 0;
        jQuery('html:not(:animated),body:not(:animated)').animate({ scrollTop: loc }, duration);
    }

    //Forces the browser to redraw an element and its contents.
    //Certain browsers (mostly Android) do not redraw elements outside the visible window well. 
    //Calling this function on the parent of the elements should fix it.

    function redrawFix(element) {
        element.hide();
        var dummy = element.offset();
        element.show();
    }

    function slideToggle(slideElement) {
        if (slideElement.is(':hidden')) {
            slideElement.slideDown(500);
        } else {
            slideElement.slideUp(500);
        }
    }

    function initSlideToggleHandlers() {
        jQuery("h3.toggle").click(function() {
            jQuery(this).next('.info-expand').slideToggle();
            jQuery(this).toggleClass("open");
            scrollTo(jQuery(this), 500);
        });
    }

    function addWaterMark(id, text) {
        var textBox = jQuery('#' + id);
        var waterMarkClass = 'watermark-textbox';

        textBox.val(text).addClass(waterMarkClass);

        textBox.on('blur', function() {
            if (textBox.val().length === 0) {
                textBox.val(text);
                textBox.addClass(waterMarkClass);
            }
        });

        textBox.on('focus', function() {
            textBox.val('');
            textBox.removeClass(waterMarkClass);
        });
    }

    function getLocalTime(wordsToReplaceString, gmtDateInMilliseconds) {
        // 12:30,12345678 = replaces 12:30 with localised time in same format using gmt time in milliseconds 
        if (wordsToReplaceString.match(/^\d{2}:\d{2}/)) {
            if (gmtDate > 0) {
                var localTimeString = gmtDateInMilliseconds.toLocaleTimeString('en-au', { hour12: false });
                localTimeString = localTimeString.match(/\d+:\d+/); // Format: 23:00

                var text = jQuery(this).text();
                var newText = text.replace(wordsToReplaceString, localTimeString);
                return newText;
            }
        }

        // Tue, 09 Jan 2015 12:30,12345678 = replaces Tue 09 Jan 2015 12:30 with localised time in same format using gmt time in milliseconds 
        if (wordsToReplaceString.match(/^\w{3}, \d{2} \w{3} \d{4} \d{2}:\d{2}$/)) {
            var localTimeString = gmtDateInMilliseconds.toLocaleString('en-au',
                options = {
                    weekday: "short", day: "2-digit", month: "short", year: "numeric",
                    hour: "2-digit", minute: "2-digit", hour12: "false"
                });

            var hour = localTimeString.match(/\d+:/);
            if (hour != null) {
                if (hour.length == 1) {
                    if (hour[0].length == 2)
                        localTimeString = localTimeString.replace(/\d{1}:/, '0' + hour);
                }
            }

            var text = jQuery(this).text();
            var newText = text.replace(wordsToReplaceString, localTimeString.substr(0, 23));
            return newText;
        }

        return "";
    };

    function setLocalTime() {
        jQuery('[data-localtime]').each(function() {
            var attributeValue = jQuery(this).attr('data-localtime');
            if (attributeValue.indexOf('#') < 0) return;

            var parms = attributeValue.split('#');
            var wordsToReplace = parms[0];
            var gmtDate = new Date(parseInt(parms[1]));

            // 12:30,12345678 = replaces 12:30 with localised time in same format using gmt time in milliseconds 
            if (wordsToReplace.match(/^\d{2}:\d{2}/)) {
                if (gmtDate > 0) {
                    var localTimeString = gmtDate.toLocaleTimeString('en-au', { hour12: false });
                    localTimeString = localTimeString.match(/\d+:\d+/); // Format: 23:00

                    var text = jQuery(this).text();
                    var newText = text.replace(wordsToReplace, localTimeString);
                    jQuery(this).text(newText);
                }
            }

            // Tue, 09 Jan 2015 12:30,12345678 = replaces Tue 09 Jan 2015 12:30 with localised time in same format using gmt time in milliseconds 
            if (wordsToReplace.match(/^\w{3}, \d{2} \w{3} \d{4} \d{2}:\d{2}$/)) {
                var localTimeString = gmtDate.toLocaleString('en-au',
                    options = {
                        weekday: "short", day: "2-digit", month: "short", year: "numeric",
                        hour: "2-digit", minute: "2-digit", hour12: "false"
                    });

                var hour = localTimeString.match(/\d+:/);
                if (hour != null) {
                    if (hour.length == 1) {
                        if (hour[0].length == 2)
                            localTimeString = localTimeString.replace(/\d{1}:/, '0' + hour);
                    }
                }

                var text = jQuery(this).text();
                var newText = text.replace(wordsToReplace, localTimeString.substr(0, 23));
                jQuery(this).text(newText);
            }
        });
    }

    function hasAppCapability(capability) {
        if (!isCookieSet(appCapabilityCookieName)) {
            return false;
        }

        capability = capability.toLowerCase();
        var capabilityCookie = Base64.decode(cookieValue(appCapabilityCookieName));
        var capabilities = capabilityCookie.toLowerCase().split(',');
        var isCapable = capabilities.indexOf(capability) != -1;
        loggingService.logDebug('hasAppCapability => capability=' + capability + ' capabilities=[' + capabilities + '] isCapable=' + isCapable);
        return isCapable;
    }

    function hasExplicitTimezoneOffset() {
        return isCookieSet(timezoneOffsetCookieName);
    }

    function getExplicitTimezoneOffset() {
        if (hasExplicitTimezoneOffset() === false) {
            return 0;
        }

        return cookieValue(timezoneOffsetCookieName);
    }

    function isCookieSet(cookieName) {
        return cookieValue(cookieName) != undefined;
    }

    function cookieValue(cookieName) {
        var value = cookies.get(cookieName);
        return value;
    }

    return {
        hideURLbar: hideURLbar,
        showPopup: showPopup,
        setDisableState: setDisableState,
        numericKeyPress: numericKeyPress,
        initDisplayListStyle: initDisplayListStyle,
        scrollTo: scrollTo,
        redrawFix: redrawFix,
        slideToggle: slideToggle,
        initSlideToggleHandlers: initSlideToggleHandlers,
        addWaterMark: addWaterMark,
        maxlengthKeyPress: maxlengthKeyPress,
        getLocalTime: getLocalTime,
        setLocalTime: setLocalTime,
        hasAppCapability: hasAppCapability,
        hasExplicitTimezoneOffset: hasExplicitTimezoneOffset,
        getExplicitTimezoneOffset: getExplicitTimezoneOffset,
        bindLiveEvent: bindLiveEvent
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 6 */,
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(5), __webpack_require__(31), __webpack_require__(243), __webpack_require__(12), __webpack_require__(118), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, common, logon, redirect, note, ver, prefServ) {
    var overrideBackUrl;

    function initHome() {
        jQuery('html').removeAttr('class');
        jQuery('body').attr('id', 'home');
        jQuery('body').removeAttr('class');
        jQuery('#nav-info-container').hide();
        nav.hideBack();
        jQuery('.button.help').show();
        logon.resetActions();
        redirect.initialiseRedirectPopup();
        var racingRadioButton = jQuery('#racingradio-home');
        if (racingRadioButton) {
            note.initRacingRadioNotification('racingradio-home');
        }
    }

    function fixBackground() {
        jQuery('body#home').removeAttr('id');
    }

    function initPlayerHome() {
        jQuery('html').removeAttr('class');
        jQuery('body').attr('id', 'home-player');
        jQuery('body').removeAttr('class');
        jQuery('#nav-info-container').hide();
        nav.hideBack();
        jQuery('.button.help').show();
        logon.resetActions();
    }

    function initCommon(url, backText) {
        jQuery('html').removeAttr('class');
        jQuery('body#home').removeAttr('id');
        jQuery('body').removeAttr('class');
        jQuery('#nav-info-container').show();

        setBackButtonUrl(url);
        jQuery('.button.help').hide();
        nav.resetBack(backText);
        common.initDisplayListStyle(jQuery('ul.display-list:not(.no-alt)'));
        initNavInfoStyle();
        logon.resetActions();
    };

    function initHelp(url, backText) {
        initCommon(url, backText);
        jQuery('div.help a.button').click(function(e) {
            e.preventDefault();
            goToHelpSection(jQuery(this).attr('href'));
        });
    }

    function initNavInfoStyle() {
        jQuery('.nav-info span:first').css('border-left', 'none');
        jQuery('.nav-info span:last').css('border-right', 'none');
    }

    //Sets the scroll bar to a specific help section.
    //id is the id of the help div (must begin with #).
    function goToHelpSection(id) {
        var destination = jQuery('div.help ' + id);
        jQuery(window).scrollTop(destination.length ? destination.position().top : 0);
    }

    function overrideNextPagesBackButton(url) {
        overrideBackUrl = url;
    }

    function setBackButtonUrl(url) {
        var newUrl = overrideBackUrl || url;
        nav.setBackUrl(newUrl);
        overrideBackUrl = undefined;
    }

    function init() {
        //set the timezone offset - use the cookie set by the android app if present. If not, use javascript Date.
        var clientTimeZoneOffsetMinutes = 0;
        if (common.hasExplicitTimezoneOffset()) {
            var timezoneOffsetCookie = common.getExplicitTimezoneOffset();
            clientTimeZoneOffsetMinutes = Number(timezoneOffsetCookie);
        } else {
            clientTimeZoneOffsetMinutes = (new Date().getTimezoneOffset());
        }
        var clientTimeZoneOffset = clientTimeZoneOffsetMinutes / 60; //in hours

        //set up common ajax options
        jQuery.ajaxSetup({
            cache: false,
            timeout: 30000,
            beforeSend: function(xhr, req) {
                if (req.crossDomain)
                    return;
                var xTabTouchVersion = ver.getTabTouchVersion();
                if (xTabTouchVersion) {
                    xhr.setRequestHeader("X-TabTouch-Version", xTabTouchVersion);
                }
                xhr.setRequestHeader("ClientTimeZone", clientTimeZoneOffset);
                xhr.setRequestHeader("ClientScreenWidth", window.innerWidth);
                xhr.setRequestHeader("BettingPageRefresh", prefServ.bettingPageRefreshEnabled());
            }
        });

        nav.set403Handler(logon.handle403);
        logon.ajaxLogonState();

        common.hideURLbar();

        redirect.initialiseRedirect();

        BETWALLETINDICATOR.init();

        POPUP.init();

        //check for framing    
        if (top != self) {
            self.location.href = '/home/noframe';
        }

        jQuery(window).on('hashchange', nav.hashChange);
    }

    return {
        initHome: initHome,
        initPlayerHome: initPlayerHome,
        initCommon: initCommon,
        initHelp: initHelp,
        goToHelpSection: goToHelpSection,
        overrideNextPagesBackButton: overrideNextPagesBackButton,
        fixBackground: fixBackground,
        init: init
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(248)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_preferencesStore) {
    window.PreferencesService = function() {
        var self = this;

        var _accessKeyValue = function(key, value) {
            if (value === undefined) {
                return _preferencesStore.get(key);
            }
            _preferencesStore.set(key, value);
            return value;
        };

        self.loggedInUser = function(value) {
            var ret = _accessKeyValue('LoggedInUser', value);
            return ret === undefined || ret === null ? 0 : ret;
        };

        self.bettingPageRefreshEnabled = function(value) {
            var loggedInUser = self.loggedInUser();
            var ret = _accessKeyValue(loggedInUser + 'BettingPageRefreshEnabled', value);
            return ret === undefined || ret === null ? false : ret;
        };

        self.cashBettingEnabled = function(value) {
            return _accessKeyValue('CashBettingEnabled', value);
        };

        self.racingHeaderDetailsViewEnabled = function(value) {
            return _accessKeyValue('RacingHeaderDetailsViewEnabled', value);
        };

        self.locationServicesEnabled = function(value) {
            // MOBI-1226 this will be set to true always for now
            return true;
        };

    };

    return new window.PreferencesService();
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, msgBus) {
    return new function() {
        var loadPage = window.overridePageProvider || function () {
            var $errorContainer = jQuery("#error-container"),
                $errorTitle = $errorContainer.find('h4'),
                $errorMessage = $errorContainer.find('p'),
                $closeButton = $errorContainer.find('a');
            return {
                mainContainer: jQuery("#main-container"),
                ajaxError: jQuery("#ajax-error"),
                errorContainer: $errorContainer,
                errorTitle: $errorTitle,
                errorMessage: $errorMessage,
                errorCloseButton: $closeButton
            };
        };

        var self = this;

        function bindToView() {
            self.page = loadPage();
        }
        function showGenericErrorPage() {
            nav.hideLoading();
            bindToView();
            self.page.mainContainer.hide();
            self.page.ajaxError.show();
        }

        function showErrorPopup(headerText, message) {
            nav.hideLoading();
            msgBus.publish('popup.showPopUp', {
                headerText: headerText,
                messageText: message,
                buttonType: POPUP.BUTTONTYPE.Ok,
                cancelButtonText: "OK",
                isError: true
            });
        }

        function showWarningPopup(headerText, message) {
            nav.hideLoading();
            msgBus.publish('popup.showPopUp', {
                headerText: headerText,
                messageText: message,
                buttonType: POPUP.BUTTONTYPE.Ok,
                cancelButtonText: "OK",
                isWarning: true
            });
        }

        function addHandlers() {
            jQuery('body').on('click touchstart', '#error-container a', function () {
                self.hideErrorPopup();
            });
        }
        //Public Accessors
        self.showGenericErrorPage = showGenericErrorPage;
        self.showErrorPopup = showErrorPopup;
        self.showWarningPopup = showWarningPopup;
        self.addHandlers = addHandlers;
        //Constructor
        bindToView();

        self.init = function() {
            self.addHandlers();
        }

        return self;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Helps to prevent accidental extra AJAX calls.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    'use strict';
    var locking = {};

    locking._sharedLocks = {};

    /* a basic no-wait mutex implementation */
    locking.lock = function() {
        var self = this;

        var _value = 0;

        self.trylock = function() {
            if (_value) {
                return 0;
            }
            _value = 1;
            return 1;
        };

        self.unlock = function() {
            _value = 0;
        };

        self.count = function() {
            return _value;
        };
    };

    /* obtain shared-lock instance */
    locking.shared_lock = function(name) {
        if (!locking._sharedLocks[name]) {
            locking._sharedLocks[name] = new locking.lock();
        }

        return locking._sharedLocks[name];
    };

    return locking;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(14), __webpack_require__(59)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, jQueryToDictionary, locationService) {
    var lda = function() {
        var self = this;

        self.locationService = locationService;
        self.providerLocations = null;

        self.addToUrlEncodedData = function(queryString) {
            if (self.locationService) {
                self.providerLocations = self.locationService.getLocationDetails();

                if (queryString) {
                    queryString = queryString + '&';
                } else {
                    queryString = "";
                }
                queryString = queryString + jQuery.param({ clientLocationDetails: JSON.stringify({ ProviderLocations: self.providerLocations }) });
            }
            return queryString;
        }

        self.addToDictionary = function(dictionary) {
            if (self.locationService) {
                self.providerLocations = self.locationService.getLocationDetails();
                dictionary = dictionary.concat(jQuery.toDictionary({ clientLocationDetails: JSON.stringify({ ProviderLocations: self.providerLocations }) }));
            }
            return dictionary;
        }
    }

    return lda;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Handles notifications. Originally window.NOTE.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, common, cookies) {
    function notification(wrapperId, cookieName, callback) {
        var notificationPopup = jQuery('#' + wrapperId),
            hasBeenDisabled;

        attachCloseHandlers(wrapperId, callback);

        this.show = function(e) {
            if ((!cookieName || cookies.get(cookieName) !== 'true') && !hasBeenDisabled) {
                if (e && e.preventDefault) {
                    e.preventDefault();
                }
                common.showPopup(notificationPopup);
                jQuery('#dontShowNotification').removeAttr('checked');
            } else {
                callback();
            }
        };

        jQuery('#' + wrapperId + ' .continue').click(function() {
            if (jQuery('#dontShowNotification').is(':checked')) {
                if (cookieName) {
                    cookies.set(cookieName, 'true');
                }
                hasBeenDisabled = true;
            }

            if (callback) {
                callback();
            }
        });
    }

    function initRacingRadioNotification(buttonId) {
        var racingRadioNotification = new notification('racingradio-notification', 'tabtouch.dont_show_rr_notification');
        jQuery('#' + buttonId).click(racingRadioNotification.show);
    }

    function initTabLocatorNotification(callback) {
        attachCloseHandlers('tabtouch-notification');
        var introToTabLocatorNotification = new notification('tablocator-intro-notification', 'tabtouch.dont_show_tablocator_notification', callback);

        return introToTabLocatorNotification;
    }

    function attachCloseHandlers(wrapperId, callback) {
        var notificationPopup = jQuery('#' + wrapperId);
        jQuery('#' + wrapperId + ' .close').click(function() {
            notificationPopup.fadeOut('fast', callback);
        });
    }

    return {
        initRacingRadioNotification: initRacingRadioNotification,
        initTabLocatorNotification: initTabLocatorNotification
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return function(data) {
        var self = this;

        var _match = function(template, tuple) {
            if (template.length > tuple.length) {
                return false;
            }
            for (var i = 0; i < template.length; ++i) {
                if (template[i] && (template[i] != tuple[i])) {
                    return false;
                }
            }
            return true;
        };

        self._bag = data;

        self.put = function(/*values*/) {
            var args_array = [];
            for (var i = 0; i < arguments.length; i++) {
                args_array[i] = arguments[i];
            }
            self._bag.push(args_array);
        };

        self.count = function(/*template*/) {
            var cnt = 0;
            for (var i = 0; i < self._bag.length; ++i) {
                if (_match(arguments, self._bag[i])) {
                    cnt++;
                }
            }
            return cnt;
        };

        self.copy = function(/*template*/) {
            for (var i = 0; i < self._bag.length; ++i) {
                if (_match(arguments, self._bag[i])) {
                    return self._bag[i];
                }
            }
            return null;
        };

        self.copy_many = function(/*template*/) {
            var select = [];
            for (var i = 0; i < self._bag.length; ++i) {
                if (_match(arguments, self._bag[i])) {
                    select.push(self._bag[i]);
                }
            }
            return select;
        };

        self.take_many = function(/*template*/) {
            var select = [];
            var anti_select = [];
            for (var i = 0; i < self._bag.length; ++i) {
                if (_match(arguments, self._bag[i])) {
                    select.push(self._bag[i]);
                } else {
                    anti_select.push(self._bag[i]);
                }
            }
            self._bag.length = 0;
            self._bag.push.apply(self._bag, anti_select);
            return select;
        };
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*!
 * jQuery toDictionary() plugin
 *
 * Version 1.2 (11 Apr 2011)
 *
 * Copyright (c) 2011 Robert Koritnik
 * Licensed under the terms of the MIT license
 * http://www.opensource.org/licenses/mit-license.php
 */
 
(function ($) {
 
    // #region String.prototype.format
    // add String prototype format function if it doesn't yet exist
    if ($.isFunction(String.prototype.format) === false)
    {
        String.prototype.format = function () {
            var s = this;
            var i = arguments.length;
            while (i--)
            {
                s = s.replace(new RegExp("\\{" + i + "\\}", "gim"), arguments[i]);
            }
            return s;
        };
    }
    // #endregion
 
    // #region Date.prototype.toISOString
    // add Date prototype toISOString function if it doesn't yet exist
    if ($.isFunction(Date.prototype.toISOString) === false)
    {
        Date.prototype.toISOString = function () {
            var pad = function (n, places) {
                n = n.toString();
                for (var i = n.length; i < places; i++)
                {
                    n = "0" + n;
                }
                return n;
            };
            var d = this;
            return "{0}-{1}-{2}T{3}:{4}:{5}.{6}Z".format(
                d.getUTCFullYear(),
                pad(d.getUTCMonth() + 1, 2),
                pad(d.getUTCDate(), 2),
                pad(d.getUTCHours(), 2),
                pad(d.getUTCMinutes(), 2),
                pad(d.getUTCSeconds(), 2),
                pad(d.getUTCMilliseconds(), 3)
            );
        };
    }
    // #endregion
 
    var _flatten = function (input, output, prefix, includeNulls) {
        if ($.isPlainObject(input))
        {
            for (var p in input)
            {
                if (includeNulls === true || typeof (input[p]) !== "undefined" && input[p] !== null)
                {
                    _flatten(input[p], output, prefix.length > 0 ? prefix + "." + p : p, includeNulls);
                }
            }
        }
        else
        {
            if ($.isArray(input))
            {
                $.each(input, function (index, value) {
                    _flatten(value, output, "{0}[{1}]".format(prefix, index));
                });
                return;
            }
            if (!$.isFunction(input))
            {
                if (input instanceof Date)
                {
                    output.push({ name: prefix, value: input.toISOString() });
                }
                else
                {
                    var val = typeof (input);
                    switch (val)
                    {
                        case "boolean":
                        case "number":
                            val = input;
                            break;
                        case "object":
                            // this property is null, because non-null objects are evaluated in first if branch
                            if (includeNulls !== true)
                            {
                                return;
                            }
                        default:
                            val = input || "";
                    }
                    output.push({ name: prefix, value: val });
                }
            }
        }
    };
 
    $.extend({
        toDictionary: function (data, prefix, includeNulls) {
            /// <summary>Flattens an arbitrary JSON object to a dictionary that Asp.net MVC default model binder understands.</summary>
            /// <param name="data" type="Object">Can either be a JSON object or a function that returns one.</data>
            /// <param name="prefix" type="String" Optional="true">Provide this parameter when you want the output names to be prefixed by something (ie. when flattening simple values).</param>
            /// <param name="includeNulls" type="Boolean" Optional="true">Set this to 'true' when you want null valued properties to be included in result (default is 'false').</param>
 
            // get data first if provided parameter is a function
            data = $.isFunction(data) ? data.call() : data;
 
            // is second argument "prefix" or "includeNulls"
            if (arguments.length === 2 && typeof (prefix) === "boolean")
            {
                includeNulls = prefix;
                prefix = "";
            }
 
            // set "includeNulls" default
            includeNulls = typeof (includeNulls) === "boolean" ? includeNulls : false;
 
            var result = [];
            _flatten(data, result, prefix || "", includeNulls);
 
            return result;
        }
    });
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(31), __webpack_require__(3), __webpack_require__(89)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, common, logon, nav, jockeyjs) {
    "use strict";

    function initRaceReplayLinks() {
        if (common.hasAppCapability("NativeRaceReplay")) {
            jQuery('.jsaction-play-race-replay').click(function (event) {
                event.stopPropagation();
                event.preventDefault();

                var videokey = jQuery(this).data("videokey");

                jockeyjs.send("RACEREPLAY", { videokey: videokey }, function () { });
            });
        } else {
            jQuery('.jsaction-play-race-replay').click(function (event) {
                event.stopPropagation();
                event.preventDefault();

                var $this = jQuery(this);
                var self = this;

                function stopPlaying($container) {
                    return function () {
                        var owner = jQuery("#race-replay-video").data('owner');
                        if (!!owner)
                            jQuery(owner).removeClass("video-playing");
                        jQuery(".video-container").empty();
                    }
                };


                function createVideoElements(owner, $parent, videoUrl, videoData, reasonText, hiddenReasonText, conditionText) {
                    var $contentContainer = jQuery("<div ></div>");
                    var $header = jQuery("<header />");
                    if (!!videoData) {
                        $header.append(jQuery("<span class='race-location'>" + videoData.RaceName + " - " + videoData.TrackName + "</span>"))
                            .append(jQuery("<span class='race-date'>" + videoData.Date + "</span>"));
                    }

                    $header.append(jQuery('<a href="#" class="close-video"><i class="tticon tticon-cross"></i></a>'));
                    $header.append(jQuery("<div class='clearfix'>"));
                    $contentContainer.append($header);

                    if (reasonText != undefined) {
                        var innerHtml = "<div class='reason-holder'><div class='reason-container'>";
                        innerHtml += "<h5>" + reasonText + "</h5>";

                        if (hiddenReasonText != undefined) {
                            innerHtml += "<div><a class='replay-entitlement-hidden-reason-toggle button flat green moreinfo' href='#'>Check Bet Total</a></div>";
                            innerHtml += "<div class='replay-entitlement-hidden-reason-text' style='display:none'>" + hiddenReasonText + "</div>";
                        }
                        innerHtml += "</div></div>";
                        $contentContainer.append(jQuery(innerHtml));
                    } else {
                        var $video = jQuery('<video id="race-replay-video" style="width:100%; height:auto;" controls="controls"></video>').data("owner", owner);
                        $video.html("<source src='" + videoUrl + "'></source>");

                        $video[0].load();
                        $video[0].play();
                        $video.show();

                        $video.on("ended", stopPlaying($parent));
                        $contentContainer.append($video);
                    }

                    $header.on("click", "a", function () {
                        stopPlaying($parent)();
                        return false;
                    });

                    $contentContainer.on('click', 'a.replay-entitlement-hidden-reason-toggle', function () {
                        jQuery(this).parent().next('div.replay-entitlement-hidden-reason-text').toggle();
                        return false;
                    });

                    $parent.append($contentContainer);
                    window.scrollTo(0, $contentContainer.offset().top - (jQuery(window).height() / 2) + ($contentContainer.height() / 2));
                }

                var $video = jQuery("#race-replay-video");

                if ($video.data("owner") === this) {
                    stopPlaying()();
                    return false;
                }
                stopPlaying()();

                var encVideoKey = $this.data("enc-videokey");
                var metaData = $this.data("video-meta-data");
                var $videoContainer = jQuery("#" + $this.data("video-container-id"));

                nav.ajaxPost("/api/videoentitlement", jQuery.param({ encrpytedVideoKey: encVideoKey }), function (response) {

                    if (response.IsEntitled) {
                        $this.addClass("video-playing");

                        var videokey = response.VideoKey;
                        var videoUrl = videokey;

                        if (jockeyjs != undefined) {
                            jockeyjs.send("RACEREPLAY", { videokey: videokey }, function () { });
                        }

                        createVideoElements(self, $videoContainer, videoUrl, metaData);
                    } else {
                        if (response.CallToActionLoginRequired) {
                            logon.login();
                        } else {
                            createVideoElements(self, $videoContainer, "", metaData, response.ReasonText, response.HiddenReasonText, response.Condition);
                        }
                    }
                }, { error: function (status, xhr) { createVideoElements(this, $videoContainer, "", metaData, "Error checking entitlement to replay."); } });
                return false;
            });
        }
    }

    function pauseCurrenltyPlayingVideo() {
        if (!!jQuery("#race-replay-video").length && !!jQuery("#race-replay-video")[0].pause) {
            jQuery("#race-replay-video")[0].pause();
        }
    }

    return {
        initRaceReplayLinks: initRaceReplayLinks,
        pauseCurrenltyPlayingVideo: pauseCurrenltyPlayingVideo
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery) {
    return {
        bind: function(controller, element) {
            jQuery(element)
                .find(".blackbook-add")
                .unbind("click")
                .click(function(e) {
                    var elem = this;
                    e.stopPropagation();

                    var isSelected = jQuery(elem).hasClass('selected');
                    var starter = jQuery(elem).data("name");
                    var fixType = jQuery(elem).data("fixtype");

                    controller.addEntry(isSelected, starter, fixType);
                });

            jQuery(element)
                .find(".blackbook-add")
                .each(function() {
                    var elem = this;
                    var starter = jQuery(elem).data("name");
                    var fixType = jQuery(elem).data("fixtype");

                    controller.registerStarterAccessor(starter,
                        fixType,
                        function(value) {
                            if (value) {
                                jQuery(elem).addClass('selected');
                                jQuery(elem).children('.text').text('Go to my Blackbook');
                            } else {
                                jQuery(elem).removeClass('selected');
                                jQuery(elem).children('.text').text('Add to my Blackbook');
                            }
                        });
                });
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * A controller class that has to be constructed and bound to a view.
 * 
 * @return constructor
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(4), __webpack_require__(95), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, msg, blackBookService, locking) {
    return function() {
        var self = this;

        self.lockName = "myblackbook-service";
        self.lock = locking.shared_lock(self.lockName);
        self.starterAccessors = {};

        self.anyAddButtons = function() {
            return (self.starterAccessors.length != 0);
        };

        self.registerStarterAccessor = function(starter, fixType, accessor) {
            self.starterAccessors[fixType + starter] = { starter: starter, fixType: fixType, accessor: accessor };
        };

        self.setSelected = function(starter, fixType, isSelected) {
            var entry = self.starterAccessors[fixType + starter];
            if (entry.accessor) {
                entry.accessor(isSelected);
            }
        };

        self.addEntry = function(isSelected, starter, fixType) {
            if (!isSelected) {
                if (starter && fixType) {
                    var request = {
                        starterName: starter,
                        fixType: fixType
                    };
                    if (self.lock.trylock()) {
                        nav.ajaxPost(
                            'account/blackbook/add',
                            jQuery.param(request),
                            function(data) {
                                if (data.success === true) {
                                    self.setSelected(starter, fixType, true);
                                    blackBookService.clear();
                                }
                                self.lock.unlock();
                            },
                            {
                                error: function(status, xhr) {
                                    self.lock.unlock();
                                }
                            });
                    }
                }
            } else {
                nav.navChange('#account/blackbook');
            }
        };

        self.updateView = function() {
            for (var key in self.starterAccessors) {
                var entry = self.starterAccessors[key];
                if (blackBookService.entryCount(entry.fixType, entry.starter)) {
                    entry.accessor(true);
                } else {
                    entry.accessor(false);
                }
            }
        };

        self.onlogon = function() {
            blackBookService.ready(function(service) {
                self.updateView();
            });
        };

        self.onlogout = function() {
            blackBookService.clear();
        };

        self.init = function() {
            if (self.anyAddButtons()) {
                msg.subscribe("lo.login", self.onlogon);
            }
            msg.subscribe("lo.logout", self.onlogout);
        };
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
        Constants
    ************************************/

    var numeral,
        VERSION = '1.5.3',
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;
            
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);
        
        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
        Top Level Functions
    ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };
    
    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }
        
        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }
        
        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            'use strict';
            
            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }
            
            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }

    
    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
        return mp > mn ? mp : mn;
        }, -Infinity);
    }        


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this, 
                  inputString ? inputString : defaultFormat, 
                  (roundingFunction !== undefined) ? roundingFunction : Math.round
              );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
                return inputString; 
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);            
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return numeral;
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
}).call(this);


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(279));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*** IMPORTS FROM imports-loader ***/


/*
 * Swipe 2.0
 *
 * Brad Birdsall
 * Copyright 2013, MIT License
 *
*/

function Swipe(container, options) {

  "use strict";

  // utilities
  var noop = function() {}; // simple no operation function
  var offloadFn = function(fn) { setTimeout(fn || noop, 0) }; // offload a functions execution

  // check browser capabilities
  var browser = {
    addEventListener: !!window.addEventListener,
    touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
    transitions: (function(temp) {
      var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
      for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
      return false;
    })(document.createElement('swipe'))
  };

  // quit if no root element
  if (!container) return;
  var element = container.children[0];
  var slides, slidePos, width, length;
  options = options || {};
  var index = parseInt(options.startSlide, 10) || 0;
  var speed = options.speed || 300;
  options.continuous = options.continuous !== undefined ? options.continuous : true;

  function setup() {
    
    // cache slides
    slides = element.children;
    length = slides.length;

    // set continuous to false if only one slide
    if (slides.length < 2) options.continuous = false;
     
    //special case if two slides
    if (browser.transitions && options.continuous && slides.length < 3) {
        element.appendChild(slides[0].cloneNode(true));
        element.appendChild(element.children[1].cloneNode(true));
        slides = element.children;
    }

    // create an array to store current positions of each slide
    slidePos = new Array(slides.length);

    // determine width of each slide
    width = container.getBoundingClientRect().width || container.offsetWidth;

    element.style.width = (slides.length * width) + 'px';

    // stack elements
    var pos = slides.length;
    while(pos--) {

      var slide = slides[pos];

      slide.style.width = width + 'px';
      slide.setAttribute('data-index', pos);

      if (browser.transitions) {
        slide.style.left = (pos * -width) + 'px';
        move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
      }

    }

    // reposition elements before and after index
    if (options.continuous && browser.transitions) {
      move(circle(index-1), -width, 0);
      move(circle(index+1), width, 0);
    }

    if (!browser.transitions) element.style.left = (index * -width) + 'px';

    container.style.visibility = 'visible';

  }

  function prev() {

    if (options.continuous) slide(index-1);
    else if (index) slide(index-1);

  }

  function next() {

    if (options.continuous) slide(index+1);
    else if (index < slides.length - 1) slide(index+1);

  }

  function circle(index) {

    // a simple positive modulo using slides.length
    return (slides.length + (index % slides.length)) % slides.length;

  }

  function slide(to, slideSpeed) {

    // do nothing if already on requested slide
    if (index == to) return;

    if (browser.transitions) {

      var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

      // get the actual position of the slide
      if (options.continuous) {
        var natural_direction = direction;
        direction = -slidePos[circle(to)] / width;

        // if going forward but to < index, use to = slides.length + to
        // if going backward but to > index, use to = -slides.length + to
        if (direction !== natural_direction) to =  -direction * slides.length + to;

      }

      var diff = Math.abs(index-to) - 1;

      // move all the slides between index and to in the right direction
      while (diff--) move( circle((to > index ? to : index) - diff - 1), width * direction, 0);

      to = circle(to);

      move(index, width * direction, slideSpeed || speed);
      move(to, 0, slideSpeed || speed);

      if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place

    } else {

      to = circle(to);
      animate(index * -width, to * -width, slideSpeed || speed);
      //no fallback for a circular continuous if the browser does not accept transitions
    }

    index = to;
    offloadFn(options.callback && options.callback(index, slides[index]));
  }

  function move(index, dist, speed) {

    translate(index, dist, speed);
    slidePos[index] = dist;

  }

  function translate(index, dist, speed) {

    var slide = slides[index];
    var style = slide && slide.style;

    if (!style) return;

    style.webkitTransitionDuration =
    style.MozTransitionDuration =
    style.msTransitionDuration =
    style.OTransitionDuration =
    style.transitionDuration = speed + 'ms';

    style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
    style.msTransform =
    style.MozTransform =
    style.OTransform = 'translateX(' + dist + 'px)';

  }

  function animate(from, to, speed) {

    // if not an animation, just reposition
    if (!speed) {

      element.style.left = to + 'px';
      return;

    }

    var start = +new Date;

    var timer = setInterval(function() {

      var timeElap = +new Date - start;

      if (timeElap > speed) {

        element.style.left = to + 'px';

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

        clearInterval(timer);
        return;

      }

      element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';

    }, 4);

  }

  // setup auto slideshow
  var delay = options.auto || 0;
  var interval;

  function begin() {

    interval = setTimeout(next, delay);

  }

  function stop() {

    delay = 0;
    clearTimeout(interval);

  }


  // setup initial vars
  var start = {};
  var delta = {};
  var isScrolling;

  // setup event capturing
  var events = {

    handleEvent: function(event) {

      switch (event.type) {
        case 'touchstart': this.start(event); break;
        case 'touchmove': this.move(event); break;
        case 'touchend': offloadFn(this.end(event)); break;
        case 'webkitTransitionEnd':
        case 'msTransitionEnd':
        case 'oTransitionEnd':
        case 'otransitionend':
        case 'transitionend': offloadFn(this.transitionEnd(event)); break;
        case 'resize': offloadFn(setup); break;
      }

      if (options.stopPropagation) event.stopPropagation();

    },
    start: function(event) {

      var touches = event.touches[0];

      // measure start values
      start = {

        // get initial touch coords
        x: touches.pageX,
        y: touches.pageY,

        // store time to determine touch duration
        time: +new Date

      };

      // used for testing first move event
      isScrolling = undefined;

      // reset delta and end measurements
      delta = {};

      // attach touchmove and touchend listeners
      element.addEventListener('touchmove', this, false);
      element.addEventListener('touchend', this, false);

    },
    move: function(event) {

      // ensure swiping with one touch and not pinching
      if ( event.touches.length > 1 || event.scale && event.scale !== 1) return

      if (options.disableScroll) event.preventDefault();

      var touches = event.touches[0];

      // measure change in x and y
      delta = {
        x: touches.pageX - start.x,
        y: touches.pageY - start.y
      }

      // determine if scrolling test has run - one time test
      if ( typeof isScrolling == 'undefined') {
        isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
      }

      // if user is not trying to scroll vertically
      if (!isScrolling) {

        // prevent native scrolling
        event.preventDefault();

        // stop slideshow
        stop();

        // increase resistance if first or last slide
        if (options.continuous) { // we don't add resistance at the end

          translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);

        } else {

          delta.x =
            delta.x /
              ( (!index && delta.x > 0               // if first slide and sliding left
                || index == slides.length - 1        // or if last slide and sliding right
                && delta.x < 0                       // and if sliding at all
              ) ?
              ( Math.abs(delta.x) / width + 1 )      // determine resistance level
              : 1 );                                 // no resistance if false

          // translate 1:1
          translate(index-1, delta.x + slidePos[index-1], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(index+1, delta.x + slidePos[index+1], 0);
        }

      }

    },
    end: function(event) {

      // measure duration
      var duration = +new Date - start.time;

      // determine if slide attempt triggers next/prev slide
      var isValidSlide =
            Number(duration) < 250               // if slide duration is less than 250ms
            && Math.abs(delta.x) > 20            // and if slide amt is greater than 20px
            || Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

      // determine if slide attempt is past start and end
      var isPastBounds =
            !index && delta.x > 0                            // if first slide and slide amt is greater than 0
            || index == slides.length - 1 && delta.x < 0;    // or if last slide and slide amt is less than 0

      if (options.continuous) isPastBounds = false;

      // determine direction of swipe (true:right, false:left)
      var direction = delta.x < 0;

      // if not scrolling vertically
      if (!isScrolling) {

        if (isValidSlide && !isPastBounds) {

          if (direction) {

            if (options.continuous) { // we need to get the next in this direction in place

              move(circle(index-1), -width, 0);
              move(circle(index+2), width, 0);

            } else {
              move(index-1, -width, 0);
            }

            move(index, slidePos[index]-width, speed);
            move(circle(index+1), slidePos[circle(index+1)]-width, speed);
            index = circle(index+1);

          } else {
            if (options.continuous) { // we need to get the next in this direction in place

              move(circle(index+1), width, 0);
              move(circle(index-2), -width, 0);

            } else {
              move(index+1, width, 0);
            }

            move(index, slidePos[index]+width, speed);
            move(circle(index-1), slidePos[circle(index-1)]+width, speed);
            index = circle(index-1);

          }

          options.callback && options.callback(index, slides[index]);

        } else {

          if (options.continuous) {

            move(circle(index-1), -width, speed);
            move(index, 0, speed);
            move(circle(index+1), width, speed);

          } else {

            move(index-1, -width, speed);
            move(index, 0, speed);
            move(index+1, width, speed);
          }

        }

      }

      // kill touchmove and touchend event listeners until touchstart called again
      element.removeEventListener('touchmove', events, false)
      element.removeEventListener('touchend', events, false)

    },
    transitionEnd: function(event) {

      if (parseInt(event.target.getAttribute('data-index'), 10) == index) {

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

      }

    }

  }

  // trigger setup
  setup();

  // start auto slideshow if applicable
  if (delay) begin();


  // add event listeners
  if (browser.addEventListener) {

    // set touchstart event on element
    if (browser.touch) element.addEventListener('touchstart', events, false);

    if (browser.transitions) {
      element.addEventListener('webkitTransitionEnd', events, false);
      element.addEventListener('msTransitionEnd', events, false);
      element.addEventListener('oTransitionEnd', events, false);
      element.addEventListener('otransitionend', events, false);
      element.addEventListener('transitionend', events, false);
    }

    // set resize event on window
    window.addEventListener('resize', events, false);

  } else {

    window.onresize = function () { setup() }; // to play nice with old IE

  }

  // expose the Swipe API
  return {
    setup: function() {

      setup();

    },
    slide: function(to, speed) {

      // cancel slideshow
      stop();

      slide(to, speed);

    },
    prev: function() {

      // cancel slideshow
      stop();

      prev();

    },
    next: function() {

      // cancel slideshow
      stop();

      next();

    },
    stop: function() {

      // cancel slideshow
      stop();

    },
    getPos: function() {

      // return current index position
      return index;

    },
    getNumSlides: function() {

      // return total number of slides
      return length;
    },
    kill: function() {

      // cancel slideshow
      stop();

      // reset element
      element.style.width = '';
      element.style.left = '';

      // reset slides
      var pos = slides.length;
      while(pos--) {

        var slide = slides[pos];
        slide.style.width = '';
        slide.style.left = '';

        if (browser.transitions) translate(pos, 0, 0);

      }

      // removed event listeners
      if (browser.addEventListener) {

        // remove current event listeners
        element.removeEventListener('touchstart', events, false);
        element.removeEventListener('webkitTransitionEnd', events, false);
        element.removeEventListener('msTransitionEnd', events, false);
        element.removeEventListener('oTransitionEnd', events, false);
        element.removeEventListener('otransitionend', events, false);
        element.removeEventListener('transitionend', events, false);
        window.removeEventListener('resize', events, false);

      }
      else {

        window.onresize = null;

      }

    }
  }

}


if ( window.jQuery || window.Zepto || $ ) {
  (function($) {
    $.fn.Swipe = function(params) {
      return this.each(function() {
        $(this).data('Swipe', new Swipe($(this)[0], params));
      });
    }
  })( window.jQuery || window.Zepto || $ )
}


/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * AMD module with legacy logging-related services that attach themselves to the window namespace.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery) {
    window.AjaxLoggingService = function(window, enabledEvents) {

        var _debugEnabled = enabledEvents.indexOf('Debug') != -1;
        var _infoEnabled = enabledEvents.indexOf('Info') != -1;
        var _exceptionEnabled = enabledEvents.indexOf('Exception') != -1;


        var _getTrackingId = function() {
            // reuse the betslip tracking id
            try {
                var store = new BetWalletStore();
                return store.get_visitor_tracking_id();
            } catch (e) {
                return null;
            }
        };

        var _logEvent = function(eventType, message, details) {
            var metaData = { WindowHref: window.location.href, TrackingId: _getTrackingId() };
            var requestData = { EventType: eventType, Message: message, Details: details, MetaData: metaData };
            if (eventType === 'Debug') {
                console.log(message);
            }
            jQuery.ajax({
                type: 'POST',
                url: 'api/javascriptlogging/logevent',
                data: requestData,
                mimeType: 'text/html'
            });
        };

        var logException = function(message, details) {
            if (_exceptionEnabled) {
                _logEvent('Exception', message, details);
            }
        };

        var logInfo = function(message, details) {
            if (_infoEnabled) {
                _logEvent('Info', message, details);
            }
        };

        var logDebug = function(message, details) {
            if (_debugEnabled) {
                _logEvent('Debug', message, details);
            }
        };

        return {
            logException: logException,
            logInfo: logInfo,
            logDebug: logDebug
        };

    };

    window.NullLoggingService = function(jQuery) {

        var logException = function(message, details) {
        };

        var logInfo = function(message, details) {
        };

        var logDebug = function(message, details) {
        };

        return {
            logException: logException,
            logInfo: logInfo,
            logDebug: logDebug
        };

    };

    window.LoggingService = function() {
        var config = window._LOGGING_SERVICE_CONFIG_;

        var loggingService = new NullLoggingService();

        if (config.FeatureEnabled) {
            loggingService = new AjaxLoggingService(window, config.EnabledLoggingEvents);
            (function() {
                var errorHandler = new ErrorHandler(window, loggingService);
                errorHandler.registerForWindowOnError();
            })();
        }

        return loggingService;
    }

    window.ErrorHandler = function(window, loggingService) {

        var oldOnError = null;

        var jsErrorHandler = function(errorMsg, url, lineNumber, colNumber, errorObj) {
            try {
                var details = { url: url, lineNumber: lineNumber, colNumber: colNumber, errorObj: errorObj };
                loggingService.logException(errorMsg, JSON.stringify(details));
            } catch (e) {
                // don't propagate exceptions fired from logging code
            }

            if (oldOnError) {
                return oldOnError(errorMsg, url, lineNumber, colNumber, errorObj);
            }

            return false;
        };

        var registerForWindowOnError = function() {
            oldOnError = window.onerror;
            window.onerror = jsErrorHandler;
        };

        return {
            registerForWindowOnError: registerForWindowOnError
        };
    };

    return new window.LoggingService;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["__extends"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (immutable) */ __webpack_exports__["__rest"] = __rest;
/* harmony export (immutable) */ __webpack_exports__["__decorate"] = __decorate;
/* harmony export (immutable) */ __webpack_exports__["__param"] = __param;
/* harmony export (immutable) */ __webpack_exports__["__metadata"] = __metadata;
/* harmony export (immutable) */ __webpack_exports__["__awaiter"] = __awaiter;
/* harmony export (immutable) */ __webpack_exports__["__generator"] = __generator;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
};

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/***/ }),
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.1.3
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		registeredInModuleLoader = true;
	}
	if (true) {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				return (document.cookie = [
					key, '=', value,
					attributes.expires ? '; expires=' + attributes.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
					attributes.path ? '; path=' + attributes.path : '',
					attributes.domain ? '; domain=' + attributes.domain : '',
					attributes.secure ? '; secure' : ''
				].join(''));
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (amplify) {
    var AnalyticsDataLayer = function () {

        this.history = new Array();

        this.data = {
            version: 1.19,
            content: { url: '' },
            user: { accountNumber: '', accountOperationType: '' },
            preferences: { cashBetting: '', debug: false },
            signUp: { applicationId: '', optIn: '', ageConfirmType: '', accountId: '', lastValidationError: null },
            bet: {
                id: '',
                productType: '',  /* single | multi | accumulator */
                construction: '', /* single | betslip */
                placementMethod: '', /* account | cash */
                isFirstBet: '',
                racing: { tote: { cost: 0, numberOfTickets: 0 }, fixed: { cost: 0, numberOfTickets: 0 } },
                sports: { tote: { cost: 0, numberOfTickets: 0 }, fixed: { cost: 0, numberOfTickets: 0 } },
                mixed: { fixed: { cost: 0, numberOfTickets: 0 } },
                specialOffers: []
            },
            deposit: { amount: 0 },
            specialOfferSelection: null
        };

        this.keys = {
            nav: 'nav-content-url',
            menu: 'nav-menu',
            login: 'login',
            logout: 'logout',
            cashPreferenceBaseKey: 'nav-cash-',
            //TODO: Remove
            cashOn: 'nav-cash-on',
            cashOff: 'nav-cash-off',
            //
            exitToBaseKey: 'nav-exit-',
            //TODO: Remove these keys once dev is complete
            exitToFacebook: 'nav-exit-facebook',
            exitToTwitter: 'nav-exit-twitter',
            exitToAndroid: 'nav-exit-android',
            exitToIos: 'nav-exit-ios',
            exitToWebsite: 'nav-exit-website',
            exitToAflHub: 'nav-exit-afl-hub',
            exitToAndroidInstructions: 'nav-android-installation-instructions',
            //End Todo
            signupBaseKey: 'signup-',
            signupBegin: 'signupinminutes',
            signupSliderActivated: 'slidetogetstarted',
            signupNameComplete: 'step1next',
            signupEmailComplete: 'step2next',
            signupAddressComplete: 'step3next',
            signupAgeValidationMethodConfirmed: 'step4next',
            signupPassportComplete: 'step5next',
            signupDriversLicenceComplete: 'step5next',
            signupPasswordComplete: 'step6next',
            signupComplete: 'step7next',
            signupValidationError: 'validation-error',

            betSelected: 'bet-selected',
            betAccountSelected: 'bet-account',
            betAccountReview: 'bet-account-review',
            betAccountProcessed: 'bet-account-processed',

            cashBetSelected: 'bet-cash',
            cashBetProcessed: 'bet-cash-processed',
            cashBetUndo: 'bet-cash-undo',
            cashBetRemoved: 'bet-cash-delete',
            cashCleared: 'bet-cash-delete-all',

            betslipBetAdded: 'bet-add',
            betslipBetRemoved: 'betslip-remove',
            betslipCleared: 'betslip-clear',
            betslipAccountSelected: 'bet-account',
            betslipAccountReview: 'bet-account-review',
            betslipAccountProcessed: 'bet-account-processed',
            betslipCashSelected: 'bet-cash',

            mysterySelected: 'bet-selected',
            mysteryAccountSelected: 'bet-account',
            mysteryReview: 'bet-account-review',
            mysteryReceipt: 'bet-account-processed',

            favNumbersSelected: 'bet-selected',
            favNumbersAccountSelected: 'bet-account',
            favNumbersAccountReview: 'bet-account-review',
            favNumbersAccountProcessed: 'bet-account-processed',

            tippingSelected: 'bet-selected',
            tippingAccountSelected: 'bet-account',
            tippingAccountReview: 'bet-account-review',
            tippingAccountProcessed: 'bet-account-processed',

            multiBetAdded: 'bet-add',
            multiBetRemoved: 'bet-remove',
            multiCleared: 'bet-clear',
            multiAccountSelected: 'bet-account',
            multiAccountReview: 'bet-account-review',
            multiAccountProcessed: 'bet-account-processed',

            accumulatorSelected: 'bet-selected',
            accumulatorAccountSelected: 'bet-account',
            accumulatorAccountReview: 'bet-account-review',
            accumulatorAccountProcessed: 'bet-account-processed',

            accountProcessed: 'account-interaction',

            depositBaseKey: 'deposit-',
            checkInBaseKey: 'lbs-checkin-',
            activityBaseKey: 'activity-'
        };

        this.getHistory = function () {
            if (this.data.preferences.debug) {
                return 'history : ' + this.history.length + ' items';
            } else {
                return 'history : debugging is off. Activate debugging to capture and display history';
            }
        };

        this.addToHistory = function (event, data) {
            if (this.data.preferences.debug) {
                var date = new Date();
                this.history.push({ timestamp: date, event: event, data: data });
            }
        };

        this.resetBetData = function () {
            this.data.bet.id = '';

            this.data.bet.racing.tote.numberOfTickets = 0;
            this.data.bet.racing.tote.cost = 0;
            this.data.bet.racing.fixed.numberOfTickets = 0;
            this.data.bet.racing.fixed.cost = 0;

            this.data.bet.sports.tote.numberOfTickets = 0;
            this.data.bet.sports.tote.cost = 0;
            this.data.bet.sports.fixed.numberOfTickets = 0;
            this.data.bet.sports.fixed.cost = 0;

            this.data.bet.mixed.fixed.numberOfTickets = 0;
            this.data.bet.mixed.fixed.cost = 0;

            this.data.bet.specialOffers = [];
        };

        this.saveTrackData = function () {
            amplify.store('AnalyticsDataLayer', this.data);
        };

        this.loadTrackData = function () {
            var localStorage = amplify.store('AnalyticsDataLayer');
            if (localStorage) {
                if (localStorage.version >= this.data.version) {
                    this.data = localStorage;
                }
            }
        };

        this.activateDebug = function () {
            this.data.preferences.debug = true;
            this.saveTrackData();
        };

        this.deactivateDebug = function () {
            this.data.preferences.debug = false;
            this.saveTrackData();
        };

        return {
            history: this.history,
            data: this.data,
            keys: this.keys,
            activateDebug: this.activateDebug,
            deactivateDebug: this.deactivateDebug,
            addToHistory: this.addToHistory,
            getHistory: this.getHistory,
            saveTrackData: this.saveTrackData,
            loadTrackData: this.loadTrackData,
            resetBetData: this.resetBetData
        };
    };

    return new AnalyticsDataLayer();
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(44)], __WEBPACK_AMD_DEFINE_RESULT__ = function (apiService) {
    var cachedPromise = null;
    var timeoutHandler = null;

    function getFeatures() {
        return cachedPromise || (cachedPromise = fetchFeatures());
    }

    function fetchFeatures() {
        return apiService.fetchJsonFromApi('/api/Feature/index')
            .then(function(activeFeatures) {
                resetCacheTimer();
                return activeFeatures;
            }, function(err) {
                clearCache();
                throw "API fetch call failed: " + err.message;
            });
    }

    function clearCache() {
        cachedPromise = null;
    }

    function clearRefreshTimeout() {
        clearTimeout(timeoutHandler);
    }

    function isActive(featureName) {
        return getFeatures()
            .then(function(result) {
                return result.indexOf(featureName) >= 0;
            });
    }

    function stopRefresh() {
        clearRefreshTimeout();
    }

    function resetCacheTimer() {
        var fiveMinutes = 5 * 60 * 1000;
        clearTimeout(timeoutHandler);
        timeoutHandler = setTimeout(clearCache, fiveMinutes);
    }

    return {
        isActive: isActive,
        clear: clearCache,
        stopRefresh: stopRefresh
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(3), __webpack_require__(5), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, ko, nav, common, msgBusService) {
    var closeAction, successAction;

    //Init
    (function() {
        assignEvents();
    })();

    function assignEvents() {
        common.bindLiveEvent('click', '[data-logon-close-popup]', function() {
            closeLoginPopup();
            return false;
        });

        common.bindLiveEvent('click', '[data-logon-logout]', function(e) {
            logout();
            e.preventDefault();
            return false;
        });
    }

    function toggleBackground(state) {
        return jQuery("#content-container, #header-container").toggle(state);
    };

    //creates an object that defines what to do after a logon attempt
    //NOTE: runFunction not currently used, can be added later to automatically run functions on successful logon
    //e.g., automatically proceed to the next TOTE bet state
    function logonAction(redirectUrl, runFunction) {
        this.redirectUrl = redirectUrl;
        this.runFunction = runFunction;
        this.go = go;

        function go(isLogin, accountNumber) {

            if (isLogin === true) {
                msgBusService.publish('lo.login', accountNumber);
            } else {
                msgBusService.publish('lo.fail');
            }

            if (this.redirectUrl !== null) {
                nav.navChange(this.redirectUrl);
            } else {
                // FREEBE-20: Cannot see the OFFERS text in the My Account icon during initial login.
                // Doing refresh after initial login
                if (isLogin === true && nav.isHome()) {
                    nav.refresh();
                }

                if (this.runFunction !== null) {
                    this.runFunction();
                }
            }
        }
    }

    function setSuccessAction(successUrl) {
        successAction = new logonAction(successUrl, null);
    }

    function setCloseAction(closeUrl) {
        closeAction = new logonAction(closeUrl, null);
    }

    //resets the logon urls so no action is taken on success or close
    function resetActions() {
        successAction = new logonAction(null, null);
        closeAction = new logonAction(null, null);
    }

    //function to retrieve the current logon state and update the forgery token & logon button
    //if forceLogon is true it will force the user to logon.
    function ajaxLogonState(forceLogon, accountNumber) {

        return jQuery.ajax({ url: '/logon/isAuthenticated' })
                .then(function(data, status, xhr) {
                    if (status === "timeout" || xhr.status === 0) {
                        return jQuery.Deferred().reject(xhr, status, data);
                    }
                    return data;
                })
                .done(function(data) {
                    jQuery('#anti-forgery').html(data);
                    var loggedOn = (jQuery('#LoggedOn').val() === 'True');
                    setLogonState(loggedOn);

                    //check for data existence is because some browsers return success on some errors.
                    if (forceLogon && data) {
                        if (loggedOn) {
                            hideLoginPopup();
                            successAction.go(true, accountNumber);
                            msgBusService.publish("loggedin");
                        } else {
                            loadLoginPopup();
                        }
                    }
                })
                .fail(function(xhr, status, err) {
                    hideLoginPopup();
                    nav.ajaxError(status === "timeout" ? 0 : xhr.status);
                });
    }

    function setLogonState(loggedOn) {
        jQuery('.log-in-header').toggle(!loggedOn);
        jQuery('.log-out-header').toggle(loggedOn);
    }

    // active click on the login button as opposed to showLoginPopup due to 403 error
    function login() {
        resetActions();
        loadLoginPopup();
    }

    // A 403 error was received during the last request.
    function handle403(requestedUrl, isGet) {
        //If we get a 403 during a get, force a reload after we log on or redirect to home if we close the dialog.
        if (isGet) {
            setSuccessAction('#' + requestedUrl);
            setCloseAction('/#');
        }
        loadLoginPopup();
    }

    // Shows the login dialog. 
    // A forced change password will replace the contents of the login window, so we reload the login form if it's not there.
    function loadLoginPopup() {
        // Set timeout is a work around for nav hiding loading even if it's callback shows it
        // N.B showLoginPopup is called as a callback from nav.ajax403Handler
        setTimeout(function() {
            // setup catch so we don't show LoginPopup until new auth VM created by ajaxGet is ready  
            msgBusService.subscribe('AUTH.onCreate', catchLoginCreateComplete);
            nav.ajaxGet('/logon/default', function(data) {
                toggleBackground(false);
                jQuery('#login-window').html(data);
                common.showPopup(jQuery('#login-window'));
            });
        }, 1);

        setTimeout(applyIOSSlowKeyboardFix, 100);
    }

    function catchLoginCreateComplete(data) {
        msgBusService.unsubscribe('AUTH.onCreate', catchLoginCreateComplete);
        showLoginPopup();
    }

    function showLoginPopup() {
        var viewModel = jQuery("#login-window").data('viewModel');
        if (viewModel) {
            viewModel.willShow();
        }

        setLogonState(false);
    }

    function applyIOSSlowKeyboardFix() {
        jQuery('#AccountNumber').focus();
        jQuery('#AccountNumber').blur();
        jQuery('#Password').focus();
        jQuery('#Password').blur();
    }

    //Sets the logon popup back to its original state.
    function resetLoginPopup() {
        jQuery('#login-form h5').remove();
        jQuery('#login-form .validation-summary-errors').remove();
        jQuery('#login-form input#Password').val('');
        if (!jQuery('#login-form input#RememberAccount').is(':checked')) {
            jQuery('#login-form input#AccountNumber').val('');
        }
        common.setDisableState(jQuery('#login-button'), true);
    }

    function submitLogon() {
        jQuery('form#login-form #LogonVersion').val(jQuery('#Version').val());
        nav.ajaxPost(
            jQuery('form#login-form').attr('action'),
            jQuery('form#login-form').serialize(),
            processLoginResponse,
            {
                error: hideLoginPopup,
                control: jQuery('#login-button')
            }
        );
    }

    // Handles the response to a logon.
    // A successful logon will return a new anti-forgery token
    // An unsuccessful logon will return an updated form.
    function processLoginResponse(data) {
        var accountNumber = jQuery('input#AccountNumber').val();

        ///XML Doc check necessary for Firefox, since it interprets empty strings as XML.
        if (data !== undefined && data !== '' && !jQuery.isXMLDoc(data)) {
            jQuery('#login-window').html(data);
            jQuery('#login-window .overlay').css({ opacity: 0.6 });
            jQuery('#login-window .window').css({ opacity: 1.0 });
            //select the account number 
            if (jQuery('form#login-form').length) {
                jQuery('input#AccountNumber').select();
            }
        } else {
            ajaxLogonState(true, accountNumber);
        }
    }

    function closeLoginPopup() {
        closeAction.go();
        hideLoginPopup();
    }

    function hideLoginPopup() {
        toggleBackground(true);

        var loginWindow = jQuery("#login-window");

        loginWindow.fadeOut('fast');

        setTimeout(function () {
            var container = document.getElementById("login-window-inner");
            if (container) {
                ko.removeNode(container);
            }
        }, 500);
    }

    function logout() {
        nav.ajaxPost(jQuery('.log-out-header').attr('href'),
                    null,
                    logoutSuccess);
    }

    function logoutSuccess(data) {
        jQuery('tt-authenticate, form#login-form').remove();
        msgBusService.publish('lo.logout');
        ajaxLogonState();
        nav.navChange('/#');
    }

    function initialiseEmptyPageLogin() {
        jQuery('body#home').removeAttr('id');
        jQuery('body').removeAttr('class');

        setSuccessAction(document.URL);
        closeAction = new logonAction(null, null);

        jQuery('#login-button').click(function(e) {
            e.preventDefault();
            loadLoginPopup();
        });

        jQuery('.log-in-header')
            .removeAttr('onclick')
            .click(function(e) {
                e.preventDefault();
                loadLoginPopup();
            });

        jQuery('#login-window').addClass('hideSignUp');

        jQuery('h1 a').removeAttr('onclick').removeAttr('href');

        loadLoginPopup();
    }

    return {
        resetActions: resetActions,
        ajaxLogonState: ajaxLogonState,
        hideLoginPopup: hideLoginPopup,
        login: login,
        closeLoginPopup: closeLoginPopup,
        submitLogon: submitLogon,
        handle403: handle403,
        logout: logout,
        showLoginPopup: loadLoginPopup,
        initialiseEmptyPageLogin: initialiseEmptyPageLogin
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 32 */,
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(5), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, nav, common, msgBusService) {
    var states = { none: "", calc: "calc", confirm: "confirm", receipt: "receipt" };

    return {
        states: states,
        navigateErrorToHref: navigateErrorToHref,
        changeTippingState: changeTippingState,
        initInfoScroll: initInfoScroll,
        navigateToHref: navigateToHref,
        initHomeButton: initHomeButton
    };

    function navigateErrorToHref(elem) {        
        var action = elem.attr('href');
        return nav.navBetError(action);
    }

    function navigateToHref(elem) {        
        var action = elem.attr('href');
        return nav.nav(action);
    }

    function initInfoScroll() {
        jQuery('div.black-bubble a.information').click(function (e) {
            e.preventDefault();
            common.scrollTo(jQuery(jQuery(this).attr('href')), 'slow');
        });
    }

    function initHomeButton() {
        jQuery('.home-button').click(function () {
            var action = jQuery('.home-button').attr('href');
            return nav.nav(action);
        });
    }

    function changeTippingState(newState, data) {

        switch (newState) {
            case states.calc:
                jQuery('#selection-entry').hide();
                jQuery('.refresh-button').hide();
                jQuery('.hidden-calculator').show();
                jQuery('#bet-confirm').hide().html('');

                nav.overrideBack(function () {
                    changeTippingState(states.none);
                    return false;
                });
                msgBusService.publish('bet.tipping.selected');
                break;

            case states.confirm:
                jQuery('.hidden-calculator').hide();
                jQuery('#bet-confirm').html(data).show();
                common.initDisplayListStyle(jQuery('#bet-confirm ul.display-list'));

                nav.overrideBack(function () {
                    changeTippingState(states.calc);
                    return false;
                });
                msgBusService.publish('bet.tipping.review');
                break;

            case states.receipt:
                jQuery('#bet-confirm').html(data).show();
                common.initDisplayListStyle(jQuery('#bet-confirm ul.display-list'));
                nav.hideBack();

                var singleTicket = jQuery('#bet-confirm span.title:contains("Ticket")').parent().find('span.data').html();
                var tickets = [];
                if (singleTicket) {
                    tickets = [{ ticketNumber: singleTicket }];
                } 
                var totalCost = jQuery('#bet-confirm span.title:contains("Total Cost")').parent().find('span.data').html();
                msgBusService.publish('bet.tipping.receipt', { tickets: tickets, totalCost: totalCost });
                
                break;

            case states.none:
                jQuery('#selection-entry').show();
                jQuery('.refresh-button').show();
                jQuery('.hidden-calculator').hide();
                jQuery('#bet-confirm').hide().html('');
                jQuery('#SelectionsString').val('');
                nav.resetBack("Tipping");
                break;
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */
/***/ (function(module, exports) {

module.exports = requirejs;

/***/ }),
/* 38 */,
/* 39 */,
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(5), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, nav, common, msgBus) {
    var states = { none: "", calc: "calc", confirm: "confirm", receipt: "receipt" };

    return {
        states: states,
        navigateErrorToHref: navigateErrorToHref,
        changeTippingState: changeTippingState,
        initInfoScroll: initInfoScroll,
        navigateToHref: navigateToHref,
        initHomeButton: initHomeButton
    };

    function navigateErrorToHref(elem) {        
        var action = elem.attr('href');
        return nav.navBetError(action);
    }

    function navigateToHref(elem) {        
        var action = elem.attr('href');
        return nav.nav(action);
    }

    function initInfoScroll() {
        jQuery('div.black-bubble a.information').click(function (e) {
            e.preventDefault();
            common.scrollTo(jQuery(jQuery(this).attr('href')), 'slow');
        });
    }

    function initHomeButton() {
        jQuery('.home-button').click(function () {
            var action = jQuery('.home-button').attr('href');
            return nav.nav(action);
        });
    }

    function changeTippingState(newState, data) {

        switch (newState) {
            case states.calc:
                jQuery('#selection-entry').hide();
                jQuery('.refresh-button').hide();
                jQuery('.hidden-calculator').show();
                jQuery('#bet-confirm').hide().html('');

                nav.overrideBack(function () {
                    changeTippingState(states.none);
                    return false;
                });
                msgBus.publish('bet.tipping.selected');
                break;

            case states.confirm:
                jQuery('.hidden-calculator').hide();
                jQuery('#bet-confirm').html(data).show();
                common.initDisplayListStyle(jQuery('#bet-confirm ul.display-list'));

                nav.overrideBack(function () {
                    changeTippingState(states.calc);
                    return false;
                });
                msgBus.publish('bet.tipping.review');
                break;

            case states.receipt:
                jQuery('#bet-confirm').html(data).show();
                common.initDisplayListStyle(jQuery('#bet-confirm ul.display-list'));
                nav.hideBack();

                var singleTicket = jQuery('#bet-confirm span.title:contains("Ticket")').parent().find('span.data').html();
                var tickets = [];
                if (singleTicket) {
                    tickets = [{ ticketNumber: singleTicket }];
                } 
                var totalCost = jQuery('#bet-confirm span.title:contains("Total Cost")').parent().find('span.data').html();
                msgBus.publish('bet.tipping.receipt', { tickets: tickets, totalCost: totalCost });
                
                break;

            case states.none:
                jQuery('#selection-entry').show();
                jQuery('.refresh-button').show();
                jQuery('.hidden-calculator').hide();
                jQuery('#bet-confirm').hide().html('');
                jQuery('#Selections').val('');
                nav.resetBack("Tipping");
                break;
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(106), __webpack_require__(59), __webpack_require__(114), __webpack_require__(4), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dateProvider, locationService, checkinStore, msgBusService, _) {
    return {
        redeem: redeem,
        wasRedeemedToday: wasRedeemedToday,
        checkin: checkin,
        isCheckedInToday: isCheckedInToday,
        checkedInLocationId: checkedInLocationId,
        checkout: checkout
    };

    function currentLocation() {
        var location = locationService.getLocationDetails('GPSREGION');
        if (location !== undefined && location !== null) {
            return location.LocationId;
        }
        return null;
    }

    function checkedInLocation() {
        var checkins = checkinStore.get();
        var current = _.filter(checkins, function (x) { return x.CheckedIn === dateProvider.today().getTime() });
        if (current && current.length > 0) {
            return current[0];
        } else {
            return null;
        }
    }

    function redeem() {
        var locationId = checkedInLocation().LocationId;
        if (locationId !== null) {
            checkinStore.set(locationId, { LocationId: locationId, Redeemed: dateProvider.today().getTime() });
            //Analytics
            msgBusService.publish('lbs.checkin', 'redeemed');
        }
    }

    function wasRedeemedToday() {
        var location = checkedInLocation();
        var redeemMilliseconds = (location !== undefined && location !== null)?location.Redeemed:0;
        return (dateProvider.today().getTime() === redeemMilliseconds);
    }

    function checkin() {
        var locationId = currentLocation();
        if (locationId !== null) {
            checkinStore.set(locationId, { LocationId: locationId, CheckedIn: dateProvider.today().getTime() });
            //Analytics
            msgBusService.publish('lbs.checkin', 'success');
        }
    }

    function isCheckedInToday() {
        return checkedInLocation() !== null;
    }

    function checkedInLocationId() {
        var location = checkedInLocation();
        if (location !== null) {
            return location.LocationId;
        } else {
            return '';
        }
    }

    function checkout() {
        var locationId = checkedInLocationId();
        if (locationId !== '') {
            checkinStore.set(locationId, { LocationId: locationId, CheckedIn: 0 });
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 42 */,
/* 43 */,
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    "use strict";

    function fetchFromApi(url) {
        console.log("ApiService.fetchFromApi", url);
        
        if ("fetch" in window) {
            return window.fetch(url).then(function(response) {
                if (!response.ok) {
                    throw new Error("Fetch failed. Error code: " + response.status);
                }

                return response;
            });
        } else {
            throw new Error("Fetch API is not supported");
        }
    }


    function fetchTextFromApi(url) {
        return fetchFromApi(url).then(function(response) {
            return response.text();
        });
    }


    function fetchViewFromApi(url) {
        return fetchFromApi(url);
    }


    function fetchJsonFromApi(url) {
        return fetchFromApi(url).then(function(response) {
            return response.json();
        });
    }


    function fetchXmlFromApi(url) {
        return fetchTextFromApi(url).then(function(bodyPromise) {
            bodyPromise.then(function(xmlStr) {
                if ("DOMParser" in window) {
                    return new window.DOMParser().parseFromString(xmlStr, "text/xml");
                } else {
                    throw new Error("No XML parser detected");
                }
            });
        });
    }


    function fetchXmlFromApiAsString(url) {
        return fetchXmlFromApi(url).then(function(xmlStr) {
            return xmlStr.firstChild.textContent;
        });
    }


    function fetchModuleFromApi(url) {
        return fetchTextFromApi(url).then(function(js) {
            return eval(js);
        });
    }


    function injectApiResponse(responseHtml) {
        var container = document.getElementById("main-container");

        if (container) {
            container.innerHTML = responseHtml;

            var nodes = container.querySelectorAll("script");

            [].forEach.call(nodes, function(node) {
                try {
                    eval(node.textContent);
                } catch (err) {
                    throw new Error("Script eval failed");
                }
            });
        } else {
            throw new Error("Main container does not exist");
        }
    }


    function publishToApi(url, data) {
        console.log("ApiService.publishToApi", url, data);
        
        if ("fetch" in window) {
            var myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            return window.fetch(url, {
                headers: myHeaders,
                body: data
            });
        } else {
            throw new Error("Fetch API is not supported");
        }
    }


    return {
        fetchFromApi: fetchFromApi,
        fetchTextFromApi: fetchTextFromApi,
        fetchViewFromApi: fetchViewFromApi,
        fetchXmlFromApi: fetchXmlFromApi,
        fetchXmlFromApiAsString: fetchXmlFromApiAsString,
        fetchJsonFromApi: fetchJsonFromApi,
        fetchModuleFromApi: fetchModuleFromApi,
        injectApiResponse: injectApiResponse,
        publishToApi: publishToApi
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return {
        truncate: truncate,
        combinations: combinations,
        toMoney: toMoney,
    }

    function toMoney(value, decimalNumbers, currencySymbol, decimalSymbol, thousandsSymbol) {
        var n = value,
            c = isNaN(decimalNumbers = Math.abs(decimalNumbers)) ? 2 : decimalNumbers,
            d = decimalSymbol == undefined ? "." : decimalSymbol,
            t = thousandsSymbol == undefined ? "," : thousandsSymbol,
            m = currencySymbol == undefined ? "$" : currencySymbol,
            s = n < 0 ? "-" : "",
            i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
            j = (j = i.length) > 3 ? j % 3 : 0;
        var str = s + m + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
        //console.log('toMoney => str(' + str + ')');
        return str;
        //return s + m + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
    }

    function realToFixed(number) {
        return Number(number.toString().replace(/\..*$/, ''));
    }

    function truncate(number) {
        return Number(realToFixed(number));
    }

    function combinations(set, k) {
        var i, j, combs, head, tailcombs;

        if (k > set.length || k <= 0) {
            return [];
        }

        if (k == set.length) {
            return [set];
        }

        if (k == 1) {
            combs = [];
            for (i = 0; i < set.length; i++) {
                combs.push([set[i]]);
            }
            return combs;
        }

        combs = [];
        for (i = 0; i < set.length - k + 1; i++) {
            head = set.slice(i, i + 1);
            tailcombs = combinations(set.slice(i + 1), k - 1);
            for (j = 0; j < tailcombs.length; j++) {
                combs.push(head.concat(tailcombs[j]));
            }
        }
        return combs;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, tabtouch) {
    function AccountViewModel(params) {
        this.backUrl = params.backUrl;
        this.backText = params.backText;
        tabtouch.initCommon(this.backUrl, this.backText);
    }

    function noRefresh() {
        jQuery('.page-heading .refresh-button').hide();
    }

    AccountViewModel.prototype = Object.create(Object.prototype, {
        noRefresh: {
            value: noRefresh
        }
    });
    Object.defineProperty(AccountViewModel, 'constructor', {
        enumerable: false,
        value: AccountViewModel
    });

    return AccountViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 47 */,
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(1),
    __webpack_require__(0),
    __webpack_require__(233),
    __webpack_require__(50),
    __webpack_require__(187),
    __webpack_require__(86),
    __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, jQuery, _, stateMachine, modalIntents, navigationIntents, messageBus) {
        var defaultState = {
            title: "No title",
            isOpen: false,
            close: close,
            component: null,
            showBackButton: false,
            back: back
        };

        function setState(currentState, state) {
            return Object.assign({}, currentState, state);
        }

        function modalDriver(state, intent) {
            state = state || defaultState;
            switch (intent.tag) {
                case modalIntents.open:
                {
                    var capturedTop = getScrollTop();
                    setScrollTop(0);
                    document.querySelector("#main-container").style.display = "none";

                    return setState(state,
                    {
                        capturedTop: capturedTop,
                        isOpen: true,
                        title: intent.data.title,
                        component: intent.data.component,
                    });
                }
                case modalIntents.close:
                {
                    document.querySelector("#main-container").style.display = "block";
                    setScrollTop(state.capturedTop);

                    messageBus.publish("modal.did_close");
                    return setState(state, { isOpen: false });
                }
            }
            return state;
        }

        var $modalState = stateMachine
            .attachDriver({ path: "modal", driver: modalDriver });

        var viewModel = {
            title: ko.observable().extend({ deferred: true }),
            isOpen: ko.observable().extend({ deferred: true }),
            close: close,
            showBackButton: ko.observable().extend({ deferred: true }),
            back: back,
            component: ko.observable().extend({ deferred: true }),
        };

        viewModel.displayComponent = ko.pureComputed(function() {
            return viewModel.isOpen() && viewModel.component();
        }).extend({ deferred: true });

        $modalState.distinctUntilChanged().combineLatest(navigationIntents.navigationState$, function(modal, nav) {
                return { modal: modal, nav: nav };
            } )
            .subscribe(function (state) {
                viewModel.title(state.modal.title);
                viewModel.isOpen(state.modal.isOpen);
                viewModel.showBackButton(state.nav.size);
                if (viewModel.component() !== (state.modal && state.modal.component)) {
                    viewModel.component(state.modal.component);
                }
            });

        function setScrollTop(top) {
            jQuery("html, body").animate({ scrollTop: top }, 0);
        }

        function getScrollTop() {
            // if the element is not scrolled, it will (should) return 0
            return Math.max(jQuery("body").scrollTop(), jQuery("html").scrollTop());
        }

        function close() {
            modalIntents.close();
        }

        function open(title, component) {
            modalIntents.open({ component: component, title: title });
        }

        function back() {
            navigationIntents.modalNavigateBack();
        }

        return {
            close: close,

            back: back,

            open: open,

            init: function () {
                ko.applyBindings({ viewModel: viewModel }, document.getElementById("modal-container-host"));
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 49 */,
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ************************************************
// --------------- Typings polyfils ---------------
// ************************************************

var Rx = __webpack_require__(54);
var Immutable = __webpack_require__(49);
// ***************************************************
// --------------- The main state loop ---------------
// ***************************************************
var SIGNAL_EMITTER$ = new Rx.Subject();
var LIVE_SIGNAL$ = SIGNAL_EMITTER$
    .mergeAll()
    .observeOn(Rx.Scheduler.currentThread);
var INITIAL_STATE = Immutable.Map({ '__drivers': Immutable.Map() });
var LIVE_STATE$ = LIVE_SIGNAL$.scan(RootDriver, INITIAL_STATE).observeOn(Rx.Scheduler.currentThread);
var ERROR$ = new Rx.Subject();
var connectedLiveState$ = connectAndReplay(LIVE_STATE$);
var connectedLiveSignal$ = connectAndReplay(LIVE_SIGNAL$);
var connectedError$ = connectAndReplay(ERROR$);
var SWITCHABLE_STATE$$ = new Rx.Subject();
var connectedSwitchedState$ = connectAndReplay(SWITCHABLE_STATE$$).switch();
SWITCHABLE_STATE$$.onNext(connectedLiveState$);
ERROR$.subscribe(function (errorEvent) {
    var error = errorEvent.error;
    console && console.error(error.stack || error);
});
// **********************************************
// --------------- Implementation ---------------
// **********************************************
var attachDriverSignal = createSignal('ATTACH DRIVER');
var resetStateSignal = createSignal('RESET STATE');
function getOrDefault(key, state, otherwise) {
    return state.get(key) || otherwise;
}
function splitPath(inputPath) {
    var fullPath = inputPath.split('.');
    var path = fullPath.slice(0, -1);
    var key = fullPath[fullPath.length - 1];
    return [path, key];
}
function getChildDriverList(state) {
    return getOrDefault('__drivers', state, Immutable.Map());
}
exports.compositeDriver = function (state, signal, onError) {
    var drivers = getChildDriverList(state);
    return drivers.reduce(function (state, driver, key) {
        var innerState = state.get(key);
        try {
            var newState = driver(innerState, signal, onError);
            return state.set(key, newState);
        }
        catch (ex) {
            onError(innerState)(ex);
        }
        return state;
    }, state);
};
var onError = function (signal) { return function (state) { return function (error) { ERROR$.onNext({ signal: signal, state: state, error: error }); }; }; };
function RootDriver(state, signal) {
    try {
        switch (signal.tag) {
            case attachDriverSignal:
                var data = signal.data;
                var _a = splitPath(signal.data.path), path = _a[0], key = _a[1];
                var pathState = state.getIn(path);
                var driverList = getChildDriverList(pathState);
                if (driverList) {
                    var updatePathState = pathState.set('__drivers', driverList.set(key, data.driver));
                    if (data.driver === exports.compositeDriver) {
                        updatePathState = updatePathState.setIn([key, '__drivers'], Immutable.Map());
                    }
                    var updatedState = state.setIn(path, updatePathState);
                    return exports.compositeDriver(updatedState, signal);
                }
                throw "cannot add driver to " + path.join('.') + " as it is not a composite driver";
            case resetStateSignal:
                return INITIAL_STATE;
            default:
                return exports.compositeDriver(state, signal, onError(signal));
        }
    }
    catch (ex) {
        onError(signal)(state)(ex);
    }
    return state;
}
function connectAndReplay(input$) {
    // casting to any is a bit of a hack, but it seems the typescript definition is missing
    var replay$ = input$.replay(null, 1);
    replay$.connect();
    return replay$;
}
function createSignal(name) {
    var emitter = new Rx.Subject();
    SIGNAL_EMITTER$.onNext(emitter);
    var signalFactory = function (data) {
        // this is a bit funky, we assign the factory function as the tag of the signal
        var signal = {
            tag: signalFactory,
            name: name,
            data: data
        };
        emitter.onNext(signal);
    };
    signalFactory.signal$ = emitter;
    return signalFactory;
}
exports.createSignal = createSignal;
function attachDriver(data) {
    attachDriverSignal(data);
    var _a = splitPath(data.path), path = _a[0], key = _a[1];
    return connectedSwitchedState$
        .where(function (root) { return root && root.hasIn(path); })
        .select(function (root) { return root.getIn(path); })
        .where(function (parentNode) { return parentNode && parentNode.has(key); })
        .select(function (parentNode) { return parentNode.get(key); })
        .distinctUntilChanged();
}
exports.attachDriver = attachDriver;
function __resetState__() {
    resetStateSignal();
}
exports.__resetState__ = __resetState__;
exports.__internal = {
    SWITCHABLE_STATE$$: SWITCHABLE_STATE$$,
    connectedLiveState$: connectedLiveState$,
    connectedLiveSignal$: connectedLiveSignal$,
    connectedError$: connectedError$,
};
exports.CompositeDriver = exports.compositeDriver;
exports.state$ = connectedSwitchedState$;
exports.signal$ = connectedLiveSignal$;
exports.error$ = connectedError$;
// Backwards compatibility aliases
exports.createIntent = createSignal;
exports.DynamicCompositeDriver = exports.compositeDriver;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    function nop() {};

    function optional(self, delegate, args) {

        for (var i = 0; i < args.length; i++) {
            var name = args[i];

            self[name] = delegate[name] || nop;
        }
    }

    function require(self, delegate, args) {
        for (var i = 0; i < args.length; i++) {
            var name = args[i];
            if (delegate[name] === undefined) {
                throw name + " is a required delegate attribute";
            }

            self[name] = delegate[name];
        }
    }

    function defineDelegate(settings) {
        return function(delegate) {
            delegate = delegate || {};

            require(this, delegate, settings.require || []);
            optional(this, delegate, settings.optional || []);

            return delegate;
        }
    }

    return defineDelegate;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(2), __webpack_require__(244), __webpack_require__(22), __webpack_require__(5), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, _, http, loggingService, common, cookies) {
    var iosCookieName = 'ipapp';
    var androidCookieName = 'androidapp';

    return {
        isInAndroidApp: isInAndroidApp,
        isIosApp: isInIosApp,
        isInMobileApp: isInMobileApp,
        isInAndroidBrowser: isInAndroidBrowser,
        isInIosBrowser: isInIosBrowser,
        isInMobileBrowser: isInMobileBrowser
    };

    function isInMobileApp(capabilities,isMobileApp, isNotMobileApp) {
        var inApp = (isInAndroidApp() || isInIosApp());

        if (!inApp) {
            isNotMobileApp('Browser');
        } else {
            var capabilitiesNotMatched = _.filter(capabilities, function(capability) {
                var msg = "Device-Identification-Service - check capability for [Value:" + capability.Value + ", ErrorResponse:" + capability.ErrorResponse + "]";
                loggingService.logDebug(msg);
                var noMatch = !common.hasAppCapability(capability.Value);
                if (noMatch) {
                    var msg = "Device-Identification-Service - didnt match capabilities " + capability.Value;
                    loggingService.logDebug(msg);
                }
                return noMatch;
            });
            if (capabilitiesNotMatched === null || capabilitiesNotMatched === undefined || capabilitiesNotMatched.length === 0) {
                isMobileApp();
            } else {
                var reasons = _.map(capabilitiesNotMatched, function(capability) {
                    return capability.ErrorResponse;
                });
                isNotMobileApp(reasons.join(','));
            }
        }
    }

    function isCookieSet(cookieName) {
        return cookieValue(cookieName) != undefined;
    }

    function cookieValue(cookieName) {
        var value = cookies.get(cookieName);

        var msg = "Device-Identification-Service - cookieValue {name=" + cookieName + ", value=" + value + "}";
        loggingService.logDebug(msg);

        return value;
    }

    function androidClientVersion() {
        return cookieValue(androidCookieName);
    }

    function isInAndroidApp() {
        var cookieSet = isCookieSet(androidCookieName) && androidClientVersion() !== NaN;

        var msg = "Device-Identification-Service - isInAndroidApp (" + cookieSet + ")";
        loggingService.logDebug(msg);

        return cookieSet;
    }

    function iosClientVersion() {
        return cookieValue(iosCookieName);
    }

    function isInIosApp() {
        var cookieSet = isCookieSet(iosCookieName) && iosClientVersion() !== NaN;
        return cookieSet;
    }

    function isInMobileBrowser() {
        return isInAndroidBrowser() || isInIosBrowser();
    }

    function isInAndroidBrowser() {
        return navigator.userAgent.match(/Android/i);
    }

    function isInIosBrowser() {
        return navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 53 */,
/* 54 */,
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(61), __webpack_require__(4), __webpack_require__(22), __webpack_require__(28), __webpack_require__(30), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (adobeDTMService, msgBusService, loggingService, dataLayer, featureService, _) {
        var started = false;

        return {
            start: start,
            stop: stop
        };

        function trackError(error) {
            
        }

        function trackSignUp(event) {
            dataLayer.addToHistory("sign up step", event);
        }


        function start() {
            featureService.isActive('Analytics').then(function(active) {
                subscribeToAnalyticsEvents(started, active);
            });
        }

        function cleanseNumber(number) {
            if (typeof number == 'string') {
                number = number.replace('$', '');
            }
            return parseInt(number);
        }
        function cleanseCurrency(amount) {
            if (typeof amount == 'string') {
                amount = amount.replace('$', '');
            }
            return parseFloat(amount);
        }

        function subscribeToAnalyticsEvents(analyticsFeatureHasAlreadyStarted, analyticsIsAnActiveFeature) {

            if (!analyticsFeatureHasAlreadyStarted && analyticsIsAnActiveFeature) {
                dataLayer.loadTrackData();

                msgBusService.subscribe('nav.nav', function (url) {

                    if (url) {
                        dataLayer.data.content.url = url;
                        dataLayer.saveTrackData();
                        dataLayer.addToHistory("navigation", url);

                        adobeDTMService.trackNav();
                    }
                });

                msgBusService.subscribe('nav.resetback', function (url) {
                    if (url) {
                        dataLayer.data.content.url = url;
                        dataLayer.saveTrackData();
                        dataLayer.addToHistory("navigation", url);

                        adobeDTMService.trackNav();
                    }
                });

                msgBusService.subscribe('nav.menu', function(direction) {

                    dataLayer.addToHistory("menu", direction);
                    if (direction === "open") {
                        adobeDTMService.trackMenu(direction);

                    }
                });

                msgBusService.subscribe('preferences.cash', function(isOn) {
                    var state = isOn ? 'on' : 'off';
                    dataLayer.data.preferences.cashBetting = state;
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory("preference", "cash preference is now " + state);
                    adobeDTMService.trackBetWithCashPreference(state);
                });

                msgBusService.subscribe('nav.exit', function(externalSite) {
                    dataLayer.addToHistory("site exit", externalSite);
                    adobeDTMService.trackExit(externalSite);
                });

                msgBusService.subscribe('lo.login', function(accountNumber) {
                    dataLayer.data.user.accountNumber = accountNumber;
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory("authentication", "User " + accountNumber + " logged in");
                    adobeDTMService.trackLogin();
                });

                msgBusService.subscribe('lo.logout', function() {
                    dataLayer.data.user.accountNumber = '';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory("authentication", "User logged out");
                    adobeDTMService.trackLogout();
                });
                msgBusService.subscribe('account.processed', function (operationType) {
                    dataLayer.data.user.accountOperationType = operationType;
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory("account", operationType);
                    adobeDTMService.trackAccount();
                });
                
                msgBusService.subscribe('account.deposit', function (data) {
                    //if (data.amount > 0) {
                        dataLayer.data.deposit.amount = data.amount;
                        dataLayer.saveTrackData();
                    //}

                    dataLayer.addToHistory("deposit", JSON.stringify(dataLayer.keys.depositBaseKey + data.step));
                    adobeDTMService.trackDeposit(data.step);
                });

                msgBusService.subscribe('lbs.checkin', function (checkInStep) {
                    dataLayer.addToHistory("checkin", JSON.stringify(dataLayer.keys.checkInBaseKey + checkInStep));
                    adobeDTMService.trackCheckIn(checkInStep);
                });

                msgBusService.subscribe('signup.leaving', function(data) {

                    var key = '';

                    
                    switch (data.page) {
                    case 'homepage':
                        key = dataLayer.keys.signupBegin;
                        break;
                    case 'menu':
                        key = dataLayer.keys.signupBegin;
                        break;
                    case 'welcome':
                        key = dataLayer.keys.signupSliderActivated;
                        break;
                    case 'personalDetails':
                        key = dataLayer.keys.signupNameComplete;
                        break;
                    case 'contactDetails':
                        key = dataLayer.keys.signupEmailComplete;
                        break;
                    case 'addressVerification':
                        key = dataLayer.keys.signupAddressComplete;
                        break;
                    case 'ageVerification':
                        key = dataLayer.keys.signupAgeValidationMethodConfirmed;
                        break;
                    case 'driversLicense':
                        key = dataLayer.keys.signupDriversLicenceComplete;
                        break;
                    case 'australianPassport':
                        key = dataLayer.keys.signupPassportComplete;
                        break;
                    case 'internationalPassport':
                        key = dataLayer.keys.signupPassportComplete;
                        break;
                    case 'createPassword':
                        key = dataLayer.keys.signupPasswordComplete;
                        break;
                    case 'accountCreated':
                        key = dataLayer.keys.signupComplete;
                        break;
                    default:
                        break;
                    }

                    dataLayer.addToHistory("signup", JSON.stringify(dataLayer.keys.signupBaseKey + key));
                    adobeDTMService.trackSignUp(key);
                });

                msgBusService.subscribe('signup.data', function(data) {
                    if (data.applicationReferenceNumber)
                        dataLayer.data.signUp.applicationId = data.applicationReferenceNumber;

                    if (data.marketingOptIn)
                        dataLayer.data.signUp.optIn = data.marketingOptIn;

                    if (data.ageVerificationMethod)
                        dataLayer.data.signUp.ageConfirmType = data.ageVerificationMethod;

                    if (data.bettingAccountNumber) {
                        dataLayer.data.user.accountNumber = data.bettingAccountNumber;
                        dataLayer.data.signUp.accountId = data.bettingAccountNumber;

                        dataLayer.saveTrackData();
                    }

                    dataLayer.addToHistory("signup data", JSON.stringify(data));
                });

                msgBusService.subscribe('signup.validationError', function (data) {
                    var key = dataLayer.keys.signupValidationError;
                    dataLayer.data.signUp.lastValidationError = _(data).map(function (x) { return x.feildName + ":" + x.errorMessage });
                    dataLayer.addToHistory("signup.validationError", JSON.stringify(data));
                    adobeDTMService.trackSignUp(key);
                });

                msgBusService.subscribe('error', trackError);

                msgBusService.subscribe('bet.single.selected', function(data) {
                    dataLayer.resetBetData();
                    
                    dataLayer.data.bet.productType = "single";
                    if (data.type == 'toteracing') {
                        dataLayer.data.bet.racing.tote.numberOfTickets = 1;
                    } else if (data.type == 'fobracing') {
                        dataLayer.data.bet.racing.fixed.numberOfTickets = 1;
                    } else if (data.type == 'fobsports') {
                        dataLayer.data.bet.sports.fixed.numberOfTickets = 1;
                    }

                    dataLayer.saveTrackData();
                    dataLayer.addToHistory('bet.single.selected', JSON.stringify(data));
                    adobeDTMService.trackBetSingleSelected();
                });
                msgBusService.subscribe('bet.single.review', function() {
                    dataLayer.addToHistory('bet.single.review', JSON.stringify({ mode: 'single' }));
                    adobeDTMService.trackBetSingleReview();
                });
                msgBusService.subscribe('bet.single.receipt', function (data) {                    
                    dataLayer.resetBetData();
                    dataLayer.data.bet.id = cleanseNumber(data.ticket);
                    dataLayer.data.bet.productType = "single";
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'account';

                    if (data.betType == 'toteracing') {
                        dataLayer.data.bet.racing.tote.numberOfTickets = 1;
                        dataLayer.data.bet.racing.tote.cost = cleanseCurrency(data.toteBetValue);
                    } else if (data.betType == 'fobracing') {
                        var winValue = (data.fobWinValue ? cleanseCurrency(data.fobWinValue) : 0);
                        var placeValue = (data.fobPlaceValue ? cleanseCurrency(data.fobPlaceValue) : 0);
                        dataLayer.data.bet.racing.fixed.numberOfTickets = 1;
                        dataLayer.data.bet.racing.fixed.cost = cleanseCurrency(winValue) + cleanseCurrency(placeValue);
                        if (data.specialOffer) {
                            dataLayer.data.bet.specialOffers = [data.specialOffer];
                        }
                    } else if (data.betType == 'fobsports') {
                        var winValue = (data.fobWinValue ? cleanseCurrency(data.fobWinValue) : 0);
                        var placeValue = (data.fobPlaceValue ? cleanseCurrency(data.fobPlaceValue) : 0);
                        dataLayer.data.bet.sports.fixed.numberOfTickets = 1;
                        dataLayer.data.bet.sports.fixed.cost = cleanseCurrency(winValue) + cleanseCurrency(placeValue);
                    }
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.single.receipt', JSON.stringify(dataLayer.data.bet));
                    adobeDTMService.trackBetSingleReceipt();
                });

                msgBusService.subscribe('bet.betslip.add', function(betslip) {
                    var latestBet = betslip.Bets[0];
                    var betType = 'unknown';

                    if (latestBet.ModelType.indexOf('ToteRacing') != -1) {
                        betType = 'toteracing';
                    } else if (latestBet.ModelType.indexOf('ToteAllUpBet') != -1) {
                        betType = 'toteracing';
                    } else if (latestBet.ProductCode == "FobSports") {
                        betType = 'fobsports';
                    } else if (latestBet.ProductCode == "FobRacing") {
                        betType = 'fobracing';
                    }
                    
                    dataLayer.addToHistory('bet.betslip.add', JSON.stringify({ betType: betType }));
                    adobeDTMService.trackBetSlipAdd();
                });

                msgBusService.subscribe('bet.betslip.review', function(bets) {
                    dataLayer.resetBetData();
                    var numToteRacingBets = 0;
                    var costOfToteRacingBets = 0;
                    var numFixedRacingBets = 0;
                    var costOfFixedRacingBets = 0;
                    var numFixedSportsBets = 0;
                    var costOfFixedSportsBets = 0;

                    _.map(bets, function(bet) {
                        if (bet.ModelType.indexOf('ToteRacing') != -1) {
                            numToteRacingBets = numToteRacingBets + 1;
                            costOfToteRacingBets = costOfToteRacingBets + bet.ExpectedCost;
                        } else if (bet.ModelType.indexOf('ToteAllUpBet') != -1) {
                            numToteRacingBets = numToteRacingBets + 1;
                            costOfToteRacingBets = costOfToteRacingBets + bet.ExpectedCost;
                        } else if (bet.ProductCode == "FobSports") {
                            numFixedSportsBets = numFixedSportsBets + 1;
                            costOfFixedSportsBets = costOfFixedSportsBets + bet.ExpectedCost;
                        } else if (bet.ProductCode == "FobRacing") {
                            costOfFixedRacingBets = costOfFixedRacingBets + bet.ExpectedCost;
                            numFixedRacingBets = numFixedRacingBets + 1;
                        }
                    });

                    dataLayer.data.bet.racing.tote.numberOfTickets = numToteRacingBets;
                    dataLayer.data.bet.racing.tote.cost = costOfToteRacingBets;
                    dataLayer.data.bet.racing.fixed.numberOfTickets = numFixedRacingBets;
                    dataLayer.data.bet.racing.fixed.cost = costOfFixedRacingBets;
                    dataLayer.data.bet.sports.fixed.numberOfTickets = numFixedSportsBets;
                    dataLayer.data.bet.sports.fixed.cost = costOfFixedSportsBets;

                    dataLayer.data.bet.productType = 'single';
                    dataLayer.data.bet.construction = 'betslip';
                    dataLayer.data.bet.placementMethod = 'account';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.betslip.review', JSON.stringify({ productType: 'single' }));
                    adobeDTMService.trackBetSlipReview();
                });
                msgBusService.subscribe('bet.betslip.receipt', function(receipt) {
                    dataLayer.data.bet.id = cleanseNumber(receipt[0].TicketNumber);
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.betslip.receipt', JSON.stringify(dataLayer.data.bet));
                    adobeDTMService.trackBetSlipReceipt();
                });

                msgBusService.subscribe('bet.betslip.cash.selected', function (productType) {
                    dataLayer.data.bet.productType = productType;
                    dataLayer.data.bet.construction = 'betslip';
                    dataLayer.data.bet.placementMethod = 'cash';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.betslip.cash.selected', JSON.stringify({ productType: productType }));
                    adobeDTMService.trackBetSlipCashSelected();
                });

                msgBusService.subscribe('bet.betslip.remove', function() {
                    dataLayer.addToHistory('bet.betslip.remove', '');
                    adobeDTMService.trackBetSlipClear();
                });

                msgBusService.subscribe('bet.betslip.clear', function() {
                    dataLayer.resetBetData();
                    dataLayer.addToHistory('bet.betslip.clear', '');
                    adobeDTMService.trackBetSlipClear();
                });

                msgBusService.subscribe('bet.betslip.allfailed', trackError);


                msgBusService.subscribe('bet.mystery.selected', function() {
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.mystery.selected', JSON.stringify({ betType: 'toteracing' }));
                    adobeDTMService.trackMysterySelected();
                });
                msgBusService.subscribe('bet.mystery.review', function() {
                    dataLayer.data.bet.productType = 'single';
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'account';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.mystery.review', JSON.stringify({ productType: 'single' }));
                    adobeDTMService.trackMysteryReview();
                });
                msgBusService.subscribe('bet.mystery.receipt', function(receipt) {
                    dataLayer.resetBetData();
                    dataLayer.data.bet.id = cleanseNumber(receipt.tickets[0].ticketNumber);
                    dataLayer.data.bet.racing.tote.numberOfTickets = receipt.tickets.length;
                    dataLayer.data.bet.racing.tote.cost = cleanseCurrency(receipt.totalCost);
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.mystery.receipt', JSON.stringify(dataLayer.data.bet));
                    adobeDTMService.trackMysteryReceipt();
                });

                msgBusService.subscribe('bet.favnumbers.selected', function() {

                    dataLayer.addToHistory('bet.favnumbers.selected', JSON.stringify({ betType: 'toteracing' }));
                    adobeDTMService.trackFavNumbersSelected();
                });
                msgBusService.subscribe('bet.favnumbers.review', function() {
                    dataLayer.data.bet.productType = 'single';
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'account';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.favnumbers.review', JSON.stringify({ productType: 'single' }));
                    adobeDTMService.trackFavNumbersReview();
                });
                msgBusService.subscribe('bet.favnumbers.receipt', function(receipt) {
                    dataLayer.resetBetData();
                    dataLayer.data.bet.id = cleanseNumber(receipt.tickets[0].ticketNumber);
                    dataLayer.data.bet.racing.tote.numberOfTickets = receipt.tickets.length;
                    dataLayer.data.bet.racing.tote.cost = cleanseCurrency(receipt.totalCost);
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.favnumbers.receipt', JSON.stringify(dataLayer.data.bet));
                    adobeDTMService.trackFavNumbersReceipt();
                });

                msgBusService.subscribe('bet.tipping.selected', function() {
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.tipping.selected', JSON.stringify({ betType: 'totesports' }));
                    adobeDTMService.trackTippingSelected();
                });
                msgBusService.subscribe('bet.tipping.review', function() {
                    dataLayer.data.bet.productType = 'single';
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'account';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.tipping.review', JSON.stringify({ productType: 'single' }));
                    adobeDTMService.trackTippingReview();
                });
                msgBusService.subscribe('bet.tipping.receipt', function(receipt) {
                    dataLayer.resetBetData();
                    dataLayer.data.bet.id = cleanseNumber(receipt.tickets[0].ticketNumber);
                    dataLayer.data.bet.sports.tote.numberOfTickets = receipt.tickets.length;
                    dataLayer.data.bet.sports.tote.cost = cleanseCurrency(receipt.totalCost);
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.tipping.receipt', JSON.stringify(dataLayer.data.bet));
                    adobeDTMService.trackTippingReceipt();
                });


                msgBusService.subscribe('bet.multi.add', function() {

                    dataLayer.addToHistory('bet.multi.add', JSON.stringify({ betType: 'mixed' }));
                    adobeDTMService.trackMultiAdd();
                });
                msgBusService.subscribe('bet.multi.review', function() {
                    dataLayer.data.bet.productType = 'multi';
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'account';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.multi.review', JSON.stringify({ productType: 'multi' }));
                    adobeDTMService.trackMultiReview();
                });
                msgBusService.subscribe('bet.multi.receipt', function(receipt) {
                    dataLayer.resetBetData();
                    dataLayer.data.bet.id = cleanseNumber(receipt.ticketNumber);
                    dataLayer.data.bet.mixed.fixed.numberOfTickets = 1;
                    dataLayer.data.bet.mixed.fixed.cost = cleanseCurrency(receipt.totalCost);
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.multi.receipt', JSON.stringify(dataLayer.data.bet));
                    adobeDTMService.trackMultiReceipt();
                });
                msgBusService.subscribe('bet.multi.remove', function() {
                    dataLayer.addToHistory('bet.multi.remove', '');
                    adobeDTMService.trackMultiRemove();
                });
                msgBusService.subscribe('bet.multi.clear', function() {
                    dataLayer.resetBetData();
                    dataLayer.addToHistory('bet.multi.clear', '');
                    adobeDTMService.trackMultiClear();
                });
                //bet.multi.convert
                msgBusService.subscribe('bet.accumulator.selected', function() {
                    dataLayer.addToHistory('bet.accumulator.selected', JSON.stringify({ betType: 'fobsports' }));
                    adobeDTMService.trackAccumulatorSelected();
                });
                msgBusService.subscribe('bet.accumulator.review', function() {
                    dataLayer.data.bet.productType = 'accumulator';
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'account';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.accumulator.review', JSON.stringify({ productType: 'accumulator' }));
                    adobeDTMService.trackAccumulatorReview();
                });
                msgBusService.subscribe('bet.accumulator.receipt', function(receipt) {
                    dataLayer.resetBetData();
                    dataLayer.data.bet.id = cleanseNumber(receipt.ticket);
                    dataLayer.data.bet.sports.fixed.numberOfTickets = 1;
                    dataLayer.data.bet.sports.fixed.cost = cleanseCurrency(receipt.cost);
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.accumulator.receipt', JSON.stringify(receipt));
                    adobeDTMService.trackAccumulatorReceipt();
                });

                msgBusService.subscribe('bet.cash.selected', function (productType) {
                    dataLayer.data.bet.productType = productType;
                    dataLayer.data.bet.construction = 'single';
                    dataLayer.data.bet.placementMethod = 'cash';
                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.cash.selected', JSON.stringify({ productType: productType }));
                    adobeDTMService.trackCashSelected();
                });
                msgBusService.subscribe('bet.cash.receipt', function(receipt) {
                    
                    dataLayer.data.bet.id = cleanseNumber(receipt.ticket);

                    if (dataLayer.data.bet.productType === 'multi') {
                        dataLayer.resetBetData();
                        dataLayer.data.bet.id = cleanseNumber(receipt.ticket);
                        dataLayer.data.bet.mixed.fixed.numberOfTickets = 1;
                        dataLayer.data.bet.mixed.fixed.cost = cleanseCurrency(receipt.totalCost);                        
                    }

                    dataLayer.saveTrackData();

                    dataLayer.addToHistory('bet.cash.receipt', JSON.stringify(receipt));
                    adobeDTMService.trackCashReceipt();
                });
                msgBusService.subscribe('bet.cash.remove', function(data) {

                    dataLayer.data.bet.id = cleanseNumber(data.ticket);
                    dataLayer.addToHistory('bet.cash.remove', JSON.stringify(data));
                    adobeDTMService.trackCashRemove();
                });
                msgBusService.subscribe('bet.cash.clear', function() {
                    dataLayer.resetBetData();
                    dataLayer.addToHistory('bet.cash.clear', '');
                    adobeDTMService.trackCashClear();
                });

                msgBusService.subscribe('specialoffer.selected', function (data) {
                    dataLayer.addToHistory('specialoffer.selected', JSON.stringify(data));
                    dataLayer.data.specialOfferSelection = data.Title;
                    dataLayer.saveTrackData();
                });

                msgBusService.subscribe('specialoffer.cleared', function () {
                    dataLayer.addToHistory('specialoffer.cleared', '');
                    dataLayer.data.specialOfferSelection = null;
                    dataLayer.saveTrackData();
                });

                msgBusService.publish('analytics.started');
                msg = 'AnalyticsService - started';
                loggingService.logDebug(msg);
                started = true;
            } else {
                msg = 'AnalyticsService - already started';
                loggingService.logDebug(msg);
            }
        }

        function stop() {
        var msg = '';
        if (started) {
            msgBusService.unsubscribe('nav.nav', trackNav);
            msgBusService.unsubscribe('nav.exit', trackExit);
            msgBusService.unsubscribe('nav.menu', trackMenu);
            msgBusService.unsubscribe('preferences.cash', trackBetWithCashPreference);
            msgBusService.unsubscribe('lo.login', trackLogin);
            msgBusService.unsubscribe('lo.logout', trackLogout);
            msgBusService.unsubscribe('signup.navigate', trackSignUp);

            msg = 'AnalyticsService - stopped';
            loggingService.logDebug(msg);
            started = false;
        } else {
            msg = 'AnalyticsService - already stopped';
            loggingService.logDebug(msg);
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 56 */,
/* 57 */,
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(1), __webpack_require__(21), __webpack_require__(376), __webpack_require__(386), __webpack_require__(160), __webpack_require__(159), __webpack_require__(161), __webpack_require__(383)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, ko, inversify_1, Lock_1, BetSpecialOffer_1, Stake_1, PriceDetails_1, PyosExtensions_1, PyosServiceRequestDto_1) {
    "use strict";
    var PyosStoreState;
    (function (PyosStoreState) {
        PyosStoreState[PyosStoreState["Ok"] = 0] = "Ok";
        PyosStoreState[PyosStoreState["Loading"] = 1] = "Loading";
        PyosStoreState[PyosStoreState["LoadFailed"] = 2] = "LoadFailed";
    })(PyosStoreState || (PyosStoreState = {}));
    ;
    var PyosStore = (function () {
        function PyosStore(appWindow, progressIndicator, eventAggregator, pyosService, rewardCalculator, extensions) {
            var _this = this;
            this._lock = new Lock_1.Lock();
            this._status = ko.observable(PyosStoreState.Ok);
            this._specialOffers = ko.observable([]);
            this._selectedSpecialSeq = ko.observable(null);
            this._priceDetails = ko.observable(null);
            this._stake = ko.observable(null);
            this._betSelection = ko.observable(null);
            this._isExpanded = ko.observable(false);
            this._specialsErrorMessage = ko.observable();
            this._appWindow = appWindow;
            this._progressIndicator = progressIndicator;
            this._eventAggregator = eventAggregator;
            this._pyosService = pyosService;
            this._rewardCalculator = rewardCalculator;
            this._extensions = extensions;
            this._disposables = [];
            this._eventAggregator.subscribe("lo.login", function () {
                if (_this._appWindow.domElementExists("pyos-select")) {
                    _this.enquireSpecialOffers()
                        .catch(function () { return null; });
                }
            });
        }
        PyosStore.prototype.rejectedPromise = function () {
            return new Promise(function (_, reject) { reject(); });
        };
        PyosStore.prototype.dispose = function () {
            this._disposables.forEach(function (obj) { return obj.dispose(); });
            this._disposables = [];
        };
        PyosStore.prototype.loading = function () {
            return this._status() === PyosStoreState.Loading;
        };
        PyosStore.prototype.specialOffers = function () {
            return this._specialOffers();
        };
        PyosStore.prototype.selectedSpecialSeq = function () {
            return this._selectedSpecialSeq();
        };
        PyosStore.prototype.stake = function () {
            return this._stake();
        };
        PyosStore.prototype.priceDetails = function () {
            return this._priceDetails();
        };
        PyosStore.prototype.isExpanded = function () {
            return this._isExpanded();
        };
        PyosStore.prototype.isVisible = function () {
            return !!(this._specialOffers() && this._specialOffers().length);
        };
        PyosStore.prototype.selectedSpecial = function () {
            var specialSeq = this._selectedSpecialSeq();
            if (this._specialOffers()) {
                for (var _i = 0, _a = this._specialOffers(); _i < _a.length; _i++) {
                    var so = _a[_i];
                    if (so.SpecialSeq === specialSeq) {
                        return so;
                    }
                }
            }
            return null;
        };
        PyosStore.prototype.hasWinStake = function () {
            return this._stake() && !!(Number(this._stake().Win));
        };
        PyosStore.prototype.hasPlaceStake = function () {
            return this._stake() && !!(Number(this._stake().Place));
        };
        PyosStore.prototype.projectedReward = function (specialOffer) {
            if (specialOffer && this._stake() && this._priceDetails()) {
                return this._rewardCalculator.calculateProjectedReward(specialOffer, this._stake(), this._priceDetails());
            }
            return null;
        };
        PyosStore.prototype.isOfferEligible = function (specialOffer) {
            return specialOffer ? this._rewardCalculator.checkEligible(specialOffer, this._stake()) : false;
        };
        PyosStore.prototype.selectedOfferIsEligible = function () {
            var specialOffer = this.selectedSpecial();
            return specialOffer ? this.isOfferEligible(specialOffer) : null;
        };
        ;
        PyosStore.prototype.errorMessage = function () {
            switch (this._status()) {
                case PyosStoreState.Ok:
                    return this._specialsErrorMessage();
                case PyosStoreState.Loading:
                    return "";
                case PyosStoreState.LoadFailed:
                    return "Sorry, there was a problem loading the SuperPick details for this bet.";
                default:
                    return "";
            }
        };
        PyosStore.prototype.primaryAction = function () {
            if (this._selectedSpecialSeq()) {
                this.clearSelectedSpecial();
            }
            else {
                this._isExpanded(!this._isExpanded());
            }
        };
        PyosStore.prototype.setSelectedSpecial = function (specialOffer) {
            if (this.selectedSpecialSeq() === specialOffer.SpecialSeq) {
                this.clearSelectedSpecial();
            }
            else {
                this.clearSelectedSpecial();
                this._selectedSpecialSeq(specialOffer.SpecialSeq);
                this._eventAggregator.publish("specialoffer.selected", specialOffer);
            }
        };
        PyosStore.prototype.setStake = function (stake) {
            this._stake(Stake_1.Stake.normalise(stake));
        };
        PyosStore.prototype.setPriceDetails = function (priceDetails) {
            this._priceDetails(PriceDetails_1.PriceDetails.normalise(priceDetails));
        };
        PyosStore.prototype.setSpecialOffers = function (specialOffers) {
            if (specialOffers) {
                this._specialOffers(specialOffers.map(function (so) { return BetSpecialOffer_1.BetSpecialOffer.normalise(so); }));
            }
            else {
                this._specialOffers([]);
            }
            if (this._selectedSpecialSeq() && !this.selectedSpecial()) {
                this.clearSelectedSpecial();
            }
        };
        PyosStore.prototype.clearSelectedSpecial = function () {
            this._selectedSpecialSeq(null);
            this._isExpanded(false);
            this._eventAggregator.publish("specialoffer.cleared");
        };
        PyosStore.prototype.clear = function () {
            this.setSpecialOffers(null);
            this.clearSelectedSpecial();
            this._betSelection(null);
            this._priceDetails(null);
            this._specialsErrorMessage(null);
            this._status(PyosStoreState.Ok);
        };
        PyosStore.prototype.clearErrorMessage = function () {
            this._selectedSpecialSeq(null);
            this._isExpanded(false);
            this._specialsErrorMessage(null);
        };
        PyosStore.prototype.validate = function () {
            var specialOffer = this.selectedSpecial();
            if (specialOffer) {
                if (this.isOfferEligible(specialOffer) === false) {
                    this._specialsErrorMessage(this._extensions.getLegTypeIneligibilityDisplay(specialOffer));
                    return false;
                }
            }
            this._specialsErrorMessage(null);
            return true;
        };
        PyosStore.prototype.setBetSelection = function (betSelection) {
            this._betSelection(betSelection);
        };
        PyosStore.prototype.enquireSpecialOffers = function () {
            var _this = this;
            if (this._betSelection() && this._priceDetails()) {
                if (this._lock.trylock()) {
                    this._status(PyosStoreState.Loading);
                    var betSelection = this._betSelection();
                    var request = {
                        SelectedSpecial: this.selectedSpecial(),
                        Racing: PyosServiceRequestDto_1.isRacingEnquirySelectionDto(betSelection) ? betSelection : null,
                        SportsEx: PyosServiceRequestDto_1.isSportsEnquirySelectionExDto(betSelection) ? betSelection : null
                    };
                    var operation = this._pyosService.fobBetPreEnquiry(request)
                        .then(function (response) {
                        if (response) {
                            if (response.SpecialTokenOffers) {
                                _this.setSpecialOffers(response.SpecialTokenOffers.SpecialOffers);
                            }
                            else {
                                _this.setSpecialOffers(null);
                            }
                            if (response.SpecialOffersFault) {
                                _this._specialsErrorMessage(response.SpecialOffersFault.Message);
                            }
                            else {
                                _this._specialsErrorMessage(null);
                            }
                        }
                        else {
                            _this.setSpecialOffers(null);
                            _this._specialsErrorMessage(null);
                        }
                        _this._status(PyosStoreState.Ok);
                        _this._lock.unlock();
                        return response;
                    }).catch(function () {
                        _this.setSpecialOffers(null);
                        _this._status(PyosStoreState.LoadFailed);
                        _this._lock.unlock();
                    });
                    return this._progressIndicator.displayFor(operation);
                }
            }
            return this.rejectedPromise();
        };
        return PyosStore;
    }());
    PyosStore = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("IAppWindow")),
        tslib_1.__param(1, inversify_1.inject("IProgressIndicator")),
        tslib_1.__param(2, inversify_1.inject("IEventAggregator")),
        tslib_1.__param(3, inversify_1.inject("IPyosService")),
        tslib_1.__param(4, inversify_1.inject("IPyosRewardCalculator")),
        tslib_1.__param(5, inversify_1.inject("PyosExtensions")),
        tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object, PyosExtensions_1.PyosExtensions])
    ], PyosStore);
    exports.PyosStore = PyosStore;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(117), __webpack_require__(22), __webpack_require__(252), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (locationStore, loggingService, timeProvider, _) {

    return {
        getLocationDetails: getLocationDetails,
        getLocationErrors: getLocationErrors,
        updateLocation: updateLocation,
        updateLocationWithError : updateLocationWithError,
        clearLocation: clearLocation,
        clearAll: clearAll
    };

    /* return list of valid location details */
    function getLocationDetails() {
        var locationData = locationStore.get();
        var timeNow = timeProvider.getTime();

        loggingService.logDebug("locationService.getLocationDetails");
        var details = _.filter(locationData.ProviderLocations, function (location) {
            return (location.ExpiryTime > timeNow) && (location.ErrorCode === undefined);
        });
        if (details !== undefined && details !== null) {
            if (arguments.length > 0) {
                var providerCode = arguments[0];
                details = _.filter(details, function (location) {
                    return (location.ProviderCode == providerCode);
                });
                return details[0];
            } else {
                return details;
            }
        } else {
            return [];
        }
    };

    function getLocationErrors() {
        var locationData = locationStore.get();

        loggingService.logDebug("locationService.getLocationErrors");
        var errors = _.filter(locationData.ProviderLocations, function (location) {
            return (location.ErrorCode !== undefined);
        });
        if (errors != null) {
            loggingService.logDebug("locationService.getLocationErrors - errors.length:" + errors.length);
            _.each(errors, function(error) {
                if (error != null) {
                    loggingService.logDebug("locationService.getLocationErrors - ProviderCode:" + error.ProviderCode + " ErrorCode:" + error.ErrorCode);
                }
            });
        } else {
            loggingService.logDebug("locationService.getLocationErrors - errors is null");
        }
        return errors;
    }

    /* Provider codes:
        'BLE',    //Bluetooth Low Energy
        'GPS',    //Global Positioning System
        'HFA',    //High Frequency Audio
        'WIFI'    //WiFi (Wireless Fidelity)
    */

    /* Location Ids:
        'PERTH',
        'ASCOT',
        'OSBOURNE'
    */

    /* called by a location provider to update current location */
    function updateLocation(providerCode, locationId, validTimeSpanMs) {
        var locationData = locationStore.get();
        var timeNow = timeProvider.getTime();

        loggingService.logDebug("locationService.updateLocation");
        var locations = _.filter(locationData.ProviderLocations, function (location) {
            return location.ProviderCode != providerCode;
        });
        locations.push({
            ProviderCode: providerCode,
            LocationId: locationId,
            ExpiryTime: timeNow + Number(validTimeSpanMs)
        });
        locationData.ProviderLocations = locations;
        locationStore.set(locationData);
    };

    function updateLocationWithError(providerCode, errorCode) {
        var locationData = locationStore.get();
        var timeNow = timeProvider.getTime();

        loggingService.logDebug("locationService.updateLocationWithError - provider:" + providerCode + " errorCode:" + errorCode);
        var locations = _.filter(locationData.ProviderLocations, function (location) {
            return location.ProviderCode != providerCode;
        });
        locations.push({
            ProviderCode: providerCode,
            LocationId: null,
            ErrorCode: errorCode,
            ExpiryTime: timeNow + 604800000 // 1 week
        });
        locationData.ProviderLocations = locations;
        locationStore.set(locationData);
    }

    /* called by a location provider to clear current location */
    function clearLocation(providerCode) {
        var locationData = locationStore.get();

        loggingService.logDebug("locationService.clearLocation - providerCode:" + providerCode);
        var locations = _.filter(locationData.ProviderLocations, function (location) {
            return location.ProviderCode != providerCode;
        });
        locationData.ProviderLocations = locations;
        locationStore.set(locationData);
    };

    function clearAll() {
        var locationData = locationStore.get();

        loggingService.logDebug("locationService.clearAll");
        locationData.ProviderLocations = [];
        locationStore.set(locationData);
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(21), __webpack_require__(374), __webpack_require__(384), __webpack_require__(385), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_1, inversify_config_1, services_config_1, viewmodels_config_1, underscore) {
    "use strict";
    var loadModules = underscore.once(function (parent) {
        var kernel = new inversify_1.Kernel();
        kernel.parent = parent;
        kernel.load(services_config_1.default);
        kernel.load(viewmodels_config_1.default);
        return kernel;
    });
    var kernel = loadModules(inversify_config_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = kernel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(22), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_RESULT__ = function (loggingService, dataLayer) {

    return {
        trackNav: trackNav,
        trackLogin: trackLogin,
        trackBet: trackBet,
        trackBetSingleSelected: trackBetSingleSelected,
        trackBetSingleReview: trackBetSingleReview,
        trackBetSingleReceipt: trackBetSingleReceipt,
        trackBetSlipAdd: trackBetSlipAdd,
        trackBetSlipReview: trackBetSlipReview,
        trackBetSlipReceipt: trackBetSlipReceipt,
        trackBetSlipCashSelected: trackBetSlipCashSelected,
        trackBetSlipClear: trackBetSlipClear,
        trackBetSlipRemove: trackBetSlipRemove,
        trackMysterySelected: trackMysterySelected,
        trackMysteryReview: trackMysteryReview,
        trackMysteryReceipt: trackMysteryReceipt,
        trackFavNumbersSelected: trackFavNumbersSelected,
        trackFavNumbersReview: trackFavNumbersReview,
        trackFavNumbersReceipt: trackFavNumbersReceipt,
        trackTippingSelected: trackTippingSelected,
        trackTippingReview: trackTippingReview,
        trackTippingReceipt: trackTippingReceipt,
        trackLogout: trackLogout,
        trackExit: trackExit,
        trackMenu: trackMenu,
        trackBetWithCashPreference: trackBetWithCashPreference,
        trackSignUp: trackSignUp,
        trackMultiAdd: trackMultiAdd,
        trackMultiReview: trackMultiReview,
        trackMultiReceipt: trackMultiReceipt,
        trackMultiRemove: trackMultiRemove,
        trackMultiClear: trackMultiClear,
        trackAccumulatorSelected: trackAccumulatorSelected,
        trackAccumulatorReview: trackAccumulatorReview,
        trackAccumulatorReceipt: trackAccumulatorReceipt,
        trackCashSelected: trackCashSelected,
        trackCashReceipt: trackCashReceipt,
        trackCashRemove: trackCashRemove,
        trackCashClear: trackCashClear,
        trackAccount: trackAccount,
        trackDeposit: trackDeposit,
        trackCheckIn: trackCheckIn,
        trackActivity: trackActivity,
        trackKey: trackKey
    };

    function trackNav() {
        trackKey(dataLayer.keys.nav);
    }

    function trackBet() {
        trackKey(dataLayer.keys.betSelected);
    }
    function trackBetSingleSelected() {
        
        trackKey(dataLayer.keys.betSelected);
    }
    function trackBetSingleReview() {
        trackKey(dataLayer.keys.betAccountSelected);
        trackKey(dataLayer.keys.betAccountReview);
    }
    function trackBetSingleReceipt() {
        trackKey(dataLayer.keys.betAccountProcessed);
    }
    function trackBetSlipAdd() {
        trackKey(dataLayer.keys.betslipBetAdded);
    }
    function trackBetSlipReview() {
        trackKey(dataLayer.keys.betslipAccountSelected);
        trackKey(dataLayer.keys.betslipAccountReview);
    }
    function trackBetSlipReceipt() {
        trackKey(dataLayer.keys.betslipAccountProcessed);
    }
    function trackBetSlipCashSelected() {
        trackKey(dataLayer.keys.betslipCashSelected);
    }
    function trackBetSlipClear() {
        trackKey(dataLayer.keys.betslipCleared);
    }
    function trackBetSlipRemove() {
        trackKey(dataLayer.keys.betslipBetRemoved);
    }
    function trackMysterySelected() {
        trackKey(dataLayer.keys.mysterySelected);
    }
    function trackMysteryReview() {
        trackKey(dataLayer.keys.mysteryAccountSelected);
        trackKey(dataLayer.keys.mysteryReview);
    }
    function trackMysteryReceipt() {
        trackKey(dataLayer.keys.mysteryReceipt);
    }
    function trackFavNumbersSelected() {
        trackKey(dataLayer.keys.favNumbersSelected);
    }
    function trackFavNumbersReview() {
        trackKey(dataLayer.keys.favNumbersAccountSelected);
        trackKey(dataLayer.keys.favNumbersAccountReview);
    }
    function trackFavNumbersReceipt() {
        trackKey(dataLayer.keys.favNumbersAccountProcessed);
    }
    function trackTippingSelected() {
        trackKey(dataLayer.keys.tippingSelected);
    }
    function trackTippingReview() {
        trackKey(dataLayer.keys.tippingAccountSelected);
        trackKey(dataLayer.keys.tippingAccountReview);
    }
    function trackTippingReceipt() {
        trackKey(dataLayer.keys.tippingAccountProcessed);
    }
    function trackMultiAdd() {
        trackKey(dataLayer.keys.multiBetAdded);
    }
    function trackMultiReview() {
        trackKey(dataLayer.keys.multiAccountSelected);
        trackKey(dataLayer.keys.multiAccountReview);
    }
    function trackMultiReceipt() {
        trackKey(dataLayer.keys.multiAccountProcessed);
    }
    function trackMultiClear() {
        trackKey(dataLayer.keys.multiCleared);
    }
    function trackMultiRemove() {
        trackKey(dataLayer.keys.multiBetRemoved);
    }
    function trackAccumulatorSelected() {
        trackKey(dataLayer.keys.accumulatorSelected);
    }
    function trackAccumulatorReview() {
        trackKey(dataLayer.keys.accumulatorAccountSelected);
        trackKey(dataLayer.keys.accumulatorAccountReview);
    }
    function trackAccumulatorReceipt() {
        trackKey(dataLayer.keys.accumulatorAccountProcessed);
    }
    function trackCashSelected() {
        trackKey(dataLayer.keys.cashBetSelected);
    }
    function trackCashReceipt() {
        trackKey(dataLayer.keys.cashBetProcessed);
    }
    function trackCashRemove() {
        trackKey(dataLayer.keys.cashBetRemoved);
    }
    function trackCashClear() {
        trackKey(dataLayer.keys.cashCleared);
    }

    function trackLogin() {
        trackKey(dataLayer.keys.login);
    }
    function trackLogout() {
        trackKey(dataLayer.keys.logout);
    }
    function trackExit(externalSite) {
        trackKey(dataLayer.keys.exitToBaseKey + externalSite);
    }
    function trackMenu() {
        trackKey(dataLayer.keys.menu);
    }
    function trackBetWithCashPreference(state) {
        
        trackKey(dataLayer.keys.cashPreferenceBaseKey + state);
    }
    function trackSignUp(step) {
        trackKey(dataLayer.keys.signupBaseKey + step);
        
    }
    function trackAccount() {
        trackKey(dataLayer.keys.accountProcessed);
    }
    function trackDeposit(key) {
        trackKey(dataLayer.keys.depositBaseKey + key);
    }
    function trackCheckIn(key) {
        trackKey(dataLayer.keys.checkInBaseKey + key);
    }
    function trackActivity(key) {
        trackKey(dataLayer.keys.activityBaseKey + key);
    }
    function trackKey(key) {
        if (typeof _satellite !== 'undefined') {
            _satellite.track(key);
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(44)], __WEBPACK_AMD_DEFINE_RESULT__ = function (apiService) {
    var fences = {};
    var parameters = {};
    
    populateData();

    return {
        getFences: getFences,
        getParameters: getParameters,
        refresh: populateData
    }

    function populateData() {
        apiService.fetchJsonFromApi("/api/GeoFence/Index")
            .then(function(parsedJson) {
                fences = parsedJson;
            });

        apiService.fetchJsonFromApi("/api/config/lbsparameters")
            .then(function(parsedJson) {
                parameters = parsedJson;
            });
    }

    function getParameters() {
        //TODO: Convert to promises - could still be fetching from api
        return parameters;
    }

    function getFences() {
        //TODO: Convert to promises - could still be fetching from api
        return fences;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*
**/
var Base64 = {

    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode: function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    // public method for decoding
    decode: function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    // private method for UTF-8 encoding
    _utf8_encode: function (string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode: function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

}

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return Base64;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(3), __webpack_require__(5), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, jQuery, _, nav, common, tabtouch) {
    var self;

    function MultiViewModel(params) {
        self = this;
        this.backUrl = params.backUrl;
        this.backText = params.backText;
        tabtouch.initCommon(this.backUrl, this.backText);
    }

    MultiViewModel.prototype = Object.create(Object.prototype, {
        initMultiLegDetail: {
            value: function initMultiLegDetail() {
                var items = jQuery('ul.multi-selections a');
                items.click(function () {
                    nav.ajaxGet(
                        jQuery(this).attr('href'),
                        self.processMultiLegDetail);
                    return false;
                });
            }
        },
        processMultiLegDetail: {
            value: function processMultiLegDetail(data) {
                jQuery('#multi-leg-window #transaction-details').html(data);
                common.initDisplayListStyle(jQuery('#multi-leg-window ul.display-list'));
                jQuery('.popup').click(function () { jQuery('#multi-leg-window').fadeOut('fast'); });
                common.showPopup(jQuery('#multi-leg-window'));
            }
        },
        multiTimeout : {
            value: 90000
        }
    });
    Object.defineProperty(MultiViewModel, 'constructor', {
        enumerable: false,
        value: MultiViewModel
    });

    return MultiViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */
/***/ (function(module, exports) {

module.exports = define;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function (msgBusService, loggingService) {
    var loginCallback = null;
    var logoutCallback = null;
    var started = false;

    return {
        onLogin: onLogin,
        onLogout: onLogout,
        start: start,
        stop: stop
    };

    function start() {
        var msg = '';
        if (!started) {
            msg = 'account-monitoring-service : started';
            loggingService.logDebug(msg);
            setupLoginRefresh();
            started = true;
        } else {
            msg = 'account-monitoring-service : already started';
            loggingService.logDebug(msg);
        }
    }

    function stop() {
        var msg = '';
        if (started) {
            msg = 'account-monitoring-service : stoped';
            loggingService.logDebug(msg);
            stopLoginRefresh();
            started = false;
        } else {
            msg = 'account-monitoring-service : already stoped';
            loggingService.logDebug(msg);
        }
    }

    function onLogin(callback) {
        loginCallback = callback;
        return this;
    }

    function onLogout(callback) {
        logoutCallback = callback;
        return this;
    }

    function setupLoginRefresh() {
        var msg = 'account-monitoring-service : setupLoginRefresh';
        loggingService.logDebug(msg);
        msgBusService.subscribe('lo.login', loginCallback);
        msgBusService.subscribe('lo.logout', logoutCallback);
        msgBusService.subscribe('nav.nav', stopLoginRefresh);
    };

    function stopLoginRefresh() {
        var msg = 'account-monitoring-service : stopLoginRefresh';
        loggingService.logDebug(msg);
        msgBusService.unsubscribe('lo.login', loginCallback);
        msgBusService.unsubscribe('lo.logout', logoutCallback);
        msgBusService.unsubscribe('na.nav', stopLoginRefresh);
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ko, inversify_1) {
    "use strict";
    function registerComponent(config) {
        if (!ko.components.isRegistered(config.componentName)) {
            ko.components.register(config.componentName, {
                viewModel: {
                    createViewModel: config.resolver
                },
                template: config.template
            });
        }
    }
    exports.registerComponent = registerComponent;
    function registerComponentWithParams(config) {
        if (!ko.components.isRegistered(config.componentName)) {
            ko.components.register(config.componentName, {
                viewModel: {
                    createViewModel: function (params) { return resolveWithParams(params, config.kernel, config.resolver); }
                },
                template: config.template
            });
        }
    }
    exports.registerComponentWithParams = registerComponentWithParams;
    function resolveWithParams(params, kernel, resolver) {
        var privateKernel = new inversify_1.Kernel();
        privateKernel.parent = kernel;
        privateKernel.bind("$params").toConstantValue(params);
        return resolver(privateKernel);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko) {
    return function (amount, min, max, step) {
        var self = this;

        self.Amount = ko.observable(amount);
        self.AmountString = ko.observable(amount.toString());

        self.Step = ko.observable(step);
        self.Min = min;
        self.Max = max;
        self.Pattern = ko.computed(function () {
            return self.Step() === 1 ? /^\d{0,5}$/ : /^\d{0,5}(\.\d?)?$/;
        });

        self.IsNumberPadVisible = ko.observable(false);
        
        self.ClearAmount = function () {
            self.Amount(0);
            self.AmountString(self.Amount().toString());
        }

        self.ShowNumberPad = function () {
            self.IsNumberPadVisible(true);
        }

        self.HideNumberPad = function () {
            self.IsNumberPadVisible(false);
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(215)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, numberOfBetsViewModel) {
    function numberOfBetsComponentViewModel(maxValue) {
        var self = this;

        _.bindAll(self, "UpdateActiveNumberOfBets");

        var numberOfBetsViewModels = [];
        for (var i = 1; i <= maxValue; i++) {
            numberOfBetsViewModels.push(new numberOfBetsViewModel(i));
        }

        self.NumberOfBetsViewModels = ko.observableArray(numberOfBetsViewModels);
        self.ActiveNumberOfBets = ko.observable();

        //set initial active
        self.ActiveNumberOfBets(_.first(numberOfBetsViewModels));
        self.ActiveNumberOfBets().IsActive(true);
    }

    _.extend(numberOfBetsComponentViewModel.prototype, {
        UpdateActiveNumberOfBets: function (selectedNumberOfBets) {
            var self = this;
            //make current one de-active
            if (self.ActiveNumberOfBets() !== undefined) {
                self.ActiveNumberOfBets().IsActive(false);
            }
            //assign new one
            self.ActiveNumberOfBets(selectedNumberOfBets);
            //activate new one
            self.ActiveNumberOfBets().IsActive(true);
        }
    });

    return numberOfBetsComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(59), __webpack_require__(115), __webpack_require__(30), __webpack_require__(246), __webpack_require__(245), __webpack_require__(8), __webpack_require__(4), __webpack_require__(22), __webpack_require__(62), __webpack_require__(41), __webpack_require__(106), __webpack_require__(116)], __WEBPACK_AMD_DEFINE_RESULT__ = function (locationService, geofenceService, featureService, geoLocationService, beaconLocationService, preferencesService, messageBusService, loggingService, lbsConfigService, checkInService, dateProvider, gpsStore) {
        var isRunning = false;

        return {
            start: initLocationProvider,
            stop: clearLocationWatch,
            jolt: jolt,
            testfire: geoSuccess,
            testfail: geoError,
            isActive: isActive
        };

        function isActive() {
            return isRunning;
        }

        function jolt() {
            if (isRunning) {
                geoLocationService.jolt();
            }
        }

        function initLocationProvider(onPrefDisabled, onFeatureInactive) {
                
            if (preferencesService.locationServicesEnabled()) {
                lbsConfigService.refresh();
                featureService.isActive("LocationBasedServices")
                    .then(function(active) {
                        if (active) {
                            if (isRunning == false) {
                                geoLocationService
                                    .success(geoSuccess)
                                    .error(geoError)
                                    .init();
                                beaconLocationService
                                    .success(beaconSuccess)
                                    .error(beaconError)
                                    .init();
                                isRunning = true;
                            }
                        } else if (onFeatureInactive) {
                            onFeatureInactive();
                        }
                    });
            } else if (onPrefDisabled) {
                onPrefDisabled();
            }
        }

        function clearLocationWatch() {
            if (isRunning) {
                geoLocationService.cancel();
                isRunning = false;
                checkInService.checkout();
                locationService.clearLocation('GPSREGION');
            }
        }

        function updateGpsRegion(closestFence, whereAmI, validTimeSpanMs) {
            var deactivate = false;
            var closestFenceId = closestFence.FenceId;
            var checkedInFenceId = checkInService.checkedInLocationId();
            if (closestFenceId !== undefined && closestFenceId !== '' &&
                checkedInFenceId !== undefined && checkedInFenceId !== '' &&
                closestFenceId !== checkedInFenceId) {
                deactivate = true;
            } else {
                if (whereAmI === geofenceService.unknownLocation) {
                    var shortestDistance = closestFence.DistanceToFence;
                    var maxGeoFenceOutsideDistance = lbsConfigService.getParameters().maxOutsideDistance;
                    if (shortestDistance >= maxGeoFenceOutsideDistance) {
                        deactivate = true;
                    }
                }
            }
            if (deactivate) {
                clearLocationWatch();
            } else {         
                locationService.updateLocation('GPSREGION', closestFenceId, validTimeSpanMs);
            }
        }

        function geoSuccess(position) {
            var msg = 'location-provider : geoSuccess - position=[' + position.coords.latitude + ',' + position.coords.longitude + ',' + position.coords.accuracy + ']';
            gpsStore.set({
                error: null,
                position: position,
                timeStamp: dateProvider.now()
            });
            loggingService.logDebug(msg);
            if (preferencesService.locationServicesEnabled()) {
                var whereAmI = geofenceService.whereAmI(position);
                var closestFence = geofenceService.getClosestFence(position);
                var validTimeSpanMs = lbsConfigService.getParameters().gpsTimeoutMs;
                msg = 'location-provider : geoSuccess - whereAmI=[' + whereAmI + ']';
                loggingService.logDebug(msg);
                updateGpsRegion(closestFence, whereAmI, validTimeSpanMs);
                if (whereAmI != geofenceService.unknownLocation) {
                    locationService.updateLocation('GPS', whereAmI, validTimeSpanMs);
                    locationService.updateLocation('GPSREGION', whereAmI, validTimeSpanMs);
                } else {
                    loggingService.logDebug("location-provider : geoSuccess - location unknown - clearing GPS location");
                    locationService.clearLocation('GPS');
                }

                messageBusService.publish('GPSSUCCESS', {
                    location: whereAmI,
                    position: position
                });
            }
        }

        function geoError(error) {
            var msg = 'location-provider : geoError - code=[' + error.code + '] message=[' + error.message + ']';
            loggingService.logDebug(msg);
            gpsStore.set({
                error: error,
                position: null,
                timeStamp: dateProvider.now()
            });
            if (preferencesService.locationServicesEnabled()) {
                locationService.updateLocationWithError('GPS',error.code);
                messageBusService.publish('GPSERROR', error);
            }
        }

        function beaconSuccess(beacon) {
            var msg = 'location-provider : beaconSuccess - beacon=[' + beacon.type + ',' + beacon.id + ']';
            loggingService.logDebug(msg);
            if (preferencesService.locationServicesEnabled()) {
                locationService.updateLocation(beacon.type, beacon.id, lbsConfigService.getParameters().bcnTimeoutMs);
                messageBusService.publish('BEACONID', beacon);
            }
        }

        function beaconError(error) {
            var msg = 'location-provider : beaconError - code=[' + error.code + '] message=[' + error.message + ']';
            loggingService.logDebug(msg);
            if (preferencesService.locationServicesEnabled()) {
                locationService.updateLocationWithError('BLE',error.code);
                locationService.updateLocationWithError('HFA',error.code);
                messageBusService.publish('BEACONERROR', error);
            }
        }
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(60), __webpack_require__(70), __webpack_require__(369)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_config_1, koComponentRegistration_1, template) {
    "use strict";
    koComponentRegistration_1.registerComponent({
        componentName: "projected-pay",
        template: template,
        resolver: function () { return inversify_config_1.default.get("ProjectedPayViewModel"); }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(60), __webpack_require__(70), __webpack_require__(370)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_config_1, koComponentRegistration_1, template) {
    "use strict";
    koComponentRegistration_1.registerComponent({
        componentName: "pyos-message",
        template: template,
        resolver: function () { return inversify_config_1.default.get("PyosMessageViewModel"); }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(60), __webpack_require__(70), __webpack_require__(371)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_config_1, koComponentRegistration_1, template) {
    "use strict";
    koComponentRegistration_1.registerComponentWithParams({
        componentName: "pyos-select",
        template: template,
        kernel: inversify_config_1.default,
        resolver: function (k) { return k.get("PyosSelectViewModel"); }
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(4), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jockey, messageBusService, loggingService) {
    var serviceStarted = false;

    return {
        start: start,
        stop: stop
    }

    // Inbound handlers
    function gpsErrorCallback(payload) {
        var msg = "JockeyJsMessageService - inbound relay GPS Error : " + JSON.stringify(payload);
        loggingService.logDebug(msg);
        messageBusService.publish("NATIVEGPSERROR", payload);
    }
    function gpsCoordinatesCallBack(payload) {
        var msg = "JockeyJsMessageService - inbound relay GPS Coordinates : " + JSON.stringify(payload);
        loggingService.logDebug(msg);
        messageBusService.publish("NATIVEGPSCOORDINATES", payload);
    }
    function beaconErrorCallback(payload) {
        var msg = "JockeyJsMessageService - inbound relay BEACON Error : " + JSON.stringify(payload);
        loggingService.logDebug(msg);
        messageBusService.publish("NATIVEBEACONERROR", payload);
    }
    function beaconIdCallBack(payload) {
        var msg = "JockeyJsMessageService - inbound relay BEACON Id : " + JSON.stringify(payload);
        loggingService.logDebug(msg);
        messageBusService.publish("NATIVEBEACONID", payload);
    }

    function registerJockeyListeners() {
        jockey.on("GPSCOORDINATES", gpsCoordinatesCallBack);
        jockey.on("GPSERROR", gpsErrorCallback);
        jockey.on("BEACONID", beaconIdCallBack);
        jockey.on("BEACONERROR", beaconErrorCallback);
    };
    function deRegisterJockeyListeners() {
        jockey.off("GPSCOORDINATES");
        jockey.off("GPSERROR");
        jockey.off("BEACONID");
        jockey.off("BEACONERROR");
    };

    // Outbound handlers
    function lbsTrackingCallback(state) {
        var msg = "JockeyJsMessageService - outbound relay LBS tracking : " + JSON.stringify(state);
        loggingService.logDebug(msg);
        jockey.send("LBSTRACKING", state);
    }

    function registerMessageBusListeners() {
        messageBusService.subscribe("LBSTRACKING", lbsTrackingCallback);
    };
    function deRegisterMessageBusListeners() {
        messageBusService.unsubscribe("LBSTRACKING", lbsTrackingCallback);
    };

    function start() {
        if (!(serviceStarted)) {
            registerJockeyListeners();
            registerMessageBusListeners();
            loggingService.logDebug("JockeyJsMessageService - started");
            serviceStarted = true;
        }
    }

    function stop() {
        if (serviceStarted) {
            deRegisterJockeyListeners();
            deRegisterMessageBusListeners();
            loggingService.logDebug("JockeyJsMessageService - stopped");
            serviceStarted = false;
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * A basic routing system that Nav uses.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
    var routes = [];

    function addRoute(urlPattern, fromPattern, handler) {
        routes = _.filter(routes, function (route) { return route.urlPattern != urlPattern; });
        routes.unshift({ urlPattern: urlPattern, handler: handler, fromPattern: fromPattern });
    }

    function removeRoute(urlPattern) {
        routes = _.filter(routes, function (route) { return route.urlPattern != urlPattern; });
    }

    function follow(url, fromUrl) {
        for (var i = 0; i < routes.length; ++i) {
            var route = routes[i];
            var pattern = new RegExp(route.urlPattern);
            var fromPattern = new RegExp(route.fromPattern || "^.*$");
            if (pattern.test(url) && fromPattern.test(fromUrl)) {
                if (typeof route.handler == 'function') {
                    route.handler(url);
                } else {
                    console.error("Handler for route " + route.urlPattern + " is invalid");
                }
                return;
            }
        }
    }

    return {
        addRoute: addRoute,
        removeRoute: removeRoute,
        follow: follow
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Module for the slide-out-menu generally on the right of the web app.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(31), __webpack_require__(4), __webpack_require__(147), __webpack_require__(148)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, loginController, msgBus, betSlipService, betWalletService) {
    return new function() {
        var self = this;

        self.accountData = {};
        self.page = {
            initCounters: function() {
                jQuery('.number-indicator:empty').hide();
                jQuery('.bet-slip-container .multi').hide();
                jQuery('.bet-slip-container .offers').hide();
            },
            setBetSlipContainerHeight: function() {
                jQuery('.bet-slip-container').height(function() {
                    jQuery(window).height();
                });
            },
            loginButton: jQuery('.login a'),
            links: jQuery('.bet-slip-container a'),
            menuButton: jQuery('.bet-slip-toggle'),
            isMenuOpen: function() {
                return jQuery('.page-container').hasClass('bet-slip-open');
            },
            isAuthenticated: function() {
                return jQuery('#LoggedOn').val() == "True";
            },
            closeMenu: function() {
                jQuery('.page-container').removeClass('bet-slip-open');
                jQuery('.bet-slip-container').fadeOut();
                jQuery('.bet-slip-closer').detach();
                msgBus.publish('nav.menu', 'close');
            },
            openMenu: function() {
                jQuery('.page-container').addClass('bet-slip-open');
                jQuery('.bet-slip-container.logged-in').fadeIn();
                var betSlipCloser = jQuery('<a href="#closeBetSlip" class="bet-slip-closer" data-tid-bet-slip-closer="">Close bet slip</a>');
                jQuery('.page-container').append(betSlipCloser);
                betSlipCloser.unbind('click').click(self.closer);
                jQuery('.close-drawer').unbind('click').click(self.closer);
                msgBus.publish('nav.menu', 'open');
            },
            showAuthenticatedView: function() {
                jQuery('.unauthenticated-view').hide();
                jQuery('.authenticated-view').show();
            },
            showUnauthenticatedView: function() {
                jQuery('.unauthenticated-view').show();
                jQuery('.authenticated-view').hide();
            },
            toggleCashBetsNavigationElements: function(value) {
                jQuery('.slides').toggle(value);
                jQuery('.next-slide').toggle(value);
                jQuery('.previous-slide').toggle(value);
            },
            dataBind: function(data) {
                if (data.AccountNumber > 0) {
                    jQuery('.bet-slip-container .account-name').html(data.AccountName || {});
                    jQuery('.bet-slip-container .account-number').html(data.AccountNumber || {});
                    jQuery('.bet-slip-container .account-balance').html(data.Balance || {});
                }
                jQuery('.bet-slip-container .blackbook .number-indicator').html(data.BlackBookAlertCount || 0)
                                                 .toggle(data.BlackBookAlertCount > 0 || false);

                jQuery('.bet-slip-container .offers').toggle(data.TotalCampaignsCount > 0 || false);
                jQuery('.bet-slip-container .offers .number-indicator').html(data.ActiveCampaignsCount || 0)
                                                 .toggle(data.ActiveCampaignsCount > 0 || false);

                jQuery('.bet-slip-container .multi').toggle(data.NumberOfTotalMultiBetLegs > 0 || false);
                jQuery('.bet-slip-container .multi .number-indicator').html(data.NumberOfActiveMultiBetLegs || 0)
                                             .toggle(data.NumberOfTotalMultiBetLegs > 0 || false);

                jQuery('.bet-slip-container .bet-slip .number-indicator').html(data.betSlipCount || 0)
                                             .toggle(data.betSlipCount > 0 || false);

                jQuery('.bet-slip-container .bet-wallet .number-indicator').html(data.betWalletCount || 0)
                                             .toggle(data.betWalletCount > 0 || false);
            }
        };

        self.init = function() {
            self.page.initCounters();
            self.page.setBetSlipContainerHeight();

            self.page.links.click(function(e) {
                self.toggleMenuSlide(e);
            });
            self.page.loginButton.click(function(e) {
                loginController.login();
                return false;
            });

            self.page.menuButton.click(function(e) {
                e.preventDefault();
                self.toggleMenuSlide(e);
            });

            msgBus.subscribe("lo.logout", self.showUnauthenticatedView);
            msgBus.subscribe("lo.login", self.showAuthenticatedView);
            msgBus.subscribe("nav.hashchange", self.closeMenu);
            msgBus.subscribe("menu.shouldClose", self.closeMenu);

            //Removed - see card TO-585 - has performance impact
            //setTimeout(function() {
            //    self.loadData();
            //}, 500);
        };

        self.isOpen = function() {
            return self.page.isMenuOpen();
        };

        self.isAuthenticated = function() {
            return self.page.isAuthenticated();
        };

        self.closeMenu = function() {
            if (self.isOpen()) {
                self.page.closeMenu();
                self.toggleCashBetsNavigationElements(true);
            }
        };

        self.openMenu = function() {
            self.toggleCashBetsNavigationElements(false);
            if (self.isAuthenticated()) {
                self.showAuthenticatedView();
            } else {
                self.showUnauthenticatedView();
            }
            self.page.openMenu();
            self.loadData();
        };

        self.toggleCashBetsNavigationElements = function(value) {
            self.page.toggleCashBetsNavigationElements(value);
        };
        self.closer = function() {
            self.closeMenu();
            return false;
        };

        self.loadData = function() {
            //Insert loading indicators
            var container = jQuery(".bet-slip-container").find(".authenticated-view");
            container.find(".account-name").text("Loading...");
            container.find(".account-number").text("Loading...");
            container.find(".account-balance").text("Loading...");

            //Only make this call when the menu is opened for performance issues
            nav.ajaxGet(
                '/account/getaccountdetailsformenu',
                self.processData,
                { error: self.handleDataError });
        };

        self.processData = function(data) {
            if (data) {
                if (data.AccountNumber == 0) {
                    self.showUnauthenticatedView();
                }
                data.betSlipCount = betSlipService.getBetSlipCount();
                data.betWalletCount = betWalletService.getBetWalletCount();
                self.accountData = data;
                self.dataBind(self.accountData);
            }
        };

        self.handleDataError = function(status, xhr) {
            self.showUnauthenticatedView();
            self.toggleMenuSlide();
        };

        self.showAuthenticatedView = function() {
            self.page.showAuthenticatedView();
        };

        self.showUnauthenticatedView = function() {
            self.page.showUnauthenticatedView();
        };

        self.dataBind = function(data) {
            self.page.dataBind(data);
        };

        self.toggleMenuSlide = function(e) {
            if (self.isOpen()) {
                self.closeMenu();
            } else {
                self.openMenu();
            }
        };

        return self;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 84 */,
/* 85 */,
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(50), __webpack_require__(4), __webpack_require__(49)], __WEBPACK_AMD_DEFINE_RESULT__ = function (stateMachine, messageBus, immutable) {
    var intents = {
        navigateToRace: stateMachine.createIntent("NavigateToRace"),
        navigateBack: stateMachine.createIntent("Navigate Back"),
        pushHandlerTag: stateMachine.createIntent("PushHandlerTag"),
        popHandlerTag: stateMachine.createIntent("PopHandlerTag"),
        modalNavigateBack: stateMachine.createIntent("ModalNavigateBack")
    };

    function navigationDriver(state, intent) {
        state = state || immutable.OrderedMap();

        switch (intent.tag) {
            case intents.navigateToRace:
                {
                    if (intent.data.fixtureId !== null && intent.data.raceNumber !== null && intent.data.fixtureDate !== null) {
                        window.location.hash = "#tote/meetings/" + intent.data.fixtureId + "/" + intent.data.raceNumber + "?date=" + intent.data.fixtureDate;
                    }
                    break;
                }

            case intents.pushHandlerTag:
                {
                    return state.set(intent.data, intent.data);
                }

            case intents.popHandlerTag:
                {
                    return state.delete(intent.data);
                }

            case intents.modalNavigateBack:
                {
                    if (state.size > 0)
                        intents.navigateBack(state.last());
                }
        }

        return state;
    }

    intents.navigationState$ = stateMachine
        .attachDriver({ path: "navigation", driver: navigationDriver })
        .distinctUntilChanged();

    return intents;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(0)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
    return {
        initView: initView
    }

    function initView() {
        jQuery('body#home').removeAttr('id');
        jQuery('body').removeAttr('class');
        jQuery('html').attr('class', 'page-tabtrack');
        jQuery('.button.help').hide();
        jQuery('a#backButton').show().attr('href', '/#');
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 88 */,
/* 89 */
/***/ (function(module, exports) {

/*** IMPORTS FROM imports-loader ***/
(function() {

//
//  JockeyJS
//
//  Copyright (c) 2013, Tim Coulter
//
//  Permission is hereby granted, free of charge, to any person obtaining
//  a copy of this software and associated documentation files (the
//  "Software"), to deal in the Software without restriction, including
//  without limitation the rights to use, copy, modify, merge, publish,
//  distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to
//  the following conditions:
//
//  The above copyright notice and this permission notice shall be
//  included in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
//  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
//  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

;(function() {

    // Non-accessible variable to send to the app, to ensure events only
    // come from the desired host.
    var host = window.location.host;

    var Dispatcher = {
        callbacks: {},

        send: function(envelope, complete) {
            this.dispatchMessage("event", envelope, complete);
        },

        sendCallback: function(messageId) {
            var envelope = Jockey.createEnvelope(messageId);

            this.dispatchMessage("callback", envelope, function() {});
        },

        triggerCallback: function(id, data) {
            var dispatcher = this;

            // Alerts within JS callbacks will sometimes freeze the iOS app.
            // Let's wrap the callback in a timeout to prevent this.
            setTimeout(function() {
                dispatcher.callbacks[id](data);
            }, 0);
        },

        // `type` can either be "event" or "callback"
        dispatchMessage: function(type, envelope, complete) {
            // We send the message by navigating the browser to a special URL.
            // The iOS library will catch the navigation, prevent the UIWebView
            // from continuing, and use the data in the URL to execute code
            // within the iOS app.

            var dispatcher = this;

            this.callbacks[envelope.id] = function(data) {
                complete(data);

                delete dispatcher.callbacks[envelope.id];
            };

            var src = "jockey://" + type + "/" + envelope.id + "?" + encodeURIComponent(JSON.stringify(envelope));
            var iframe = document.createElement("iframe");
            iframe.setAttribute("src", src);
            document.documentElement.appendChild(iframe);
            iframe.parentNode.removeChild(iframe);
            iframe = null;
        }
    };

    var Jockey = {
        listeners: {},

        dispatcher: null,

        messageCount: 0,

        on: function(type, fn) {
            if (!(this.listeners.hasOwnProperty(type)) || !(this.listeners[type] instanceof Array)) {
                this.listeners[type] = [];
            }

            this.listeners[type].push(fn);
        },

        off: function(type) {
            if ((!this.listeners.hasOwnProperty(type)) || !(this.listeners[type] instanceof Array)) {
                this.listeners[type] = [];
            }

            this.listeners[type] = [];
        },

        send: function(type, payload, complete) {
            if (payload instanceof Function) {
                complete = payload;
                payload = null;
            }

            payload = payload || {};
            complete = complete || function() {};

            var envelope = this.createEnvelope(this.messageCount, type, payload);

            this.dispatcher.send(envelope, complete);

            this.messageCount += 1;
        },

        // Called by the native application when events are sent to JS from the app.
        // Will execute every function, FIFO order, that was attached to this event type.
        trigger: function(type, messageId, json) {
            var self = this;

            var listenerList = this.listeners[type] || [];

            var executedCount = 0;

            var complete = function() {
                executedCount += 1;

                if (executedCount >= listenerList.length) {
                    self.dispatcher.sendCallback(messageId);
                }
            };

            for (var index = 0; index < listenerList.length; index++) {
                var listener = listenerList[index];

                // If it's a "sync" listener, we'll call the complete() function
                // after it has finished. If it's async, we expect it to call complete().
                if (listener.length <= 1) {
                    listener(json);
                    complete();
                } else {
                    listener(json, complete);
                }
            }

        },

        // Called by the native application in response to an event sent to it.
        // This will trigger the callback passed to the send() function for
        // a given message.
        triggerCallback: function(data) {
            var dataObj = JSON.parse(data);
            this.dispatcher.triggerCallback(dataObj.messageId, dataObj.data);
        },

        createEnvelope: function(id, type, payload) {
            return {
                id: id,
                type: type,
                host: host,
                payload: payload
            };
        }
    };

    // i.e., on a Desktop browser.
    var nullDispatcher = {
        send: function(envelope, complete) {
            complete();
        },
        triggerCallback: function() {},
        sendCallback: function() {}
    };

    // Dispatcher detection. Currently only supports iOS.
    // Looking for equivalent Android implementation.
    var i = 0,
        iOS = false,
        iDevice = ["iPad", "iPhone", "iPod"];

    for (; i < iDevice.length; i++) {
        if (navigator.platform.indexOf(iDevice[i]) >= 0) {
            iOS = true;
            break;
        }
    }

    // Detect UIWebview. In Mobile Safari proper, jockey urls cause a popup to
    // be shown that says "Safari cannot open page because the URL is invalid."
    // From here: http://stackoverflow.com/questions/4460205/detect-ipad-iphone-webview-via-javascript

    var UIWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
    var isAndroid = navigator.userAgent.toLowerCase().indexOf("android") > -1;

    if ((iOS && UIWebView) || isAndroid) {
        Jockey.dispatcher = Dispatcher;
    } else {
        Jockey.dispatcher = nullDispatcher;
    }

    window.Jockey = Jockey;
})();


/*** EXPORTS FROM exports-loader ***/
module.exports = Jockey;
}.call(window));

/***/ }),
/* 90 */,
/* 91 */,
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var definedModules = {};
    window["webpackRequire"] = function (moduleNames, callback) {
        var moduleResults = [], numDeps = moduleNames.length, numDone = 0;
        var onHandlerDone = function () {
            numDone++;
            if (numDone === numDeps) {
                var args = [];
                moduleResults.forEach(function (obj) {
                    args.push(obj.result);
                });
                callback.apply(callback, args);
            }
        };
        moduleNames.forEach(function (moduleName) {
            var handler = get(moduleName);
            moduleResults.push({
                moduleName: moduleName,
                result: undefined
            });
            handler(function (result) {
                for (var idx = 0, len = moduleResults.length; idx < len; idx++) {
                    if (moduleResults[idx].moduleName === moduleName) {
                        moduleResults[idx].result = result;
                    }
                }
                onHandlerDone();
            });
        });
    };
    function get(moduleName) {
        if (moduleName in definedModules) {
            return definedModules[moduleName];
        }
        else {
            throw new Error("Module " + moduleName + " is not defined");
        }
    }
    exports.get = get;
    function define(moduleName, handler) {
        if (!("name" in definedModules)) {
            definedModules[moduleName] = handler;
        }
        else {
            throw new Error("Module " + moduleName + " is already defined");
        }
    }
    exports.define = define;
    var HandlerResult = (function () {
        function HandlerResult() {
        }
        return HandlerResult;
    }());
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 93 */,
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(203), __webpack_require__(352), __webpack_require__(202), __webpack_require__(200), __webpack_require__(209), __webpack_require__(207), __webpack_require__(205)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, AuthenticationViewModel, template) {
    ko.components.register('tt-authenticate', {
        viewModel: {
            createViewModel: function (params) {
                return new AuthenticationViewModel(params);
            }
        },
        template: template
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Handles Blackbook storage and API queries.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, amplify, locking) {
    var self = this;

    var _lockName = "myblackbook-service";
    var _storeKey = "myblackbook.compositeKeys";
    var _blackBookNames = null;
    var _pullPending = false;
    var _enabled = true;

    //can't use localstorage as user can close the browser while he was logged in and when he opens the browser again he is no longer logged in so should not show blackbook info.
    var _sessionStorage = function() {
        if (amplify.store.types.sessionStorage) {
            return amplify.store.sessionStorage;
        }
        return amplify.store.memory;
    }();;

    // prevent simultaneous calls to web service
    var _lock = locking.shared_lock(_lockName);

    // build composite key from black book item
    var _itemToCompositeKey = function(fixType, starterName) {
        return fixType[0] + jQuery.trim(starterName.toString().toUpperCase());
    };

    var _setBlackBookNames = function(values) {
        _blackBookNames = collections.multiset.withArray(values);
    };

    var _updateStore = function(value) {
        _sessionStorage(_storeKey, value);
    };

    var _getStore = function() {
        return _sessionStorage(_storeKey);
    };

    var _loadMemberShipSet = function(func) {
        if (_lock.trylock()) {
            jQuery.post(
                'account/blackbook/getmembershipset', {}
            )
            .done(function(data) {
                _setBlackBookNames(data.compositeKeys);
                _updateStore({ data: data.compositeKeys });
                _pullPending = false;
                func(self);
            })
            .always(function() {
                _lock.unlock();
            });
        }
    };

    var _getBlackBookNames = function(func) {
        if (_blackBookNames) {
            func(self);
            return;
        }

        var storedMsg = _getStore();
        if (storedMsg) {
            _setBlackBookNames(storedMsg.data);
            func(self);
            return;
        }

        if (!_pullPending) {
            _pullPending = true;
            _loadMemberShipSet(func);
        }
    };

    self.ready = function(func) {
        _pullPending = false;
        _getBlackBookNames(func);
    };

    self.entryCount = function(fixType, starterName) {
        return self.findEntryCount(_itemToCompositeKey(fixType, starterName));
    };

    self.findEntryCount = function(compositeKey) {
        if (_enabled && _blackBookNames) {
            return _blackBookNames.count(compositeKey);
        }
        return 0;
    };

    self.clear = function() {
        _blackBookNames = null;
        _pullPending = false;
        _updateStore(null);
    };

    return self;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery) {
        return {
            bind: function(controller, element) {
                jQuery(element)
                    .find('[data-on-click]')
                    .each(function() {
                        var data = jQuery(this).data("on-click").split(':');
                        var params = data.splice(1, data.length - 1);
                        jQuery(this)
                            .click(function(event) {
                                event.preventDefault();
                                controller[data[0]].apply(controller, params);
                            });
                    });

                var dataClass = jQuery(element).find('[data-class]');
                var dataVisible = jQuery(element).find('[data-visible]');

                controller.updateBindings = function() {
                    dataClass.each(function() {
                        var data = jQuery(this).data("class").split(':');
                        var params = data.splice(1, data.length - 1);
                        if (controller[params[0]]()) {
                            jQuery(this).addClass(data[0]);
                        } else {
                            jQuery(this).removeClass(data[0]);
                        }
                    });
                    dataVisible.each(function() {
                        var data = jQuery(this).data("visible").split(':');
                        var params = data.splice(1, data.length - 1);
                        if (controller[data[0]].apply(controller, params)) {
                            jQuery(this).show();
                        } else {
                            jQuery(this).hide();
                        }
                    });
                };
            }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * A controller class that has to be constructed and bound to a view.
 * 
 *  @return constructor
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(82), __webpack_require__(5), __webpack_require__(7), __webpack_require__(10), __webpack_require__(95)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, router, common, tabtouch, locking, blackBookService) {
    return function() {
        var self = this;

        self.model = null;
        self.baseUrl = '#account/blackbook';
        self.parentUrl = '#account';
        self.lock = new locking.lock();
        self.confirmDialog = new confirmation.Dialog(jQuery, common);

        self.sendSms = function() {
            return self.model.Details.SendSms;
        };

        self.sendEmail = function() {
            return self.model.Details.SendEmail;
        };

        self.isPage = function(id) {
            return self.model.Id == id;
        };

        self.pageNotFound = function() {
            var id = self.model.Id;
            if (id == 0) {
                return false;
            }
            if (self.model && self.model.Entries) {
                var entries = self.model.Entries;
                for (var i in entries) {
                    if (entries[i].BlackbookSeq == id) {
                        return false;
                    }
                }
            }
            return true;
        };

        self.setModel = function(model) {
            self.model = model;
        };

        self.setpage = function(id) {
            var href = '#account/blackbook?id=' + id;
            nav.nav(href);
            location.hash = href;
        };

        self.setsms = function() {
            var request = self.model.Details;
            if (request) {
                request.SendSms = !request.SendSms;
                self.setdetails(request);
            }
        };

        self.setemail = function() {
            var request = self.model.Details;
            if (request) {
                request.SendEmail = !request.SendEmail;
                self.setdetails(request);
            }
        };

        self.setdetails = function(request) {
            if (self.lock.trylock()) {
                nav.ajaxPost(
                    'account/blackbook/setdetails',
                    jQuery.param(request),
                    function(data) {
                        self.model.Details = data.result;
                        self.updateView();
                        self.lock.unlock();
                    },
                    {
                        error: function(xhr, textStatus) {
                            self.lock.unlock();
                        }
                    });
            }
        };

        self.remove = function(id) {
            self.confirmDialog.show("Are you sure you want to delete Blackbook entry?", function() {
                var href = '#account/blackbook/remove?blackBookSeq=' + id;
                nav.nav(href);
            });
        };

        self.removeall = function() {
            self.confirmDialog.show("Are you sure you want to delete all Blackbook entries?", function() {
                nav.nav('/#account/blackbook/removeall');
            });
        };

        self.get = function(url) {
            var param = /\?id=(\d+)$/.exec(url);
            self.model.Id = param ? param[1] : 0;
            self.updateView();
        };

        self.initView = function() {
            blackBookService.clear();
            if (self.model.Id) {
                tabtouch.initCommon(self.baseUrl, "Back");
            } else {
                tabtouch.initCommon(self.parentUrl, "Account");
            }
            self.updateView();

            router.addRoute('^account/blackbook$', '^account/blackbook\\?id=\\d+$', function(url) {
                window.setTimeout(function() {
                    self.get(url);
                }, 0);
            });
            router.addRoute('^account/blackbook\\?id=\\d+$', '^account/blackbook$', function(url) {
                window.setTimeout(function() {
                    self.get(url);
                }, 0);
            });
        };

        self.updateView = function() {
            if (self.updateBindings) {
                self.updateBindings();
            }

            if (self.model.Id) {
                nav.setBackUrl(self.baseUrl);
                nav.resetBack("Back");
            } else {
                nav.setBackUrl(self.parentUrl);
                nav.resetBack("Account");
            }
        };

        return self;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(1)
        , __webpack_require__(210)
        , __webpack_require__(356)
        , __webpack_require__(213)
        , __webpack_require__(358)
        , __webpack_require__(212)
        , __webpack_require__(357)

    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        ko,
        amountinputViewModel,
        amountinputTpl,
        numberpadViewModel,
        numberpadTpl,
        calculatorViewModel,
        calculatorTpl
    ) {
    if (!ko.components.isRegistered("amountinput")) {
        ko.components.register("amountinput", {
            viewmodel: amountinputViewModel,
            template: amountinputTpl
        });
    }
    if (!ko.components.isRegistered("numberpad")) {
        ko.components.register("numberpad", {
            viewModel: numberpadViewModel,
            template: numberpadTpl
        });
    }
    if (!ko.components.isRegistered("calculator")) {
        ko.components.register("calculator", {
            viewModel: calculatorViewModel,
            template: calculatorTpl
        });
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(214), __webpack_require__(216)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, betTypeViewModel, optionViewModel) {
    function betTypeComponentViewModel(viewModel) {
        var self = this;

        _.bindAll(self, "UpdateActiveBetType");

        var betTypeViewModels = [];
        betTypeViewModels.push(new betTypeViewModel
            (
                "WinPlace",
                "Win & Place",
                [new optionViewModel(1, 1, "Tote only, 1 starter, Win and/or Place investment"),
                    new optionViewModel(2, 2, "Tote only, 2 starters, Win and/or Place investment"),
                    new optionViewModel(3, 3, "Tote only, 3 starters, Win and/or Place investment"),
                    new optionViewModel(4, 4, "Tote only, 4 starters, Win and/or Place investment"),
                    new optionViewModel(5, 5, "Tote only, 5 starters, Win and/or Place investment")
                ],
                1,
                _.contains(viewModel.DisabledMysteryProducts, "WinPlace")
            )
        );
        betTypeViewModels.push(new betTypeViewModel
            (
                "Quinella",
                "Quinella",
                [   new optionViewModel(1, 1, "2 starters any order"),
                    new optionViewModel(2, 2, "1 starter for 1st, 1 of 2 starters for 2nd"),
                    new optionViewModel(3, 3, "3 starters any order"),
                    new optionViewModel(4, 6, "4 starters any order"),
                    new optionViewModel(5, 10, "5 starters any order"),
                    new optionViewModel(6, 15, "6 starters any order"),
                    new optionViewModel(7, 21, "7 starters any order")
                ],
                1,
                _.contains(viewModel.DisabledMysteryProducts, "Quinella")
            )
        );
        betTypeViewModels.push(new betTypeViewModel
            (
                "Exacta",
                "Exacta",
                [   new optionViewModel(1, 1, "2 starters in order"),
                    new optionViewModel(2, 2, "1 starter with 2 starters"),
                    new optionViewModel(3, 6, "3 starters any order"),
                    new optionViewModel(4, 12, "4 starters any order"),
                    new optionViewModel(5, 20, "5 starters any order"),
                    new optionViewModel(6, 30, "6 starters any order"),
                    new optionViewModel(7, 42, "7 starters any order")
                ],
                1,
                _.contains(viewModel.DisabledMysteryProducts, "Exacta")
            )
        );
        betTypeViewModels.push(new betTypeViewModel
            (
                "Trifecta",
                "Trifecta",
                [   new optionViewModel(1, 1, "1st, 2nd and 3rd in order"),
                    new optionViewModel(2, 2, "1 first, 2 and 3 any order"),
                    new optionViewModel(3, 6, "1, 2, 3 any order"),
                    new optionViewModel(4, 24, "3 of 4 any place or order"),
                    new optionViewModel(5, 60, "3 of 5 any place or order"),
                    new optionViewModel(6, 120, "3 of 6 any place or order"),
                    new optionViewModel(7, 36, "1 of 2 starters 1st, 1 of 4 2nd, 1 of 8 3rd")
                ],
                2,
                _.contains(viewModel.DisabledMysteryProducts, "Trifecta")
            )
        );
        betTypeViewModels.push(new betTypeViewModel
            (
                "First4",
                "First 4",
                [   new optionViewModel(1, 1, "1st, 2nd, 3rd and 4th in order"),
                    new optionViewModel(2, 2, "1 starter 1st, 1 starter 2nd, 2 other starters 3rd or 4th in any order"),
                    new optionViewModel(3, 6, "1 starter 1st, 3 other starters 2nd, 3rd or 4th in any order"),
                    new optionViewModel(4, 24, "1st, 2nd, 3rd and 4th in any order"),
                    new optionViewModel(5, 120, "Any 4 of 5 starters to come 1st, 2nd, 3rd and 4th in any order"),
                    new optionViewModel(6, 360, "Any 4 of 6 starters to come 1st, 2nd, 3rd and 4th in any order"),
                    new optionViewModel(7, 36, "2 of 3 starters to come 1st or 2nd and 2 of 3 starters to come 3rd or 4th")
                ],
                1,
                _.contains(viewModel.DisabledMysteryProducts, "First4")
            )
        );
        if (viewModel.DisplayQuaddie) {
            betTypeViewModels.push(new betTypeViewModel
                (
                    "Quaddie",
                    "Quaddie (" + viewModel.QuaddieRaceNumbers.join() + ")",
                    [
                        new optionViewModel(1, 1, "1 starter in all four legs"),
                        new optionViewModel(2, 2, "2 starters in first leg, 1 starter in remaining three legs"),
                        new optionViewModel(3, 8, "2 starters in first three legs, 1 starter in fourth leg"),
                        new optionViewModel(4, 16, "2 starters in all four legs"),
                        new optionViewModel(5, 36, "3 starters in first two legs, 2 starters in remaining two legs"),
                        new optionViewModel(6, 81, "3 starters in all four legs"),
                        new optionViewModel(7, 256, "4 starters in all four legs")
                    ],
                    1,
                    _.contains(viewModel.DisabledMysteryProducts, "Quaddie")
                )
            );
        }
        //Combo has been asked to remove from BetTypes
        //betTypeViewModels.push(new betTypeViewModel
        //    (
        //        "Combo",
        //        "Combo",
        //        [   new optionViewModel(3, 3, "Option 3", "1st Win, 1st & 2nd In Order Exacta, 1st & 2nd & 3rd In Order Trifecta"),
        //            new optionViewModel(10, 10, "Option 10", "1st Win, 1st & 2nd Any Order Quinella, 1st & 2nd & 3rd Any Order Trifecta")
        //        ],
        //        3,
        //        _.contains(viewModel.DisabledMysteryProducts, "Combo")    //this needs to be fixed as only one of the option of combo can be disabled
        //    )
        //);

        self.BetTypes = ko.observableArray(betTypeViewModels);
        self.ActiveBetType = ko.observable();

        //set initial active
        var defaultSelectedBetType = _.find(self.BetTypes(), function (betTypeVm) {
            if (!betTypeVm.IsDisabled && betTypeVm.Type === "Trifecta") {
                return true;
            }
        });
        //defaultSelectedBetType can be null if Trifecta pool is not available for selected race
        if (defaultSelectedBetType == undefined) {
            //then select the first available betType. Note: There always be atleast one pool avaialable for any race as Phoenix doesn't allow race without any pool.
            defaultSelectedBetType = _.find(self.BetTypes(), function (betTypeVm) {
                if (!betTypeVm.IsDisabled) {
                    return true;
                }
            });
        }
        self.ActiveBetType(defaultSelectedBetType);
        self.ActiveBetType().IsActive(true);
    }

    _.extend(betTypeComponentViewModel.prototype, {
        UpdateActiveBetType: function (selectedBetType) {
            //if selectedBetType is disabled than don't select it
            if (selectedBetType.IsDisabled) {
                return;
            }
            var self = this;
            //make current one de-active
            if (self.ActiveBetType() !== undefined) {
                self.ActiveBetType().IsActive(false);
            }
            //assign new one
            self.ActiveBetType(selectedBetType);
            //activate new one
            self.ActiveBetType().IsActive(true);
        }
    });

    return betTypeComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(0), __webpack_require__(45), __webpack_require__(99), __webpack_require__(101), __webpack_require__(72), __webpack_require__(71)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, jQuery, rwwaMath, betTypesComponentViewModel, optionsComponentViewModel, numberOfBetsComponentViewModel, betAmountViewModel) {
    function customiseBetPageComponentViewModel (viewModel) {
        var self = this;
        self.ActiveCalculator = ko.observable();
        self.FlexiPercent = ko.observable(0);

        /* private functions ====================================================================================================== */
        var updateProductCode = function () {
                viewModel.ProductCode(self.BetTypesComponentViewModel.ActiveBetType().Type);
        };

        var updateOptionNumber = function () {
                viewModel.OptionNumber(self.OptionsComponentViewModel.ActiveOption().OptionNumber);
        };

        var updateNumberOfBets = function () {
            viewModel.NumberOfBets(self.NumberOfBetsComponentViewModel.ActiveNumberOfBets().Value);
        };

        var updateInvestment = function () {
            if (self.BetTypesComponentViewModel.ActiveBetType().Type === "WinPlace") {
                viewModel.Investment(self.BetAmountViewModelForWin.Amount());
                viewModel.PlaceInvestment(self.BetAmountViewModelForPlace.Amount());
            }
            else if (self.BetTypesComponentViewModel.ActiveBetType().Type === "Combo") {
                viewModel.Investment(self.BetAmountViewModelForCombo.Amount());
                viewModel.PlaceInvestment(0);
            }
            else {
                viewModel.Investment(self.BetAmountViewModelForFourBetType.Amount());
                viewModel.PlaceInvestment(0);
            }
        };
        //flexi only displayed for four bet types

        var updateFlexi = function () {
            var numberOfCombinations = self.OptionsComponentViewModel.ActiveOption().NumberOfCombinations;
            var betCost = self.BetAmountViewModelForFourBetType.Amount();
            var flexiPercentage = (Math.floor(((betCost * 100) / numberOfCombinations) * 100)) / 100;
            self.FlexiPercent(flexiPercentage + '%');
        };
        var updateButtons = function (totalCost) {
            var enabledButtons = (totalCost > 0);
            viewModel.AccountButtonDisabled(!enabledButtons);
            viewModel.CashButtonDisabled(!enabledButtons);
            viewModel.BetSlipButtonDisabled(!enabledButtons);
            //CMN.setDisableState(jQuery('#mystery-bet'), enabledButtons);
        };
        /* end private functions ====================================================================================================== */

        var updateTotalCost = function () {
            var noOfInputs = self.NumberOfBetsComponentViewModel.ActiveNumberOfBets().Value;
            var betCost;
            if (self.BetTypesComponentViewModel.ActiveBetType().Type === "WinPlace") {
                var winCost = self.BetAmountViewModelForWin.Amount() * self.OptionsComponentViewModel.ActiveOption().NumberOfCombinations;
                var placeCost = self.BetAmountViewModelForPlace.Amount() * self.OptionsComponentViewModel.ActiveOption().NumberOfCombinations;
                betCost = winCost + placeCost;
            }
            else if (self.BetTypesComponentViewModel.ActiveBetType().Type === "Combo") {
                betCost = self.BetAmountViewModelForCombo.Amount() * self.OptionsComponentViewModel.ActiveOption().NumberOfCombinations;
            }
            else {
                betCost = self.BetAmountViewModelForFourBetType.Amount();
            }

            //updateInvestment(betCost);
            var totalCost = betCost * parseInt(noOfInputs);
            var totalCostString = rwwaMath.toMoney(totalCost, 2);
            viewModel.TotalCost(totalCostString);

            //update buttons
            updateButtons(totalCost);
        };

        self.HideActiveCalculator = function () {
            if (self.ActiveCalculator() != undefined) {
                self.ActiveCalculator().HideNumberPad();
            }
        }

        self.ActivateCalculator = function (selectedCalculator) {
            //hide current active formula calculator as well
            self.HideActiveCalculator();
            //activate new one
            self.ActiveCalculator(selectedCalculator);
            self.ActiveCalculator().ShowNumberPad();
        }

        //bet types
        self.BetTypesComponentViewModel = new betTypesComponentViewModel({ DisplayQuaddie: viewModel.DisplayQuaddie, QuaddieRaceNumbers: viewModel.QuaddieRaceNumbers, DisabledMysteryProducts: viewModel.DisabledMysteryProducts });
        self.BetTypesComponentViewModel.ActiveBetType.subscribe(function (newValue) {
            self.OptionsComponentViewModel.UpdateOptions(self.BetTypesComponentViewModel.ActiveBetType().Options, self.BetTypesComponentViewModel.ActiveBetType().DefaultOptionNumber);
            updateProductCode();
            updateInvestment();
            updateTotalCost();
        });

        //options
        var optionFromDefaltSelectedBetType = self.BetTypesComponentViewModel.ActiveBetType().Options;  //by default we select Trifecta in BetTypes component
        self.OptionsComponentViewModel = new optionsComponentViewModel(optionFromDefaltSelectedBetType);
        self.OptionsComponentViewModel.ActiveOption.subscribe(function (newValue) {
            updateOptionNumber();
            updateFlexi();
            updateTotalCost();
        });

        //Number Of Bets
        self.NumberOfBetsComponentViewModel = new numberOfBetsComponentViewModel(5);
        self.NumberOfBetsComponentViewModel.ActiveNumberOfBets.subscribe(function (newValue) {
            updateNumberOfBets();
            updateTotalCost();
        });
            
        //Calculators
        var betAmountModelInstance = new betAmountViewModel(0, 0, 99999.5, 0.5);
        self.BetAmountViewModelForFourBetType = betAmountModelInstance;
        self.BetAmountViewModelForFourBetType.Amount.subscribe(function (newValue) {
            updateInvestment();
            updateFlexi();
            updateTotalCost();
        });
        var betAmountModelForWin = new betAmountViewModel(0, 0, 99999.5, 0.5);
        self.BetAmountViewModelForWin = betAmountModelForWin;
        self.BetAmountViewModelForWin.Amount.subscribe(function (newValue) {
            updateInvestment();
            updateTotalCost();
        });
        var betAmountModelForPlace = new betAmountViewModel(0, 0, 99999.5, 0.5);
        self.BetAmountViewModelForPlace = betAmountModelForPlace;
        self.BetAmountViewModelForPlace.Amount.subscribe(function (newValue) {
            updateInvestment();
            updateTotalCost();
        });
        var betAmountModelForCombo = new betAmountViewModel(0, 0, 99999.5, 0.5);
        self.BetAmountViewModelForCombo = betAmountModelForCombo;
        self.BetAmountViewModelForCombo.Amount.subscribe(function (newValue) {
            updateInvestment();
            updateTotalCost();
        });

        self.UpdatePage = function () {
            updateProductCode();
            updateOptionNumber();
            updateNumberOfBets();
            updateInvestment();
            updateFlexi();
            updateTotalCost();

            //ToDo: remove below temp code once we have cash functionality working
            viewModel.CashButtonVisible(false);
            viewModel.BetSlipButtonVisible(false);
        };

        //select default option for selected bettype
        var defaultOptionToselect = _.find(optionFromDefaltSelectedBetType, function (optionVm) {
            if (optionVm.OptionNumber === self.BetTypesComponentViewModel.ActiveBetType().DefaultOptionNumber) {
                return true;
            }
        });
        self.OptionsComponentViewModel.UpdateActiveOption(defaultOptionToselect);            
    }

    return customiseBetPageComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, _) {
    function optionsComponentViewModel(optionViewModels) {
        var self = this;

        _.bindAll(self, "UpdateActiveOption", "UpdateOptions");

        self.OptionViewModels = ko.observableArray(optionViewModels);
        self.ActiveOption = ko.observable();

        //set initial active
        self.ActiveOption(_.first(optionViewModels));
        self.ActiveOption().IsActive(true);
    }

    _.extend(optionsComponentViewModel.prototype, {
        UpdateActiveOption: function(selectedOption) {
            var self = this;
            //make current one de-active
            if (self.ActiveOption() !== undefined) {
                self.ActiveOption().IsActive(false);
            }
            //assign new one
            self.ActiveOption(selectedOption);
            //activate new one
            self.ActiveOption().IsActive(true);
        },
        UpdateOptions: function(newOptions, defaultSelectedOptionNumber) {
            var self = this;
            self.OptionViewModels(newOptions);
            //select default one
            var defaultOption = _.find(newOptions, function (optionVm) {
                if (optionVm.OptionNumber === defaultSelectedOptionNumber) {
                    return true;
                }
            });
            self.UpdateActiveOption(defaultOption);
        }
    });

    return optionsComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(45), __webpack_require__(8), __webpack_require__(103), __webpack_require__(72)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, rwwaMath, preferencesService, quickPicksComponentViewModel, numberOfBetsComponentViewModel) {
    function quickPickPageComponentViewModel (viewModel) {
        var self = this;

        /* private functions ====================================================================================================== */
        var updateQuickPickValues = function () {
            //ActiveQuickPick can be null initially if Trifecta pool is not available for selected race
            if (self.QuickPicksComponentViewModel.ActiveQuickPick() != undefined) {
                viewModel.ProductCode(self.QuickPicksComponentViewModel.ActiveQuickPick().Type);
                viewModel.OptionNumber(self.QuickPicksComponentViewModel.ActiveQuickPick().OptionNumber);
                viewModel.Investment(self.QuickPicksComponentViewModel.ActiveQuickPick().InvestmentAmount);
            }
            viewModel.PlaceInvestment(0); //PlaceInvestment is 0 for quickpick
        };
        var updateNumberOfBets = function () {
            viewModel.NumberOfBets(self.NumberOfBetsComponentViewModel.ActiveNumberOfBets().Value);
        };
        var updateButtons = function (totalCost) {
            var enabledButtons = (totalCost > 0);
            viewModel.AccountButtonDisabled(!enabledButtons);
            viewModel.CashButtonDisabled(!enabledButtons);
            viewModel.BetSlipButtonDisabled(!enabledButtons);
            //CMN.setDisableState($('#mystery-bet'), enabledButtons);
        };
        var updateTotalCost = function () {
            var noOfInputs = self.NumberOfBetsComponentViewModel.ActiveNumberOfBets().Value;
            var totalCost = 0;
            //ActiveQuickPick can be null initially if Trifecta pool is not available for selected race
            if (self.QuickPicksComponentViewModel.ActiveQuickPick() != undefined) {
                var betCost = self.QuickPicksComponentViewModel.ActiveQuickPick().Cost;
                totalCost = betCost * parseInt(noOfInputs);
            }
            var totalCostString = rwwaMath.toMoney(totalCost, 2);
            viewModel.TotalCost(totalCostString);
            updateButtons(totalCost);
        };
        /* end private functions ====================================================================================================== */

        self.QuickPicksComponentViewModel = new quickPicksComponentViewModel(viewModel.DisabledMysteryProducts);
        self.QuickPicksComponentViewModel.ActiveQuickPick.subscribe(function (newValue) {
            updateQuickPickValues();
            updateTotalCost();
        });

        //Number Of Bets
        self.NumberOfBetsComponentViewModel = new numberOfBetsComponentViewModel(5);
        self.NumberOfBetsComponentViewModel.ActiveNumberOfBets.subscribe(function (newValue) {
            updateNumberOfBets();
            updateTotalCost();
        });
        
        self.UpdatePage = function () {
            updateQuickPickValues();
            updateNumberOfBets();
            updateTotalCost();

            //ToDo: remove below temp code once we have cash functionality working
            var cashBettingEnabled = preferencesService.cashBettingEnabled();
            viewModel.CashButtonVisible(cashBettingEnabled);
            viewModel.BetSlipButtonVisible(true);
        };

    }

    return quickPickPageComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(217)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, quickPickViewModel) {
    function quickPickComponentViewModel (disabledMysteryProducts) {
        var self = this;

        _.bindAll(self, "UpdateActiveQuickPick");

        var quickPickViewModels = [];
        quickPickViewModels.push(new quickPickViewModel("Combo", "COMBO", 3, 1, 3, _.contains(disabledMysteryProducts, "$3 Combo")));
        quickPickViewModels.push(new quickPickViewModel("Trifecta", "TRIFECTA CLASSIC", 2, 1, 1, _.contains(disabledMysteryProducts, "Trifecta")));
        quickPickViewModels.push(new quickPickViewModel("Combo", "COMBO", 10, 1, 10, _.contains(disabledMysteryProducts, "$10 Combo")));
        quickPickViewModels.push(new quickPickViewModel("Trifecta", "MYSTERY TRIFECTA", 3, 3, 3, _.contains(disabledMysteryProducts, "Trifecta")));
        quickPickViewModels.push(new quickPickViewModel("First4", "FIRST 4 CLASSIC", 2, 1, 1, _.contains(disabledMysteryProducts, "First4")));
        quickPickViewModels.push(new quickPickViewModel("Trifecta", "MYSTERY TRIFECTA", 3, 6, 6, _.contains(disabledMysteryProducts, "Trifecta")));

        self.QuickPicks = ko.observableArray(quickPickViewModels);
        self.ActiveQuickPick = ko.observable();

        //set initial active
        var defaultSelectedQuickPick = _.find(self.QuickPicks(), function (quickPickVm) {
            if (!quickPickVm.IsDisabled && quickPickVm.Type === "Trifecta" && quickPickVm.OptionNumber === 2) {
                return true;
            }
        });
        //defaultSelectedQuickPick can be null if Trifecta pool is not available for selected race
        if (defaultSelectedQuickPick != undefined) {
            self.ActiveQuickPick(defaultSelectedQuickPick);
            self.ActiveQuickPick().IsActive(true);
        }
    }

    _.extend(quickPickComponentViewModel.prototype, {
        UpdateActiveQuickPick: function (selectedQuickPick) {
            //if selectedQuickPick is disabled than don't select it
            if (selectedQuickPick.IsDisabled) {
                return;
            }
            var self = this;
            //make current one de-active
            if (self.ActiveQuickPick() !== undefined) {
                self.ActiveQuickPick().IsActive(false);
            }
            //assign new one
            self.ActiveQuickPick(selectedQuickPick);
            //activate new one
            self.ActiveQuickPick().IsActive(true);
        }
    });

    return quickPickComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(218)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, tabViewModel) {
    function tabsComponentViewModel(tabNamesArray) {
        var self = this;

        _.bindAll(self, "UpdateActiveTab");

        var tabViewModels = [];
        _.each(tabNamesArray, function (tabName) {
            tabViewModels.push(new tabViewModel(tabName));
        });

        self.TabViewModels = ko.observableArray(tabViewModels);
        self.ActiveTab = ko.observable();

        //set initial active
        self.ActiveTab(_.first(tabViewModels));
        self.ActiveTab().IsActive(true);
    }

    _.extend(tabsComponentViewModel.prototype, {
        UpdateActiveTab: function (selectedTab) {
            var self = this;
            //make current one de-active
            if (self.ActiveTab() !== undefined) {
                self.ActiveTab().IsActive(false);
            }
            //assign new one
            self.ActiveTab(selectedTab);
            //activate new one
            self.ActiveTab().IsActive(true);
        }
    });

    return tabsComponentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(1)
        , __webpack_require__(104)
        , __webpack_require__(365)
        , __webpack_require__(102)
        , __webpack_require__(364)
        , __webpack_require__(100)
        , __webpack_require__(360)
        , __webpack_require__(103)
        , __webpack_require__(363)
        , __webpack_require__(72)
        , __webpack_require__(361)
        , __webpack_require__(99)
        , __webpack_require__(359)
        , __webpack_require__(101)
        , __webpack_require__(362)

    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
        ko,
        tabsViewModel,
        tabsTpl,
        quickpickpageViewModel,
        quickpickpageTpl,
        customisebetpageViewModel,
        customisebetpageTpl,
        quickpicksViewModel,
        quickpicksTpl,
        numberofbetsViewModel,
        numberofbetsTpl,
        bettypesViewModel,
        bettypesTpl,
        optionsViewModel,
        optionsTpl
    ) {
    if (!ko.components.isRegistered("mysterybet-tabs")) {
        ko.components.register("mysterybet-tabs", {
            viewmodel: tabsViewModel,
            template: tabsTpl
        });
    }
    if (!ko.components.isRegistered("mysterybet-quickpickpage")) {
        ko.components.register("mysterybet-quickpickpage", {
            viewmodel: quickpickpageViewModel,
            template: quickpickpageTpl
        });
    }
    if (!ko.components.isRegistered("mysterybet-customisebetpage")) {
        ko.components.register("mysterybet-customisebetpage", {
            viewmodel: customisebetpageViewModel,
            template: customisebetpageTpl
        });
    }
    if (!ko.components.isRegistered("mysterybet-quickpicks")) {
        ko.components.register("mysterybet-quickpicks", {
            viewmodel: quickpicksViewModel,
            template: quickpicksTpl
        });
    }
    if (!ko.components.isRegistered("mysterybet-numberofbets")) {
        ko.components.register("mysterybet-numberofbets", {
            viewmodel: numberofbetsViewModel,
            template: numberofbetsTpl
        });
    }
    if (!ko.components.isRegistered("mysterybet-bettypes")) {
        ko.components.register("mysterybet-bettypes", {
            viewmodel: bettypesViewModel,
            template: bettypesTpl
        });
    }
    if (!ko.components.isRegistered("mysterybet-options")) {
        ko.components.register("mysterybet-options", {
            viewmodel: optionsViewModel,
            template: optionsTpl
        });
    }
    //if (!ko.components.isRegistered("mysterybet-flexidisplay")) {
        //ko.components.register("mysterybet-flexidisplay", {
        //    viewmodel: { require: './Model/flexidisplay-component-viewmodel' },
        //    template: { require: "text-loader!./View/flexidisplay.tmpl.html" }
        //});
    //}
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return {
        today: getToday,
        now: getNow
    }

    function getToday() {
        var date = new Date();
        date.setHours(0, 0, 0, 0);
        return date;
    }

    function getNow() {
        return Date.now();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(45)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, rwwaMath) {
    ko.bindingHandlers.currency = {
        symbol: ko.observable('$'),
        update: function(element, valueAccessor, allBindingsAccessor){
            return ko.bindingHandlers.text.update(element,function(){
                var value = +(ko.utils.unwrapObservable(valueAccessor()) || 0),
                    symbol = ko.utils.unwrapObservable(allBindingsAccessor().symbol === undefined ? ko.bindingHandlers.currency.symbol : allBindingsAccessor().symbol);
                return rwwaMath.toMoney(value,2,symbol);
            });
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 108 */,
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko) {
    ko.bindingHandlers.scrollTo = {
        update: function (element, valueAccessor, allBindings) {
            var _value = valueAccessor();
            var _valueUnwrapped = ko.unwrap(_value);
            if (_valueUnwrapped) {
                element.scrollIntoView();
            }
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(1), 
        __webpack_require__(0), 
        __webpack_require__(3), 
        __webpack_require__(239), 
        __webpack_require__(64), 
        __webpack_require__(22), 
        __webpack_require__(4), 
        __webpack_require__(83), 
        __webpack_require__(237), 
        __webpack_require__(236),
        __webpack_require__(71),
        __webpack_require__(240),
        __webpack_require__(8),
        __webpack_require__(2),
        __webpack_require__(29),
        __webpack_require__(224),
        __webpack_require__(221)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, jQuery, nav, formulaViewModel, MultiViewModel, loggingService, msgBusService, rightMenu, multiFormulaSummaryBuilder, multiStore, betAmountViewModel, multiFormulaViewModel, preferencesService, _) {

        function MultiInvestmentViewModel(viewModel) {

            var self = this;

            /* observables */
            self.multiInvestmentInput = ko.observable(0).extend({ pattern: /^0?([1-9]\d{0,4})?(\.\d?)?$/ });
            self.multiInvestmentAmount = ko.pureComputed(function() { return 0.5 * Math.floor(Math.min(99999.5, Math.max(0, self.multiInvestmentInput())) / 0.5); });
            self.multiFormulaInvestments = ko.observableArray([]);
            self.numberOfCombinations = ko.observable(0);
            self.projectedPay = ko.observable(0);
            self.accountBettingIsEnabled = ko.observable();
            self.totalCost = ko.observable(0);
            self.multiFormulaVisible = ko.observable(false);
            self.illegalMultiFormulaLegCount = ko.observable(false);
            self.mySelectionsSectionVisible = ko.observable(false);
            self.multiFormulaSectionVisible = ko.observable(false);
            self.calculatorIsOpen = ko.observable(false);
            self.multiFormulaInFocus = ko.observable(false);
            self.cashBettingIsEnabled = ko.observable();
            self.multiFormulaCashWarningVisible = ko.observable();
            self.singleFormulaOnly = ko.observable();
            self.hasLiveBettingLeg = ko.observable(false);
            self.legNumberLimitWarnigMessage = "Multi Formula is only available for bets that contain between 2 and 6 legs.";   //Not observable
            self.liveBettingWithCashWarningVisible = ko.observable();
            self.cashBettingIsVisible = ko.observable();
            self.buttonsVisible = ko.observable(false);
            self.useNewLookCalculator = false;
            self.multiBetType = ko.observable();

            /* private vars */ // construct and initialise multiViewModel
            MultiViewModel.call(self, {
                backUrl: "multi/calc/back",
                backText: "Back"
            });

            self.popRightMenu = function () {
                nav.scrollTo('#top');
                rightMenu.openMenu();
            }

            self.showCalculator = function(data, event) {
                _.each(self.multiFormulaInvestments(), function(viewModel) {
                    if (viewModel().FormulaNumber() === data.FormulaNumber()) {
                        viewModel().ShowCalculator();
                        if (self.calculatorIsOpen() === true) {
                            viewModel().SetCalculatorPresetMode(false);
                        }
                    } else {
                        viewModel().HideCalculator();
                    }
                });
                self.calculatorIsOpen(true);
                self.multiFormulaInFocus(false);
                self.multiFormulaInFocus(true);
            }

            self.showNextCalculator = function(data, event) {
                if (data.FormulaNumber() < self.multiFormulaInvestments().length) {
                    _.each(self.multiFormulaInvestments(), function(viewModel) {
                        if (viewModel().FormulaNumber() === data.FormulaNumber()) {
                            viewModel().HideCalculator();
                        } else {
                            if (viewModel().FormulaNumber() === data.FormulaNumber() + 1)
                                viewModel().ShowCalculator();
                                viewModel().SetCalculatorPresetMode(false);
                        }
                    });
                    self.calculatorIsOpen(true);
                    self.multiFormulaInFocus(false);
                    self.multiFormulaInFocus(true);
                }
            }

            self.showPreviousCalculator = function(data, event) {
                if (data.FormulaNumber() > 1) {
                    _.each(self.multiFormulaInvestments(), function(viewModel) {
                        if (viewModel().FormulaNumber() === data.FormulaNumber()) {
                            viewModel().HideCalculator();
                        } else {
                            if (viewModel().FormulaNumber() === data.FormulaNumber() - 1)
                                viewModel().ShowCalculator();
                                viewModel().SetCalculatorPresetMode(false);
                        }
                    });
                    self.calculatorIsOpen(true);
                    self.multiFormulaInFocus(false);
                    self.multiFormulaInFocus(true);
                }
            }

            //for new formula models =====

            /* private function */
            var hideActiveFormulaCalculator = function () {
                if (self.ActiveFormulaViewModel != undefined) {
                    self.ActiveFormulaViewModel.BetAmountViewModel.HideNumberPad();
                    self.calculatorIsOpen(false);
                }
            }

            /* private function */
            var hideOtherSingleCalculators = function () {
                self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.HideNumberPad();
                self.BetAmountViewModelForMultiInvestmentWhenFormulaDisable.HideNumberPad();
                self.calculatorIsOpen(false);
            }

            /* private function */
            var setActiveFormula = function (formulaNumberToShow) {
                //hide current one first
                self.ActiveFormulaViewModel.BetAmountViewModel.HideNumberPad();
                self.calculatorIsOpen(false);
                //set new one
                var formulaToShow = _.find(self.multiFormulaInvestments(), function (formulaVM) {
                    if (formulaVM().FormulaNumber === formulaNumberToShow) {
                        return true;
                    }
                });
                self.ActiveFormulaViewModel = formulaToShow();
                //show new one
                self.ActiveFormulaViewModel.BetAmountViewModel.ShowNumberPad();
                self.calculatorIsOpen(true);
            }

            self.activateFormula = function (selectedFormulaViewModel) {
                //make sure other calcs on same page are hidden
                hideOtherSingleCalculators();
                //hide current active formula calculator as well
                hideActiveFormulaCalculator();
                //activate new one
                self.ActiveFormulaViewModel = selectedFormulaViewModel;
                self.ActiveFormulaViewModel.BetAmountViewModel.ShowNumberPad();
                self.calculatorIsOpen(true);
            }

            self.activatePreviousFormula = function () {
                if (self.ActiveFormulaViewModel != undefined && self.ActiveFormulaViewModel.FormulaNumber > 1) {
                    var previousFormulaNumber = self.ActiveFormulaViewModel.FormulaNumber - 1;
                    setActiveFormula(previousFormulaNumber);
                }
            }

            self.activateNextFormula = function () {
                if (self.ActiveFormulaViewModel != undefined && self.ActiveFormulaViewModel.FormulaNumber < self.multiFormulaInvestments().length) {
                    var nextFormulaNumber = self.ActiveFormulaViewModel.FormulaNumber + 1;
                    setActiveFormula(nextFormulaNumber);
                }
            }
            //===============================

            self.closeCalc = function() {
                
                if (self.useNewLookCalculator) {
                    hideOtherSingleCalculators();
                    hideActiveFormulaCalculator();
                } else {
                    _.each(self.multiFormulaInvestments(), function (viewModel) {
                        viewModel().HideCalculator();
                    });
                }
                self.calculatorIsOpen(false);
                self.multiFormulaInFocus(false);
                saveInvestments();
            }

            self.calcClear = function(calcTarget, event) {
                calcTarget(0);
            }

            self.calcChange = function(calcTarget, event, change) {
                calcTarget(0.5 * Math.floor(Math.min(99999.5, Math.max(0, Number(calcTarget()) + change)) / 0.5));
            }

            self.toggleMySelectionsSection = function() {
                var sectionIsVisible = ko.unwrap(self.mySelectionsSectionVisible);
                self.mySelectionsSectionVisible(!sectionIsVisible);
            }

            self.toggleMultiFormulaSection = function() {
                var sectionIsVisible = ko.unwrap(self.multiFormulaSectionVisible);
                self.multiFormulaSectionVisible(!sectionIsVisible);
            }

            /* private function */
            var saveInvestments = function () {             
                var multiBetData = multiStore.get();

                if (self.useNewLookCalculator) {
                    multiBetData = {
                        uuid: viewModel.Uuid,
                        investment: self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.Amount(),
                        multiFormulas: multiBetData.multiFormulas,
                        numberOfLegs: viewModel.NumberOfLegs
                    };
                } else {
                    multiBetData = {
                        uuid: viewModel.Uuid,
                        investment: self.multiInvestmentAmount(),
                        multiFormulas: multiBetData.multiFormulas,
                        numberOfLegs: viewModel.NumberOfLegs
                    };
                }


                if (viewModel.NumberOfLegs <= viewModel.FormulaMaxLegs) {
                    var enabledFormulas;
                    if (self.useNewLookCalculator) {
                        enabledFormulas = _.map(self.multiFormulaInvestments(), function (vm) {
                            return { FormulaNumber: vm().FormulaNumber, Stake: vm().BetAmountViewModel.Amount() }
                        });
                    } else {
                        enabledFormulas = _.map(self.multiFormulaInvestments(), function(vm) {
                            return { FormulaNumber: vm().FormulaNumber(), Stake: vm().Stake() }
                        });
                    }

                    var disabledFormulas = _.filter(multiBetData.multiFormulas, function(mf) {
                        return (mf.FormulaNumber >= viewModel.NumberOfLegs) && (mf.FormulaNumber < (viewModel.NumberOfExcludedLegs + viewModel.NumberOfLegs));
                    });

                    multiBetData.multiFormulas = enabledFormulas.concat(disabledFormulas);
                }

                multiStore.set(multiBetData);
            }        

            /* private function */
            var loadInvestments = function () {
                var multiBetData = multiStore.get();

                if (multiBetData.uuid !== viewModel.Uuid) {
                    return multiStore.clear(), multiStore.get();
                }
                else if (viewModel.NumberOfLegs < multiBetData.numberOfLegs) {
                    multiBetData.multiFormulas = _.filter(multiBetData.multiFormulas, function (mf) { return mf.FormulaNumber < viewModel.NumberOfLegs; });
                }

                return multiBetData;
            }

            /* private function */
            var clearSummary = function() {
                self.numberOfCombinations(0);
                self.totalCost(0);
                self.projectedPay(0);
                self.accountBettingIsEnabled(false);
            };

            /* private function */
            var updateSummary = function() {

                loggingService.logDebug('multiinvestment-viewmodel : updateSummary');

                var multiBetAmount;
                var multiFormulas;
                if (self.useNewLookCalculator) {
                    multiBetAmount = Number(self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.Amount());
                    multiFormulas = _.map(self.multiFormulaInvestments(), function (multiFormula) {
                        var formula = multiFormula();
                        return {
                            FormulaNumber: formula.FormulaNumber,
                            FormulaName: formula.FormulaName,
                            Stake: formula.BetAmountViewModel.Amount(),
                            NumberOfCombinations: formula.NumberOfCombinations
                        };
                    });
                } else {
                    multiBetAmount = Number(self.multiInvestmentAmount());
                    multiFormulas = _.map(self.multiFormulaInvestments(), function (multiFormula) {
                        var formula = multiFormula();
                        return {
                            FormulaNumber: formula.FormulaNumber(),
                            FormulaName: formula.FormulaName(),
                            Stake: formula.Stake(),
                            NumberOfCombinations: formula.NumberOfCombinations()
                        };
                    });
                }

                
                var summary = multiFormulaSummaryBuilder.buildSummary(multiBetAmount, multiFormulas, viewModel.SelectionReturns);
                var nonSingleTotal = _.reduce(multiFormulas, function(sum, multiFormula) {
                    if (multiFormula.FormulaNumber !== 1) {
                        return sum + multiFormula.Stake;
                    } else {
                        return sum;
                    }
                }, 0);
                var singleAmount = _.reduce(multiFormulas, function(sum, multiFormula) {
                    if (multiFormula.FormulaNumber === 1) {
                        return sum + multiFormula.Stake;
                    } else {
                        return sum;
                    }
                }, 0);

                self.numberOfCombinations(summary.numberOfCombinations);
                self.totalCost(summary.totalCost);
                self.projectedPay(summary.projectedPay);

                var zeroTotal = (summary.totalCost === 0);
                var singleFormulaOnly = (singleAmount > 0 && (nonSingleTotal === 0 && multiBetAmount === 0));
                var readyToBet = !zeroTotal && !singleFormulaOnly;
                var multiFormulaTotalStake = _.reduce(multiFormulas, function(sum, multiFormula) { return multiFormula.Stake + sum; }, 0);
                var preferences = preferencesService;
                var cashBettingEnabled = preferences.cashBettingEnabled() && !viewModel.IsAccumulator;
                var enableCashBettingButton =
                        readyToBet &&
                        (viewModel.AllowMultiFormulaWithCash || multiFormulaTotalStake === 0) &&
                        cashBettingEnabled;
                var showMultiFormulaCashWarning =
                        !viewModel.AllowMultiFormulaWithCash &&
                        multiFormulaTotalStake > 0 &&
                        cashBettingEnabled &&
                        !self.hasLiveBettingLeg() &&
                        !viewModel.IsAccumulator;
                var liveBetWithCashWarning = self.hasLiveBettingLeg() && !cashBettingEnabled;
                var showCashBettingButton = cashBettingEnabled && !viewModel.IsAccumulator;
                self.singleFormulaOnly(singleFormulaOnly);
                self.accountBettingIsEnabled(readyToBet && !self.hasLiveBettingLeg());
                self.cashBettingIsEnabled(enableCashBettingButton);
                self.multiFormulaCashWarningVisible(!showMultiFormulaCashWarning); // Force refresh after webkit has done its style change
                self.multiFormulaCashWarningVisible(showMultiFormulaCashWarning);
                self.liveBettingWithCashWarningVisible(liveBetWithCashWarning);
                self.cashBettingIsVisible(showCashBettingButton);
                self.multiBetType(viewModel.IsAccumulator ? "bettype-multi-accumulator" : "bettype-multi");

                loggingService.logDebug('multiinvestment-viewmodel : numberOfCombinations=' + self.numberOfCombinations());

                saveInvestments();
            };
          
            function initMultiCalculator(intOnly, showCashButton) {
                CALC.initCommonCalculator(intOnly === undefined || intOnly);
                CALC.initCalculator('calculator1');
                CALC.setCalcButtonState();
                self.initMultiLegDetail();
                OFFERS.initOffersHelp();

                nav.overrideBack(function () {
                    nav.ajaxPost(self.backUrl,
                        jQuery('form#calculator-form').serialize(),
                        self.processRedirectResponse,
                        {
                            hideOverlay: false
                        }
                    );
                    return false;
                });

                jQuery('.propose-multi').click(function (e) {
                    e.preventDefault();
                    if (jQuery(this).is('.disabled') === false) {
                        nav.ajaxPost(jQuery(this).attr('href'),
                            jQuery('form#calculator-form').serialize(),
                            nav.showContent,
                            {
                                control: jQuery(this),
                                timeout: self.multiTimeout
                            });
                        msgBusService.publish('bet.multi.review');
                    }
                });

                var cashBettingEnabled = preferencesService.cashBettingEnabled() && showCashButton;
                var placeInStoreButton = jQuery('#placeInStoreButton');
                //placeInStoreButton.toggle(cashBettingEnabled);
                self.addBetSlipController.bindAddMultiToWalletButtonClickHandler(placeInStoreButton, true);

                var accountBetButton = jQuery('#bettingFormNext');
                var hasLiveBettingLeg = jQuery('#calculator-form input:hidden[name=HasLiveBettingLeg][value=True]').length > 0;

                accountBetButton.toggleClass('halfwidth', cashBettingEnabled);
                accountBetButton.toggleClass('fullwidth', !cashBettingEnabled);
                if (hasLiveBettingLeg) {
                    accountBetButton.toggleClass('disabled', true);
                }

                //var noticeWarning = jQuery('div.notice.warning');
                //noticeWarning.toggle(hasLiveBettingLeg && !cashBettingEnabled);

                CALC.registerUpdateNotification(function () {
                    if (hasLiveBettingLeg) {
                        accountBetButton.toggleClass('disabled', true);
                    }
                });
            }

            /* class constructor */
            (function ctor() {
                clearSummary();

                loggingService.logDebug('multiinvestment-viewmodel : initView - numberOfFormulas=' + viewModel.MultiFormulas.length);

                self.useNewLookCalculator = viewModel.UseNewLookCalculator;

                initMultiCalculator(false, !viewModel.IsAccumulator);

                var multiBetData = loadInvestments();

                self.multiFormulaInvestments(_.map(viewModel.MultiFormulas, function (multiFormula) {

                    var stakeFor = function(formulaNumber) {
                        var mf = _.find(multiBetData.multiFormulas, function (mf) { return mf.FormulaNumber === formulaNumber });
                        return mf ? mf.Stake : 0;
                    }

                    var viewModel;
                    if (self.useNewLookCalculator) {
                        viewModel = new multiFormulaViewModel(multiFormula.FormulaName, multiFormula.FormulaNumber, multiFormula.NumberOfCombinations, stakeFor(multiFormula.FormulaNumber));
                        viewModel.BetAmountViewModel.Amount.subscribe(function (newValue) {
                            updateSummary();
                        });
                    } else {
                        viewModel = new formulaViewModel(multiFormula.FormulaName, multiFormula.FormulaNumber, stakeFor(multiFormula.FormulaNumber), multiFormula.NumberOfCombinations);
                        viewModel.Stake.subscribe(function(newValue) {
                            updateSummary();
                        });
                    }

                    return ko.observable(viewModel);
                }));

                self.multiInvestmentInput(multiBetData.investment);
                self.multiInvestmentAmount.subscribe(function(newValue) {
                    updateSummary();
                });

                if (self.useNewLookCalculator) {
                    //with formula
                    var betAmountModelInstance = new betAmountViewModel(multiBetData.investment, 0, 99999.5, 0.5);
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable = betAmountModelInstance;
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.Amount(multiBetData.investment);
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.Amount.subscribe(function(newValue) {
                        updateSummary();
                        jQuery('div.calculator-buttons a, a.calculator-buttons').toggleClass('disabled', (self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.Amount() <= 0));
                    });
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaEnable.IsNumberPadVisible.subscribe(function (newValue) {
                        hideActiveFormulaCalculator();
                    });
                    //without formula
                    var betAmountModelInstanceAnother = new betAmountViewModel(multiBetData.investment, 0, 99999, 1);
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaDisable = betAmountModelInstanceAnother;
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaDisable.Amount.subscribe(function (newValue) {
                        jQuery('div.calculator-buttons a, a.calculator-buttons').toggleClass('disabled', (self.BetAmountViewModelForMultiInvestmentWhenFormulaDisable.Amount() <= 0));
                    });
                    self.BetAmountViewModelForMultiInvestmentWhenFormulaDisable.IsNumberPadVisible.subscribe(function (newValue) {
                        hideActiveFormulaCalculator();
                    });

                    self.ActiveFormulaViewModel = null; //for keeping track of active formula
                }

                var illegalMultiFormulaLegCount = (viewModel.NumberOfLegs > viewModel.FormulaMaxLegs || viewModel.NumberOfLegs < 2);
                var multiFormulaVisible = !illegalMultiFormulaLegCount;
                self.illegalMultiFormulaLegCount(illegalMultiFormulaLegCount);
                self.multiFormulaVisible(multiFormulaVisible);
                self.mySelectionsSectionVisible(false);

                var multiFormulaTotalStake = _(multiBetData.multiFormulas)
                    .filter(function(mf) { return mf.FormulaNumber < viewModel.NumberOfLegs; })
                    .reduce(function (sum, multiFormula) { return multiFormula.Stake + sum; }, 0);

                self.multiFormulaSectionVisible(multiFormulaTotalStake > 0);
                self.hasLiveBettingLeg(viewModel.HasLiveBettingLeg);
                
                self.totalCost.subscribe(function(newValue) {
                    _.each(self.multiFormulaInvestments(), function(formulaViewModel) {
                        formulaViewModel().TotalCost(newValue);
                    });
                });

                //construct warning message
                if (viewModel.IsAccumulator) {
                    self.legNumberLimitWarnigMessage = "Accumulator Formula is only available for bets that contain between 2 and 6 legs.";
                }

                msgBusService.subscribe('preferences.cash', function() {
                    updateSummary();
                });

                updateSummary();
                self.buttonsVisible(true);
            })();
        }

        MultiInvestmentViewModel.prototype = Object.create(MultiViewModel.prototype, {
            addBetSlipController: {
                value: new Controllers.BetBuilder.AddBetSlip(new BetWalletService())
            }
        });
        Object.defineProperty(MultiInvestmentViewModel, 'constructor', {
            enumerable: false,
            value: MultiInvestmentViewModel
        });

        return MultiInvestmentViewModel;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(0), __webpack_require__(3), __webpack_require__(64), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, jQuery, nav, MultiViewModel, locationDetailsAppender) {
    function MultiProposeViewModel(params) {
        var self = this;

        MultiViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        self.initMultiLegDetail();
        OFFERS.initOffersHelp();
        jQuery('.place-bet').click(function (e) {
            e.preventDefault();
            nav.ajaxPost(
                jQuery('.place-bet').attr('href'),
                new locationDetailsAppender().addToUrlEncodedData(null),
                function (data) {
                    nav.hideBack();
                    nav.showContent(data);
                },
                {
                    control: jQuery(this),
                    timeout: this.multiTimeout
                });
        });
    }

    MultiProposeViewModel.prototype = Object.create(MultiViewModel.prototype, {

    });
    Object.defineProperty(MultiProposeViewModel, 'constructor', {
        enumerable: false,
        value: MultiProposeViewModel
    });

    return MultiProposeViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(64), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, jQuery, _, MultiViewModel, msgBusService) {
    function MultiReceiptViewModel(params) {
        var self = this;

        MultiViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        var items = jQuery('ul.multi-selections a');
        items.click(function (e) {
            e.preventDefault();
            self.processMultiLegDetail(jQuery(this).children('.prop-details').html());
        });
        var ticketNumber = jQuery('span:contains("Ticket")').parent().find('span.data').html();
        var totalCost = jQuery('[data-key="TotalCost"]').html();
        msgBusService.publish('bet.multi.receipt', { ticketNumber: ticketNumber, totalCost: totalCost });
    }

    MultiReceiptViewModel.prototype = Object.create(MultiViewModel.prototype);
    Object.defineProperty(MultiReceiptViewModel, 'constructor', {
        enumerable: false,
        value: MultiReceiptViewModel
    });

    return MultiReceiptViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(0), __webpack_require__(3), __webpack_require__(64)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, jQuery, nav, MultiViewModel) {
    function MultiViewViewModel(params) {
        var self = this;

        MultiViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        var legs = jQuery('#multi-bet-list');

        legs.find('input[type="checkbox"]').change(function () {
            nav.ajaxPost(jQuery(this).next('input').val(), null, null);
        }).click(function (e) { e.stopPropagation(); });

        legs.find('label').click(function () {
            var input = jQuery(this).children('input');
            if (!input.is(':disabled')) {
                input.prop('checked', true);
                input.change();
            }
            return false;
        });
    }

    MultiViewViewModel.prototype = Object.create(MultiViewModel.prototype);
    Object.defineProperty(MultiViewViewModel, 'constructor', {
        enumerable: false,
        value: MultiViewViewModel
    });

    return MultiViewViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(22), __webpack_require__(250)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, loggingService, storage) {
    var _storeKey = 'OnCourse-Checkin';

    // use session scope storage for now - may change to local storage
    return {
        clear: clear,
        get: get,
        set: set
    }

    function clear() {
        if (arguments.length > 0) {
            var locationId = arguments[0];
            storage.store(_storeKey, _.filter(storage.store(_storeKey), function(x) { return x.LocationId !== locationId; }));
        } else {
            loggingService.logDebug("checkinStore.clear");
            storage.store(_storeKey, null);
        }
    };

    function get() {
        var data = storage.store(_storeKey);
        if (data !== undefined && data !== null && data.length > 0) {
            if (arguments.length > 0) {
                var locationId = arguments[0];
                var checkins = _.filter(data, function(checkin) {
                    return (checkin.LocationId === locationId);
                });
                if (checkins && checkins.length > 0) {
                    return checkins[0];
                }
            } else {
                return data;
            }
        } else {
            return [];
        }
    };

    function set(locationId,locationData) {
        var data = get();

        var checkins = _.filter(data, function (x) { return x.LocationId === locationId; });
        if (checkins && checkins.length > 0) {
            data = _.filter(data, function(x) { return checkins[0] !== x });
        }

        data[data.length] = _.extend({}, checkins[0], locationData);
        storage.store(_storeKey, data);
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));



/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(62)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, lbsConfigService) {
    var minAccuracy = 500;
    var unknownLocation = "Unknown";

    return {
        whereAmI: whereAmI,
        unknownLocation: unknownLocation,
        getClosestFence: getClosestFence
    };

    function whereAmI(position) {
        var geoLocation = unknownLocation;
        var fences = lbsConfigService.getFences();

        if (fences.length > 0) {
            var match = false;
            _.each(fences, function (fence) {
                if (!match && isPositionInPoly(fence.GeoFence, position)) {
                    geoLocation = fence.Name;
                    match = true;
                }
            });
        }

        return geoLocation;
    }

    function toRadians(v) {
        if (v == 0) return 0;
        return v * Math.PI / 180;
    }

    function toPoint(position) {
        return { X: position.coords.latitude, Y: position.coords.longitude };
    }

    function isPositionInPoly(poly, position) {
        var ingeofence = false;

        if (position.coords.accuracy > minAccuracy) return false;

        var pt = toPoint(position);

        for (var i = -1, l = poly.length, j = l - 1; ++i < l; j = i) {
            ((poly[i].Y <= pt.Y && pt.Y < poly[j].Y) || (poly[j].Y <= pt.Y && pt.Y < poly[i].Y))
                && (pt.X < (poly[j].X - poly[i].X) * (pt.Y - poly[i].Y) / (poly[j].Y - poly[i].Y) + poly[i].X)
                && (ingeofence = !ingeofence);
        }

        if (ingeofence) {
            var distanceToEdgeOfPoly = shortestDistanceToEdgeOfPoly(poly, position);

            ingeofence = (distanceToEdgeOfPoly >= position.coords.accuracy);

        }

        return ingeofence;
    }

    function getClosestFence(position) {
        var shortestDistance = { FenceId: '', DistanceToFence: 0 };
        var allShortestDistances = [];
        var fences = lbsConfigService.getFences();

        //console.log('getClosestFence => ' + JSON.stringify(position));

        if (fences.length > 0) {
            _.each(fences, function (fence) {
                var distanceToEdgeOfPoly = shortestDistanceToEdgeOfPoly(fence.GeoFence, position) - position.coords.accuracy;
                var object = { DistanceToFence: distanceToEdgeOfPoly, FenceId: fence.Name };
                //console.log('getClosestFence => ' + JSON.stringify(object));
                allShortestDistances.push(object);
            });
        }

        if (allShortestDistances.length > 0) {
            allShortestDistances = _.sortBy(allShortestDistances,'DistanceToFence');
            shortestDistance = allShortestDistances[0];
        }

        return shortestDistance;
    }

    function shortestDistanceToEdgeOfPoly(poly, position) {
        var mind = 9999999,
            pt = toPoint(position);
        var p1, p2;
        for (i = -1, l = poly.length, j = l - 1; ++i < l; j = i) {
            d = distToSegment(pt, poly[i], poly[j]);
            if (d <= mind) { mind = d; p1 = poly[i]; p2 = poly[j]; }
        }
        return mind * 1000;
    }


    function latlantometer(p1, p2) {
        var R = 6371; // km Earth radius
        var φ1 = toRadians(p1.X);
        var φ2 = toRadians(p2.X);
        var Δφ = toRadians((p2.X - p1.X));
        var Δλ = toRadians((p2.Y - p1.Y));

        var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
            Math.cos(φ1) * Math.cos(φ2) *
            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c;
        return d;
    }

    function sqr(x) {
        return x * x;
    }

    function dist2(v, w) {
        return sqr(v.X - w.X) + sqr(v.Y - w.Y);
    }

    function distToSegment(p, v, w) {
        var l2 = dist2(v, w);

        if (l2 == 0) return latlantometer(p, v);

        var t = ((p.X - v.X) * (w.X - v.X) + (p.Y - v.Y) * (w.Y - v.Y)) / l2;

        if (t < 0) return latlantometer(p, v);
        if (t > 1) return latlantometer(p, w);

        var poi = { x: v.X + t * (w.X - v.X), y: v.Y + t * (w.Y - v.Y) };
        return latlantometer(p, poi);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(22), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, loggingService, amplify) {
    var _storeKey = 'Gps';

    return {
        clear: clear,
        get: get,
        set: set
    }

    function clear() {
        loggingService.logDebug("gpsStore.clear");
        amplify.store(_storeKey, null);
    }

    function get() {
        loggingService.logDebug("gpsStore.get");
        return amplify.store(_storeKey);
    }

    function set(data) {
        loggingService.logDebug("gpsStore.set - " + JSON.stringify(data));
        amplify.store(_storeKey, data);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(22), __webpack_require__(6), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(loggingService, amplify, _) {
    var _storeKey = 'location';

    // use session scope storage for now - may change to local storage
    var _store = function () {
        if (amplify.store.types.sessionStorage) {
            return amplify.store.sessionStorage;
        }
        return amplify.store.memory;
    }();

    return {
        clear: clear,
        get: get,
        set: set
    }

    function clear() {

        loggingService.logDebug("locationStore.clear");

        _store(_storeKey, null);
    };

    function get() {
        var result = {
            ProviderLocations: []
        };

        var locationData = _store(_storeKey);

        if (locationData && _.isObject(locationData)) {
            result.ProviderLocations = locationData.ProviderLocations || result.ProviderLocations;
        }

        return result;
    };

    function set(locationData) {

        loggingService.logDebug("locationStore.set", JSON.stringify(locationData));

        var data = {
            ProviderLocations: locationData.ProviderLocations,
        };
        _store(_storeKey, data);
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {

    var versionElementSel = "input#Version[data-key='X-TabTouch-Version']";

    var getTabTouchVersion = function() {
        var elem = document.querySelector(versionElementSel);

        if (elem) {
            var xTabTouchVersion = elem.value;
            if (typeof xTabTouchVersion !== 'undefined') {
                return xTabTouchVersion;
            }
        }
        return null;
    };

    return {
        getTabTouchVersion: getTabTouchVersion
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(37),
    __webpack_require__(4),
    __webpack_require__(3),
    __webpack_require__(49),
    __webpack_require__(39),
    __webpack_require__(56),
    __webpack_require__(61)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(requirejs, messageBus, nav, immutable, moment, hammer, dtm) {

    return {
        init: function(baseUrl, tabName) {

            __webpack_require__.e/* require.ensure */(1).then((function() {
                var rx = __webpack_require__(54); 
                var react = __webpack_require__(91);
                var reactDom = __webpack_require__(90);
                var rest = __webpack_require__(93);
                var stateMachine = __webpack_require__(50);
                var authIntents = __webpack_require__(399);
                var menuIntents = __webpack_require__(400);
                var navIntents = __webpack_require__(86);

                var container = document.getElementById('account-activity-container');

                var externalComponentRequire = requirejs.config({
                    context: 'externalRequire',
                    waitSeconds: 15
                });

                nav.showLoading();

                externalComponentRequire([baseUrl + "/static/react-client.js"],
                    function(accountActivity) {
                        nav.hideLoading();

                        var config = {
                            host: baseUrl,
                            initalTab: accountActivity.tabs[tabName]
                        }

                        var dependencies = {
                            react: react,
                            'react-dom': reactDom,
                            rx: Rx,
                            rest: rest.default,
                            immutable: immutable,
                            moment: moment,
                            hammerjs: hammer,
                            'state-machine': stateMachine,
                            'host-intents': {
                                auth: authIntents,
                                nav: navIntents,
                                menu: menuIntents,
                            },
                            analytics: { track: function(key) { dtm.trackActivity(key); } }
                        }

                        accountActivity.run(container, config, dependencies);

                        function onNav() {
                            messageBus.unsubscribe('nav.nav', onNav);
                            messageBus.unsubscribe('nav.resetback', onNav);
                            reactDom.unmountComponentAtNode(container);
                        }

                        messageBus.subscribe('nav.nav', onNav);
                        messageBus.subscribe('nav.resetback', onNav);                    
                    },

                    function(err) {
                        var failedId = err.requireModules && err.requireModules[0];
                        requirejs.undef(failedId);

                        nav.ajaxError(0, null, true);
                    });

            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe); 
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(46), __webpack_require__(4), __webpack_require__(5), __webpack_require__(3), __webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, AccountViewModel, msgBusService, common, nav, logon) {
    function AccountChangePasswordViewModel(params) {
        AccountViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        initChangePasswordForm();
    }

    function submitChangePwd() {
        nav.ajaxPost(
            jQuery('form#change-password-form').attr('action'),
            jQuery('form#change-password-form').serialize(),
            processChangePasswordResponse,
            {
                error: logon.closeLoginPopup,
                control: jQuery('#change-password-button'),
                reenable: false
            }
        );
    }

    function processChangePasswordResponse(data) {
        jQuery('form#change-password-form').parent().html(data);
        initChangePasswordForm();
        logon.ajaxLogonState();
        msgBusService.publish('account.processed', 'password change');

    }

    function initChangePasswordForm() {
        jQuery('#change-password-form input[type=password]').val('')
                .keyup(function() {
                    updateChangePasswordState();
                })
                .keypress(function(e) {
                    common.numericKeyPress(e, true);
                })
                .change(function(e) {
                    common.numericKeyPress(e, true);
                    updateChangePasswordState(e);
                });
    }

    function updateChangePasswordState(e) {
        common.setDisableState(jQuery('button.change-password'), (jQuery('input#CurrentPassword').val().length > 0));
    }

    AccountChangePasswordViewModel.prototype = Object.create(AccountViewModel.prototype, {
        submitChangePwd: {
            value: submitChangePwd
        }
    });

    Object.defineProperty(AccountChangePasswordViewModel, 'constructor', {
        enumerable: false,
        value: AccountChangePasswordViewModel
    });

    return AccountChangePasswordViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(46), __webpack_require__(4), __webpack_require__(5),__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, AccountViewModel, msgBusService, common, nav) {
    function AccountDepositPayConnectViewModel(params) {
        AccountViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        this.NoRefresh();
    }

    /* ---------------------
    Deposit Payment Connect Start
    --------------------- */

    function submitDepositPaymentConnect() {
        if (!validateDepositForm()) return;
        jQuery('form#init-pay-connect-form #DepositAmount').val(jQuery('div#deposit-form #deposit-amount').val());
        nav.ajaxPost(
            jQuery('form#init-pay-connect-form').attr('action'),
            jQuery('form#init-pay-connect-form').serialize(),
            processDepositResponsePaymentConnect,
            {
                error: nav.resetBack,
                control: jQuery('#deposit-button')
            });
    }

    function validateDepositForm() {
        var errorArray = [];
        var errorHtml;
        var ccRegEx = /^\d{16}$/;
        var codeRegEx = /^\d{3}$/;
        var amountRegEx = /^\d[\d\.]*$/;

        jQuery('div.validation-summary-errors').remove();

        if (!ccRegEx.test(jQuery('input#cc-number').val())) {
            errorArray.push("Invalid credit card number.");
        }

        if (!codeRegEx.test(jQuery('input#security-code').val())) {
            errorArray.push("Invalid security code.");
        }

        if (jQuery('#expiry-mm').val() === '' || jQuery('#expiry-yy').val() === '') {
            errorArray.push("Invalid expiry date.");
        }

        if (!amountRegEx.test(jQuery('input#deposit-amount').val())) {
            errorArray.push("Invalid deposit amount.");
        }

        if (errorArray.length > 0) {
            errorHtml = "<div class='validation-summary-errors' style='margin-top: 1em; color: #CC0404;'><h5 style='text-align:left;'>Please correct these fields:</h5><ul><li>";
            errorHtml += errorArray.join("</li><li>");
            errorHtml += "</li></ul></div>";

            jQuery('div#deposit-form fieldset').prepend(errorHtml);
            return false;
        }

        return true;
    }

    function processDepositResponsePaymentConnect(data) {

        if (data == null
            || data == undefined
            || data.ReceiptPageUrl == null
            || data.ReceiptPageUrl == undefined) {
            nav.resetBack("Account");
            jQuery('#content').html(data);
        }
        else {
            //set up the form data for submission
            jQuery('#in_merchant_number').val(data.MerchantNumber);
            jQuery('#in_pay_token').val(data.PaymentToken);
            jQuery('#in_amount').val(data.AmountInCents);
            jQuery('#in_merchant_reference').val(data.AccountNumber);
            jQuery('#in_crn1').val(data.PaymentCRN1);
            jQuery('#in_crn2').val(data.PaymentCRN2);
            jQuery('#in_crn3').val(data.PaymentCRN3);

            jQuery('#in_credit_card').val(jQuery('#cc-number').val());
            jQuery('#in_expiry_month').val(jQuery('#expiry-mm').val());
            jQuery('#in_expiry_year').val(jQuery('#expiry-yy').val());
            jQuery('#in_cvv').val(jQuery('#security-code').val());

            jQuery('#in_receipt_page_url').val(data.ReceiptPageUrl);
            jQuery('#rwwa_bet_account_number').val(data.AccountNumber);
            jQuery('#rwwa_deposit_amount').val(data.AmountInCents);
            jQuery('#rwwa_unconf_txn_number').val(data.PaymentCRN1);

            // clean the existing form to be posted to bpoint MAC validation will fail at bpoint
            var form = jQuery('#ccSubmissionForm');
            if (form != undefined) {
                form.submit();
                msgBusService.publish('account.processed', 'deposit');
            }
        }
    }
    /* ---------------------
    Deposit Payment Connect Finish
    --------------------- */

    AccountDepositPayConnectViewModel.prototype = Object.create(AccountViewModel.prototype, {
        submitDepositPaymentConnect: {
            value: submitDepositPaymentConnect
        }
    });
    Object.defineProperty(AccountDepositPayConnectViewModel, 'constructor', {
        enumerable: false,
        value: AccountDepositPayConnectViewModel
    });

    return AccountDepositPayConnectViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(46), __webpack_require__(4), __webpack_require__(5), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, AccountViewModel, msgBusService, common, nav) {
    function AccountDepositViewModel(params) {
        AccountViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        jQuery('.page-heading .refresh-button').hide();
        jQuery('.creditcard-part').on('keyup', function (e) {
            var $textBox = jQuery(this);
            if ($textBox.val().length >= 4 && IsKeyCodeForNumber(e.keyCode)) {
                $textBox.nextAll("input").first().focus();
            }
        });
    }

    /* ---------------------
    Deposit Start
    --------------------- */

    function IsKeyCodeForNumber(keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) | (keyCode >= 96 && keyCode <= 105));
    }

    function proposeDeposit() {

        var ccPart1 = jQuery('#CreditCardNumberPart1').val();
        var ccPart2 = jQuery('#CreditCardNumberPart2').val();
        var ccPart3 = jQuery('#CreditCardNumberPart3').val();
        var ccPart4 = jQuery('#CreditCardNumberPart4').val();

        if (ccPart1 && ccPart2 && ccPart3 && ccPart4)
            jQuery('#CreditCardNumber').val(ccPart1 + ccPart2 + ccPart3 + ccPart4);

        //analytics
        var validationErrorMessageHeader = jQuery('#validation-error-message-header');
        if (validationErrorMessageHeader == undefined || validationErrorMessageHeader.length <= 0) {    //means first time click on continue button. I know what you mean here!!!
            msgBusService.publish('account.deposit', { step: 'started', amount: 0 });
        } else {
            msgBusService.publish('account.deposit', { step: 'correctvalidationerror', amount: 0 });  // means coming back to same page because of validation error
        }

        postDeposit(jQuery('form#deposit-form').attr('action'), function (data) {
            jQuery('#content').html(data);
        });
    }

    function overrideDepositBack(url) {
        nav.overrideBack(function () {
            postDeposit(url, processDepositResponse);
            return false;
        });
    }

    function postDeposit(action, success) {
        nav.ajaxPost(
            action,
            jQuery('form#deposit-form').serialize(),
            success,
            {
                error: nav.resetBack,
                control: jQuery('#deposit-button'),
                timeout: 90000  //90 seconds for deposit!
            }
        );
    }

    function submitDeposit() {
        msgBusService.publish('account.deposit', { step: 'confirmed', amount: 0 });
        postDeposit(jQuery('form#deposit-form').attr('action'), processDepositResponse);
    }

    function processDepositResponse(data) {
        nav.resetBack("Account");
        jQuery('#content').html(data);
        //msgBusService.publish('account.processed', 'deposit');    //ToDo: Misleading. This event can fire many time than actual deposit happens. e.g. Deposit success, deposit error, refresh button, creditcard register success, creditcard register fail etc.

        //analytics
        var depositSuccess = jQuery('#deposit-success');
        var depositError = jQuery('#deposit-error');
        if (depositSuccess != undefined && depositSuccess.length > 0) {
            var depositAmount = 0;
            var depositAmountElement = jQuery('#depositAmount');
            if (depositAmountElement != undefined && depositAmountElement.length > 0) {
                depositAmount = depositAmountElement.val();
            }
            msgBusService.publish('account.deposit', { step: 'success', amount: depositAmount });
        } else if (depositError != undefined && depositError.length > 0) {
            msgBusService.publish('account.deposit', {step: 'error', amount: 0});
        }
    }

    /* ---------------------
    Deposit Finish
    --------------------- */

    AccountDepositViewModel.prototype = Object.create(AccountViewModel.prototype, {
        proposeDeposit : {
            value: proposeDeposit
        },
        overrideDepositBack : {
            value: overrideDepositBack
        },
        submitDeposit : {
            value: submitDeposit
        }
    });
    Object.defineProperty(AccountDepositViewModel, 'constructor', {
        enumerable: false,
        value: AccountDepositViewModel
    });

    return AccountDepositViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(46), __webpack_require__(4), __webpack_require__(5), __webpack_require__(3), __webpack_require__(251)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, AccountViewModel, msgBusService, common, nav) {
    function AccountPreCommitmentViewModel(params) {

        var preCommitmentViewModel = null;

        AccountViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        initPreCommitmentForm(params.model);
    }

    /* ---------------------
    Pre-Commitment Start
    --------------------- */

    function initPreCommitmentForm(model) {
        var precommitTimeoutMs = 90000;
        var radix = 10;

        function setModel(model) {
            if (model) {
                preCommitmentViewModel = model;
            }
        };

        function getModel() {
            return preCommitmentViewModel;
        };

        var messages = {
            CallCustomerManagement: 'Please call our Customer Management Team on <a class="telephone" href="tel:{0}">{0}</a>',
            ProposedLimitText: 'Proposed {0} of {1} effective {2}',
            ProposedUnblockText: 'Proposed unblock of credit card deposits effective {0}',
            EmptyField: 'Please fill in the {0} field',
            TooManyDigits: 'Please enter a number with {0} digits or less in the {1} field',
            NotInteger: '{0} must be whole dollars only',
            TooSmall: '{0} must be greater than or equal to ${1}',
            TooBig: '{0} must be less than or equal to ${1}',
            ConfirmationTemplates: {
                bet: {
                    nolimit: 'Confirming this action will <strong>remove</strong> the single bet limit from your account. This change will be effective from {{effectiveDate}}, due to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?',
                    immediate: 'Your new single bet limit of {{value}} will be effective immediately! If you wish to increase or remove your single bet limit in the future, it will be subject to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?',
                    altered: 'Your new single bet limit of {{value}} will be effective from {{effectiveDate}}. Increasing or removing your single bet limit in the future will be subject to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?'
                },
                deposit: {
                    nolimit: 'Confirming this action will <strong>remove</strong> the total weekly deposit limit from your account. This change will be effective from {{effectiveDate}}, due to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?',
                    immediate: 'Your new total weekly deposit limit of {{value}} will be effective immediately! This deposit limit is inclusive of all deposit types that have been made within the past 7 days (e.g. credit card, cash, BPAY). Increasing or removing your total weekly deposit limit in the future will be subject to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?',
                    altered: 'Your new total weekly deposit limit of {{value}} will be effective from {{effectiveDate}}. This deposit limit is inclusive of all deposit types that have been made within the past 7 days (e.g. credit card, cash, BPAY). Increasing or removing your total weekly deposit limit in the future will be subject to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?'
                }
            },
            CreditCardBlock: 'Credit card deposits to your account will be blocked effective immediately! If you choose to <strong>remove</strong> this block in the future, it will be subject to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?',
            CreditCardUnblock: 'Removing your existing block on your credit card will allow credit card deposits to your TAB account. This change will become effective from {{effectiveDate}} due to a <strong>{{coolingOffPeriodDays}} day cooling off period</strong>. Would you like to continue?',
            BetLimitLabel: jQuery('#bet-limits-form h3').text(),
            DepositLimitLabel: jQuery('#deposit-limits-form h3').text()
        };

        var toLimitText = function (s) {
            if (s != null) {
                return "$" + s;
            }
            return "None";
        };

        var getProposedLimitText = function (type, proposedLimit) {
            if (proposedLimit) {
                return messages.ProposedLimitText.format(type, toLimitText(proposedLimit.Amount), proposedLimit.ActiveDate);
            }
            return '';
        };

        var getProposedUnblockText = function (model) {
            if (!model.BlockCreditCardDepositsEnable) {
                return messages.CallCustomerManagement.format(model.RwwaAccountsContactTel);
            }
            else if (model.ProposedCreditCardReleaseDate) {
                return messages.ProposedUnblockText.format(model.ProposedCreditCardReleaseDate);
            }
            return '';
        };

        var betLimitOptOutEnable = function (model) {
            return model.BetLimit != null && (model.ProposedBetLimit == null || model.ProposedBetLimit.Amount != null);
        };

        var depositLimitOptOutEnable = function (model) {
            return model.DepositLimit && (model.ProposedDepositLimit == null || model.ProposedDepositLimit.Amount != null);
        };

        var updateView = function () {
            var model = getModel();

            jQuery('#credit-card-deposits').prop('checked', model.BlockCreditCardDeposits);
            jQuery('#bet-limit').val(toLimitText(model.BetLimit));
            jQuery('#deposit-limit').val(toLimitText(model.DepositLimit));
            jQuery('#proposed-bet-limit').text(getProposedLimitText(messages.BetLimitLabel, model.ProposedBetLimit));
            jQuery('#proposed-deposit-limit').text(getProposedLimitText(messages.DepositLimitLabel, model.ProposedDepositLimit));
            jQuery('#proposed-credit-release').html(getProposedUnblockText(model));
            common.setDisableState(jQuery('#credit-card-deposits'), !model.ProposedCreditCardReleaseDate && model.BlockCreditCardDepositsEnable);
            common.setDisableState(jQuery('#bet-limit-optout'), betLimitOptOutEnable(model));
            common.setDisableState(jQuery('#deposit-limit-optout'), depositLimitOptOutEnable(model));
        };

        var validateBetLimit = function (model, newLimit) {
            return validateLimit(model, messages.BetLimitLabel, newLimit, model.BetLimitRange);
        };

        var validateDepositLimit = function (model, newLimit) {
            return validateLimit(model, messages.DepositLimitLabel, newLimit, model.DepositRange);
        };

        var validateLimit = function (model, label, newLimit, range) {
            if (!newLimit || newLimit.length == 0) {
                model.ValidationErrors.push(messages.EmptyField.format(label));
                return false;
            }

            var maxDigits = range.Max.toString().length;
            if (newLimit.Length > maxDigits) {
                model.ValidationErrors.push(messages.TooManyDigits.format(maxDigits, label));
                return false;
            }

            var intRegex = /^\d+$/;
            if (!intRegex.test(newLimit)) {
                model.ValidationErrors.push(messages.NotInteger.format(label));
                return false;
            }

            var n = parseInt(newLimit, radix);
            if (n < range.Min) {
                model.ValidationErrors.push(messages.TooSmall.format(label, range.Min));
                return false;
            }
            if (n > range.Max) {
                model.ValidationErrors.push(messages.TooBig.format(label, range.Max));
                return false;
            }

            return true;
        };

        /* where null represents no limit(the 'greatest' limit) */
        var compareLimit = function (a, b) {
            if ((a == null && b == null) || (a == b)) {
                return 0;
            } else if (a == null) {
                return 1;
            } else if (b == null) {
                return -1;
            } else if (a > b) {
                return 1;
            }
            return -1;
        };

        var calcConfirmationText = function (model, templates, currentLimit, newLimit, proposedLimit) {
            var msgTemplate = templates.altered;
            var ed = model.CoolingOffDate;

            if (compareLimit(newLimit, currentLimit) <= 0) {
                msgTemplate = templates.immediate;
                ed = 'immediately';
            }
            else if (proposedLimit && compareLimit(newLimit, proposedLimit.Amount) <= 0) {
                msgTemplate = templates.altered;
                ed = proposedLimit.ActiveDate;
            }

            if (newLimit == null) {
                msgTemplate = templates.nolimit;
            }

            return msgTemplate.template({ value: toLimitText(newLimit), effectiveDate: ed, coolingOffPeriodDays: model.CoolingOffPeriodDays });
        };

        var showValidationErrors = function (model) {
            if (model && model.ValidationErrors && model.ValidationErrors.length) {
                jQuery('#validation-error-list').html('<p>' + model.ValidationErrors[0] + '</p>');
                jQuery('#validation-error-window').unbind('click').click(function () { jQuery('#validation-error-window').fadeOut('fast'); });
                common.showPopup(jQuery('#validation-error-window'));
                model.ValidationErrors = [];
                return true;
            }
            return false;
        };

        var showConfirmation = function (model, msg, onConfirm, onCancel) {
            if (model) {
                var confirmDialog = new confirmation.Dialog(jQuery, common);
                confirmDialog.show(msg, onConfirm, onCancel);
            }
        };

        var setBetLimitEditing = function (editing) {
            if (editing) {
                jQuery('.bet-limit-collapsed').show();
                jQuery('#bet-limit-edit').addClass('disabled');
                jQuery('#new-bet-limit').val(null);
            } else {
                jQuery('.bet-limit-collapsed').hide();
                jQuery('#bet-limit-edit').removeClass('disabled');
            }
        };

        var setDepositLimitEditing = function (editing) {
            if (editing) {
                jQuery('.deposit-limit-collapsed').show();
                jQuery('#deposit-limit-edit').addClass('disabled');
                jQuery('#new-deposit-limit').val(null);
            } else {
                jQuery('.deposit-limit-collapsed').hide();
                jQuery('#deposit-limit-edit').removeClass('disabled');
            }
        };

        var submitOption = function (url, checkbox, success, error) {
            var checked = checkbox.is(':checked');

            nav.ajaxPost(
                url,
                jQuery.param(
                {
                    enable: checked
                }),
                function (data) {
                    common.setDisableState(checkbox, true);
                    if (success) {
                        success(data);
                    }
                },
                {
                    error: function (x, s) {
                        error();
                    },
                    control: checkbox,
                    timeout: precommitTimeoutMs
                }
            );
        };

        var submitLimit = function (url, value, success, error) {
            nav.ajaxPost(
                url,
                jQuery.param(
                {
                    newLimit: value
                }),
                function (data) {
                    if (success) {
                        success(data);
                    }
                },
                {
                    error: function (x, s) {
                        error();
                    },
                    timeout: precommitTimeoutMs
                }
            );
        };


        var editBetLimitKeyUpHandler = function () {
            setBetLimitEditing(true);
        };

        var cancelBetLimitKeyUpHandler = function () {
            setBetLimitEditing(false);
        };

        var optOutBetLimitKeyUpHandler = function () {
            var url = jQuery('#bet-limit-optout-action').attr('href');
            var model = getModel();
            var confirmText = calcConfirmationText(model, messages.ConfirmationTemplates.bet, model.BetLimit, null, model.ProposedBetLimit);

            if (!betLimitOptOutEnable(model)) {
                return;
            }

            showConfirmation(
                model,
                confirmText,
                function () {
                    nav.ajaxPost(
                        url,
                        null,
                        function (data) {
                            setModel(data.viewModel);
                            updateView();
                            setBetLimitEditing(false);
                        },
                        {
                            error: function (x, s) {
                                updateView();
                            },
                            timeout: precommitTimeoutMs
                        }
                    );
                }
            );
        };

        var confirmBetLimitSubmitHandler = function () {
            var url = jQuery('#bet-limit-confirm-action').attr('href');
            var value = jQuery('#new-bet-limit').val();
            var model = getModel();
            if (!validateBetLimit(model, value)) {
                showValidationErrors(model);
                return;
            }

            var intValue = parseInt(value, radix);
            var confirmText = calcConfirmationText(model, messages.ConfirmationTemplates.bet, model.BetLimit, intValue, model.ProposedBetLimit);

            showConfirmation(
                model,
                confirmText,
                function () {
                    submitLimit(
                        url,
                        value,
                        function (data) {
                            setModel(data.viewModel);
                            updateView();
                            if (!showValidationErrors(data.viewModel)) {
                                setBetLimitEditing(false);
                            }
                        },
                        function () {
                            updateView();
                        }
                    );
                }
            );
        };

        var confirmBetLimitKeyUpHandler = function () {
            var form = jQuery('#bet-limits-form');
            form.find(':submit').click();
        };

        var editDepositLimitKeyUpHandler = function () {
            setDepositLimitEditing(true);
        };

        var cancelDepositLimitKeyUpHandler = function () {
            setDepositLimitEditing(false);
        };

        var optOutDepositLimitKeyUpHandler = function () {
            var url = jQuery('#deposit-limit-optout-action').attr('href');
            var model = getModel();
            var confirmText = calcConfirmationText(model, messages.ConfirmationTemplates.deposit, model.DepositLimit, null, model.ProposedDepositLimit);

            if (!depositLimitOptOutEnable(model)) {
                return;
            }

            showConfirmation(
                model,
                confirmText,
                function () {
                    nav.ajaxPost(
                        url,
                        null,
                        function (data) {
                            setModel(data.viewModel);
                            updateView();
                            setDepositLimitEditing(false);
                        },
                        {
                            error: function (x, s) {
                                updateView();
                            },
                            timeout: precommitTimeoutMs
                        }
                    );
                }
            );
        };

        var confirmDepositLimitSubmitHandler = function () {
            var url = jQuery('#deposit-limit-confirm-action').attr('href');
            var value = jQuery('#new-deposit-limit').val();
            var model = getModel();
            if (!validateDepositLimit(model, value)) {
                showValidationErrors(model);
                return;
            }

            var intValue = parseInt(value, radix);
            var confirmText = calcConfirmationText(model, messages.ConfirmationTemplates.deposit, model.DepositLimit, intValue, model.ProposedDepositLimit);

            showConfirmation(
                model,
                confirmText,
                function () {
                    submitLimit(
                        url,
                        value,
                        function (data) {
                            setModel(data.viewModel);
                            updateView();
                            if (!showValidationErrors(data.viewModel)) {
                                setDepositLimitEditing(false);
                            }
                        },
                        function () {
                            updateView();
                        }
                    );
                }
            );
        };

        var confirmDepositLimitKeyUpHandler = function () {
            var form = jQuery('#deposit-limits-form');
            form.find(':submit').click();
        };

        var creditCardDepositsChangeHandler = function () {
            var url = jQuery('#credit-card-deposits-action').attr('href');
            var checkbox = jQuery('#credit-card-deposits');
            var checked = checkbox.is(':checked');
            var model = getModel();
            if (!model.BlockCreditCardDepositsEnable) {
                model.ValidationErrors.push(messages.CallCustomerManagement.format(model.RwwaAccountsContactTel));
                updateView();
                showValidationErrors(model);
                return;
            }

            showConfirmation(
                model,
                (checked ? messages.CreditCardBlock : messages.CreditCardUnblock).template({ coolingOffPeriodDays: model.CoolingOffPeriodDays, effectiveDate: model.CoolingOffDate }),
                function () {
                    submitOption(
                        url,
                        checkbox,
                        function (data) {
                            setModel(data.viewModel);
                            updateView();
                            showValidationErrors(data.viewModel);
                        },
                        function () {
                            updateView();
                        }
                    );
                },
                updateView
            );
        };

        jQuery('#bet-limit-edit').click(editBetLimitKeyUpHandler);
        jQuery('#bet-limit-cancel').click(cancelBetLimitKeyUpHandler);
        jQuery('#bet-limit-optout').click(optOutBetLimitKeyUpHandler);
        jQuery('#bet-limit-confirm').click(confirmBetLimitKeyUpHandler);
        jQuery('#deposit-limit-edit').click(editDepositLimitKeyUpHandler);
        jQuery('#deposit-limit-cancel').click(cancelDepositLimitKeyUpHandler);
        jQuery('#deposit-limit-optout').click(optOutDepositLimitKeyUpHandler);
        jQuery('#deposit-limit-confirm').click(confirmDepositLimitKeyUpHandler);

        jQuery('#credit-card-deposits').change(creditCardDepositsChangeHandler);

        jQuery('#deposit-limits-form').submit(confirmDepositLimitSubmitHandler);
        jQuery('#bet-limits-form').submit(confirmBetLimitSubmitHandler);

        jQuery('#new-deposit-limit').keypress(function (e) { common.numericKeyPress(e, true); });
        jQuery('#new-bet-limit').keypress(function (e) { common.numericKeyPress(e, true); });
        jQuery('a.scroll-to').click(function (e) { return nav.scrollTo(this.attributes['href'].value); });
        jQuery('input[maxlength]').keypress(function (e) { return common.maxlengthKeyPress(this, e); });

        setModel(model);
        updateView();
    }


    /* ---------------------    
    Pre-Commitment Finish
    --------------------- */

    AccountPreCommitmentViewModel.prototype = Object.create(AccountViewModel.prototype, {

    });
    Object.defineProperty(AccountPreCommitmentViewModel, 'constructor', {
        enumerable: false,
        value: AccountPreCommitmentViewModel
    });

    return AccountPreCommitmentViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(46), __webpack_require__(4), __webpack_require__(5), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, AccountViewModel, msgBusService, common, nav) {
    function AccountTransactionViewModel(params) {
        AccountViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
        jQuery('ul.transactions a').click(function () {
            nav.ajaxPost(jQuery(this).attr('href'),
                     null,
                     processTransactionsResponse);

            return false;
        });

        jQuery('div.button-group a.disabled').click(function (e) {
            e.preventDefault();
        });
    }

    /* ---------------------
    Transactions Start
    --------------------- */

    function processTransactionsResponse(data) {
        jQuery('#transaction-details').html(data);
        jQuery('#transaction-details ul.display-list').each(function () { jQuery(this).children("li:odd").addClass('alt'); });
        jQuery('.popup').click(function () { jQuery('#transaction-window').fadeOut('fast'); });
        common.showPopup(jQuery('#transaction-window'));
        msgBusService.publish('account.processed', 'transaction');

    }

    /* ---------------------
    Transactions Finish
    --------------------- */

    AccountTransactionViewModel.prototype = Object.create(AccountViewModel.prototype, {

    });
    Object.defineProperty(AccountTransactionViewModel, 'constructor', {
        enumerable: false,
        value: AccountTransactionViewModel
    });

    return AccountTransactionViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(46), __webpack_require__(4), __webpack_require__(5),__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, AccountViewModel, msgBusService, common, nav) {
    function AccountWithdrawalViewModel(params) {
        AccountViewModel.call(this, {
            backUrl: params.backUrl,
            backText: params.backText
        });
    }

    /* ---------------------
    Withdrawal Start
    --------------------- */

    function postWithdrawal() {
        nav.ajaxPost(
            jQuery('form#withdrawal-form').attr('action'),
            jQuery('form#withdrawal-form').serialize(),
            processWithdrawalResponse,
            {
                control: jQuery('#withdrawal-button')
            }
        );
    }

    function processWithdrawalResponse(data) {
        jQuery('#content').html(data);
        msgBusService.publish('account.processed', 'withdrawal');
    }

    /* ---------------------
    Withdrawal Finish
    --------------------- */

    AccountWithdrawalViewModel.prototype = Object.create(AccountViewModel.prototype, {
        postWithdrawal: {
            value: postWithdrawal
        }
    });
    Object.defineProperty(AccountWithdrawalViewModel, 'constructor', {
        enumerable: false,
        value: AccountWithdrawalViewModel
    });

    return AccountWithdrawalViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(52), __webpack_require__(87)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, deviceIdService, lbs) {
    var deviceDownloadLines = ko.observableArray([]);
    var deviceDownloadLinks = ko.observableArray([]);

    return {
        initView: initView,
        deviceDownloadLines: deviceDownloadLines,
        deviceDownloadLinks: deviceDownloadLinks
    }

    function filterLinksForDevice(rawDeviceDownloadLinks) {
        return _.filter(rawDeviceDownloadLinks, function(link) {
            var isInAndroidBrowser = deviceIdService.isInAndroidBrowser();
            var isInIosBrowser = deviceIdService.isInIosBrowser();
            var isInMobileBrowser = deviceIdService.isInMobileBrowser();
            if (!isInMobileBrowser) return true;
            if (isInAndroidBrowser && link.name == 'Android') {
                return true;
            }
            if (isInIosBrowser && link.name == 'iPhone') {
                return true;
            }
            return false;
        });
    }

    function initView(rawDeviceDownloadLinks) {
        lbs.initView();
        deviceDownloadLines([
            "Download the free app to get access to:", 
            "Every race and sporting events covered by the TAB",
            "Fixed and tote odds side by side for most races",
            "Watch Sky racing live",
            "Listen to TABradio" ,
            "Mystery Bets and Jackpots" ,
            "Track your favourites with Blackbook+ and never miss a runner again.",
        ]);
        deviceDownloadLinks(filterLinksForDevice(rawDeviceDownloadLinks));
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
    return {
        init: function() {
            var $raceButtonUrl = jQuery('#racesReturnUrl');
            if ($raceButtonUrl.length > 0) {
                jQuery('#racesReturnButton').attr('href', $raceButtonUrl.val());
            }
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, messageBusService) {
    var fob = FOB,
        offers = OFFERS,
        tote = TOTE;

    return {
        init: function() {
                
            offers.initOffersHelp();

            fob.initButton(jQuery('.place-bet'), function (data) {
                fob.noback(data);
                    
                messageBusService.publish('bet.single.receipt', {
                    betType: 'fobsports',
                    ticket: jQuery('ul').find(':contains("Ticket")').find('span.data').html(),
                    fobWinValue: jQuery('ul').find(':contains("Win Bet Amount")').find('span.data').html(),
                    fobPlaceValue: jQuery('ul').find(':contains("Place Bet Amount")').find('span.data').html()
                });
            });

            fob.initPost(jQuery('.place-foo-bet'), jQuery('form#betting-form'), function (data) {
                tote.changeToteStarterState(tote.states.receipt, data);
                    
                var specialOffer = jQuery('[data-key="special-offer-title"]').html();

                messageBusService.publish('bet.single.receipt', {
                    betType: 'fobracing',
                    ticket: jQuery('ul').find(':contains("Ticket")').find('span.data').html(),
                    fobWinValue: jQuery('ul').find(':contains("Win Bet Amount")').find('span.data').html(),
                    fobPlaceValue: jQuery('ul').find(':contains("Place Bet Amount")').find('span.data').html(),
                    specialOffer: jQuery.trim(specialOffer)
                });
            });
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(1),
        __webpack_require__(7),
        __webpack_require__(30),
        __webpack_require__(4),
        __webpack_require__(69),
        __webpack_require__(52),
        __webpack_require__(55),
        __webpack_require__(81),
        __webpack_require__(41)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, tabtouch, featureService, msgBusService, accountMonitoringService, deviceIdentificationService, analyticsService, jockeyJsMessageService, checkInService) {
        var tabAndTrackButtonText = ko.observable("FIND A TAB");
        var tabAndTrackUrl = ko.observable("/#tablocator/");

        return {
            initView: initHome,
            tabAndTrackButtonText: tabAndTrackButtonText,
            tabAndTrackUrl: tabAndTrackUrl
        };

        function initHome() {
            tabtouch.initHome();
            checkFeatures();
        }

        function tabAndTrack() {
            tabAndTrackButtonText('Check In');
            var locationId = checkInService.checkedInLocationId();
            if (locationId !== undefined && locationId !== null && locationId !== '') {
                tabAndTrackUrl('/#lbs/attheraces?code=GPS' + '&id=' + locationId);
            } else {
                tabAndTrackUrl('/#lbs/checkin');
            }
        }

        function findATab() {
            tabAndTrackButtonText('FIND A TAB');
            tabAndTrackUrl('/#tablocator/');
        }

        function checkFeatures() {
            findATab();
            featureService.isActive("LocationBasedServices")
                .then(function(active) {
                    if (active) {
                        featureService.isActive("HomeTabAndTrack")
                            .then(function(active) {
                                if (active) {
                                    tabAndTrack();
                                }
                            });
                    }
                });
        }
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37), __webpack_require__(3), __webpack_require__(44), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (requirejs, nav, apiService, errorHandler) {
    var _delegate = {
        handle401: function() {
            _apiServiceError();
        },
        showError: function (message, ok) {
           errorHandler.showErrorPopup("Communication Error", message);
        }
    };

    var _apiServiceError = function() {
        _delegate.showError("Sorry, We were unable to retrieve your communication preferences. Please try again later.");
    }

    var _init = function (element) {
        nav.showLoading();

        apiService.fetchJsonFromApi("/api/config/RwwaPreferencesHost").then(function (hostUrl) {
            apiService.fetchJsonFromApi(hostUrl).then(function (data) {
                requirejs([data.components.react.version[0]], function(lib) {
                    lib.init(hostUrl, element, _delegate);
                    nav.hideLoading();
                }, _apiServiceError);
            }).catch(_apiServiceError);
        }).catch(_apiServiceError);
    };

    return {
        init: _init
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(104), __webpack_require__(102), __webpack_require__(100), __webpack_require__(141) /* for mocking */], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, tabsComponentViewModel, quickPickPageComponentViewModel, customiseBetPageComponentViewModel, window) {
        var TOTE = window.TOTE;

        return function(viewModel, backUrl, backText) {

            var self = this;

            /* private vars */
            var _backUrl;
            var _backText;

            /* private function */


            /* class constructor */
            (function ctor() {
                _backUrl = backUrl;
                _backText = backText;

                TOTE.initToteMystery(_backUrl, _backText, true);

                //Tabs
                var tabNamesArray = [];
                tabNamesArray.push("QUICK PICK");
                tabNamesArray.push("CUSTOMISE BET");
                self.TabsComponentViewModel = new tabsComponentViewModel(tabNamesArray);
                self.TabsComponentViewModel.ActiveTab.subscribe(function (newValue) {
                    if (newValue.Name === "QUICK PICK") {
                        self.QuickPickPageComponentViewModel.UpdatePage();
                    }
                    if (newValue.Name === "CUSTOMISE BET") {
                        self.CustomiseBetPageComponentViewModel.UpdatePage();
                    }
                });

                self.ProductCode = ko.observable("");
                self.OptionNumber = ko.observable(0);
                self.NumberOfBets = ko.observable(0);
                self.Investment = ko.observable(0);
                self.PlaceInvestment = ko.observable(0);
                self.TotalCost = ko.observable(0);
                self.AccountButtonDisabled = ko.observable(true);
                self.CashButtonDisabled = ko.observable(true);
                self.CashButtonVisible = ko.observable(false);
                self.BetSlipButtonDisabled = ko.observable(true);
                self.BetSlipButtonVisible = ko.observable(false);

                //Quick Picks
                self.QuickPickPageComponentViewModel = new quickPickPageComponentViewModel({
                    ProductCode: self.ProductCode,
                    OptionNumber: self.OptionNumber,
                    NumberOfBets: self.NumberOfBets,
                    Investment: self.Investment,
                    PlaceInvestment: self.PlaceInvestment,
                    TotalCost: self.TotalCost,
                    AccountButtonDisabled: self.AccountButtonDisabled,
                    CashButtonDisabled: self.CashButtonDisabled,
                    CashButtonVisible: self.CashButtonVisible,
                    BetSlipButtonDisabled: self.BetSlipButtonDisabled,
                    BetSlipButtonVisible: self.BetSlipButtonVisible,
                    DisabledMysteryProducts: viewModel.DisabledMysteryOptions
                });
                
                //Bet Types
                self.CustomiseBetPageComponentViewModel = new customiseBetPageComponentViewModel({
                    ProductCode: self.ProductCode,
                    OptionNumber: self.OptionNumber,
                    NumberOfBets: self.NumberOfBets,
                    Investment: self.Investment,
                    PlaceInvestment: self.PlaceInvestment,
                    TotalCost: self.TotalCost,
                    AccountButtonDisabled: self.AccountButtonDisabled,
                    CashButtonDisabled: self.CashButtonDisabled,
                    CashButtonVisible: self.CashButtonVisible,
                    BetSlipButtonDisabled: self.BetSlipButtonDisabled,
                    BetSlipButtonVisible: self.BetSlipButtonVisible,
                    DisplayQuaddie: viewModel.Race.IsFirstQuaddieRace,
                    QuaddieRaceNumbers: viewModel.Race.QuaddieRaceNumbers,
                    DisabledMysteryProducts: viewModel.DisabledMysteryOptions
                });
                ko.tasks.runEarly();
                self.QuickPickPageComponentViewModel.UpdatePage();
            })();

            self.closeCalc = function () {
                self.CustomiseBetPageComponentViewModel.HideActiveCalculator();
            }
        }
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
    __webpack_require__(0),
    __webpack_require__(1),
    __webpack_require__(7),
    __webpack_require__(30),
    __webpack_require__(8),
    __webpack_require__(73),
    __webpack_require__(59),
    __webpack_require__(4),
    __webpack_require__(69),
    __webpack_require__(52),
    __webpack_require__(22),
    __webpack_require__(41),
    __webpack_require__(62),
    __webpack_require__(63),
    __webpack_require__(116),
    __webpack_require__(117),
    __webpack_require__(114),
    __webpack_require__(115),
    __webpack_require__(27)
], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, ko, tabtouch, featureService, preferencesService, locationProvider, locationService, msgBusService, accountMonitoringService, deviceIdentificationService, loggingService, checkInService, lbsConfigService, base64, gpsStore, locationStore, checkInStore, geofenceService, cookies) {
    var homeUrl = '/#';
    var defaultCoords = {
        latitude: -31.937240, 
        longitude: 115.922925,
        accuracy: 3
    };
    var gpsStatus = 0; // 0 = good 1 = gps unavailable 2 = unknown location
    var currentVersionCookieName = 'androidapp';
    var cashBettingEnabled = ko.observable(preferencesService.cashBettingEnabled());
    var bettingPageRefreshEnabled = ko.observable(preferencesService.bettingPageRefreshEnabled());
    var showBettingPageRefresh = ko.observable(false);
    var locationServicesEnabled = ko.observable(preferencesService.locationServicesEnabled());
    var locationServicesSwitchVisible = ko.observable(false);
    var gpsTestFireFeature = ko.observable(false);
    var gpsTestFireButtonVisible = ko.computed(function() { return locationServicesEnabled() && gpsTestFireFeature(); });
    var gpsTestFireInput = ko.observable(defaultCoords.latitude + ',' + defaultCoords.longitude + ',' + defaultCoords.accuracy);
    var gpsTestFireActive = ko.observable(false);
    var currentLocations = ko.observable(locationService.getLocationDetails());
    var showCookieButton = ko.observable(false);
    var currentCoords = ko.observable('');
    var locationProviderOnOffText = ko.observable("");
    var checkedInText = ko.observable("");
    var versionCookieName = ko.observable(currentVersionCookieName);
    var versionNumber = ko.observable("1.10");
    var capabilities = ko.observable("LocationServices");
    var closestFence = ko.observable("");

    featureService.isActive('BettingPageRefreshToggle')
        .then(function(isActive) {
            showBettingPageRefresh(isActive);
        });

    var fauxNativeGps = {
        isActive: gpsTestFireActive(),
        latitude: defaultCoords.latitude,
        longitude: defaultCoords.longitude,
        accuracy: defaultCoords.accuracy
    }

    return {
        initView: initView,
        locationServicesSwitchVisible: locationServicesSwitchVisible,
        locationServicesEnabled: locationServicesEnabled,
        cashBettingEnabled: cashBettingEnabled,
        bettingPageRefreshEnabled: bettingPageRefreshEnabled,
        showBettingPageRefresh: showBettingPageRefresh,
        gpsTestFireButtonVisible: gpsTestFireButtonVisible,
        gpsTestFireInput: gpsTestFireInput,
        gpsToggleTestFire: gpsToggleTestFire,
        gpsTestFireActive: gpsTestFireActive,
        gpsUpdateTestFire: gpsUpdateTestFire,
        gpsStart: gpsStart,
        gpsStop: gpsStop,
        gpsErrorNoLocation: gpsErrorNoLocation,
        gpsErrorUnavailable: gpsErrorUnavailable,
        setCookie: setCookie,
        removeCookie: removeCookie,
        currentLocations: currentLocations,
        toggleCashBetting: toggleCashBetting,
        toggleBettingPageRefresh: toggleBettingPageRefresh,
        toggleLocationServices: toggleLocationServices,
        showCookieButton: showCookieButton,
        currentCoords: currentCoords,
        locationProviderOnOffText: locationProviderOnOffText,
        showCheckOut: showCheckOut,
        checkedInText: checkedInText,
        versionCookieName: versionCookieName,
        versionNumber: versionNumber,
        capabilities: capabilities,
        clearLocalStorage: clearLocalStorage,
        closestFence: closestFence,
        refresh: refreshDisplay
    }

    function initView() {
        refreshToggles();
        tabtouch.initCommon(homeUrl, "Home");
        gpsSubscribe();
        setupLoginRefresh();
        checkFeatures();
    }

    function refreshDisplay() {        
        refreshCoords();
        refreshLocationDetailsView();
        refreshLocationProviderDetails();
        refreshCheckedInDetails();
    }

    function clearLocalStorage() {
        locationStore.clear();
        checkInStore.clear();
        gpsStore.clear();
        refreshDisplay();
    }

    function refreshCheckedInDetails() {
        var checkedInLocationId = checkInService.checkedInLocationId();
        if (checkedInLocationId !== '') {
            checkedInText('Checked in at ' + checkedInLocationId + ' Award ' + ((checkInService.wasRedeemedToday() === true) ? 'Redeemed' : 'not yet Redeemed'));
        } else {
            checkedInText('Not checked in today');
        }
    }

    function refreshLocationProviderDetails() {       
        if (locationProvider.isActive()) {
            locationProviderOnOffText("Location Provider is On");
        } else {
            locationProviderOnOffText("Location Provider is Off");
        }
    }

    function showCheckOut() {
        var checkedInLocationId = checkInService.checkedInLocationId();
        return (checkedInLocationId !== '');
    }

    function setCookie() {
        removeCookie();
        cookies.set(versionCookieName(), versionNumber());
        cookies.set('AppCapability', base64.encode(capabilities()));
        currentVersionCookieName = versionCookieName();
    }

    function removeCookie() {
        cookies.remove(currentVersionCookieName);
        cookies.remove('AppCapability');
    }

    function refreshToggles() {
        cashBettingEnabled(preferencesService.cashBettingEnabled());
        locationServicesEnabled(preferencesService.locationServicesEnabled());
    }

    function toggleCashBetting() {
        var currentValue = preferencesService.cashBettingEnabled();
        currentValue = preferencesService.cashBettingEnabled(!currentValue);
        cashBettingEnabled(currentValue);
        msgBusService.publish('preferences.cash', currentValue);
    }

    function toggleBettingPageRefresh() {
        var currentValue = preferencesService.bettingPageRefreshEnabled();
        currentValue = preferencesService.bettingPageRefreshEnabled(!currentValue);
        bettingPageRefreshEnabled(currentValue);
        msgBusService.publish('preferences.bettingPageRefresh', currentValue);
    }

    function toggleLocationServices() {
        setLocationPreference(!preferencesService.locationServicesEnabled());
    }

    function gpsStart() {
        locationProvider.start();
        refreshDisplay();
    }

    function gpsStop() {
        locationProvider.stop();
        refreshDisplay();
    }

    function refreshClosestFenceDisplay(position) {
        var bufferZone = lbsConfigService.getParameters().maxOutsideDistance;
        if (position !== null) {
            closestFence('Closest Fence: ' + JSON.stringify(geofenceService.getClosestFence(position)) + ' Buffer Zone: ' + bufferZone);
        } else {
            closestFence('Closest Fence: N/A');
        }
    }

    function gpsToggleTestFire() {
        gpsStatus = 0;
        if (!gpsTestFireActive()) {
            var inputs = gpsTestFireInput().split(',');
            fauxNativeGps.latitude = Number(inputs[0]);
            fauxNativeGps.longitude = Number(inputs[1]);
            fauxNativeGps.accuracy = Number(inputs[2]);
            setupFauxNativeGpsFire();
            refreshClosestFenceDisplay({
                coords: {
                    latitude: fauxNativeGps.latitude,
                    longitude: fauxNativeGps.longitude,
                    accuracy: fauxNativeGps.accuracy
                }
            });
        }
        fauxNativeGps.isActive = !fauxNativeGps.isActive;
        gpsTestFireActive(fauxNativeGps.isActive);
    }

    function setupFauxNativeGpsFire() {
        fireNativeGps();
        setTimeout(function () {
            if (fauxNativeGps.isActive) {
                setupFauxNativeGpsFire();
            }
        }, lbsConfigService.getParameters().gpsTimeoutMs / 4);
    }

    function gpsUpdateTestFire() {
        var inputs = gpsTestFireInput().split(',');
        fauxNativeGps.latitude = Number(inputs[0]);
        fauxNativeGps.longitude = Number(inputs[1]);
        fauxNativeGps.accuracy = Number(inputs[2]);
        gpsStatus = 0;
        if (gpsTestFireActive()) {
            fireNativeGps();
        }
        refreshClosestFenceDisplay({
            coords: {
                latitude: fauxNativeGps.latitude,
                longitude: fauxNativeGps.longitude,
                accuracy: fauxNativeGps.accuracy
            }
        });
    }

    function fireNativeGps() {
        if (gpsStatus === 0) {
            var position = {
                coords: {
                    latitude: fauxNativeGps.latitude,
                    longitude: fauxNativeGps.longitude,
                    accuracy: fauxNativeGps.accuracy
                }
            };
            console.log('fireNativeGps => ' + JSON.stringify(position));
            msgBusService.publish('NATIVEGPSCOORDINATES', position);
            //locationProvider.testfire(position);
        } else if (gpsStatus === 1) {
            console.log('fireNativeGps => Unavailable');
            msgBusService.publish('NATIVEGPSERROR', { code: '1', message: 'Gps Is Off' });
            //locationProvider.testfail({ code: 1, message: 'Gps Is Off' });
        } else {
            console.log('fireNativeGps => No Location');
            msgBusService.publish('NATIVEGPSERROR', { code: '2', message: 'No location!' });
            //locationProvider.testfail({ code: 2, message: 'No location!' });   
        }
    }

    function gpsErrorNoLocation() {
        gpsStatus = 2;
    }

    function gpsErrorUnavailable() {
        gpsStatus = 1;
    }

    function setupLoginRefresh() {
        accountMonitoringService
            .onLogin(checkFeatures)
            .onLogout(checkFeatures)
            .start();
    }

    function refreshCoords() {
        var data = gpsStore.get();
        if (data !== null && data !== undefined) {
            var timeStamp = new Date(data.timeStamp);
            if (data.position) {
                refreshClosestFenceDisplay(data.position);
                currentCoords('Stored GPS Location @ [' + timeStamp.toLocaleDateString() + ' ' + timeStamp.toLocaleTimeString() + '] => ' + data.position.coords.latitude + ',' + data.position.coords.longitude + ',' + data.position.coords.accuracy);
            } else if (data.error) {
                refreshClosestFenceDisplay(null);
                currentCoords('Stored GPS Error @ [' + timeStamp.toLocaleDateString() + ' ' + timeStamp.toLocaleTimeString() + '] => code=' + data.error.code + ', msg=' + data.error.message);
            } else {
                refreshClosestFenceDisplay(null);
                currentCoords('No Store Gps Location');
            }
        } else {
            refreshClosestFenceDisplay(null);
            currentCoords('No Store Gps Location');
        }
    }

    function gpsError(data) {
        var msg = 'settings : GPSERROR - code=[' + data.code + '] message=[' + data.message + ']';
        loggingService.logDebug(msg);
        refreshDisplay();
    }

    function gpsSuccess(data) {
        var msg = 'settings : GPSSUCCESS - data=[' + data.position.coords.latitude + ',' + data.position.coords.longitude + ',' + data.position.coords.accuracy + ']';
        loggingService.logDebug(msg);
        refreshDisplay();
    }

    function gpsUnsubscribe() {
        var msg = 'settings : gpsUnsubscribe';
        loggingService.logDebug(msg);
        msgBusService.unsubscribe('GPSERROR', gpsError);
        msgBusService.unsubscribe('GPSSUCCESS', gpsSuccess);
        msgBusService.unsubscribe('nav.nav', gpsUnsubscribe);
    }

    function gpsSubscribe() {
        var msg = 'settings : gpsSubscribe';
        loggingService.logDebug(msg);
        msgBusService.subscribe('GPSERROR', gpsError);
        msgBusService.subscribe('GPSSUCCESS', gpsSuccess);
        msgBusService.subscribe('nav.nav', gpsUnsubscribe);
    }

    function setLocationPreference(value) {
        preferencesService.locationServicesEnabled(value);
        locationServicesEnabled(value);
        if (value) {
            gpsSubscribe();
            locationProvider.start();
        } else {
            locationProvider.stop();
            locationService.clearAll();
            refreshLocationDetailsView();
            gpsUnsubscribe();
        }
    }

    function refreshLocationDetailsView() {
        var locationDetails = locationService.getLocationDetails();
        currentLocations(locationDetails);
    }

    function lbsInMobileApp() {
        featureService.isActive("LocationBasedServices")
            .then(function(active) {
                locationServicesSwitchVisible(active);
                refreshDisplay();
                if (!active) {
                    setLocationPreference(false);
                }
            });
        featureService.isActive("GPSTestFire")
            .then(function(active) {
                gpsTestFireFeature(active);
                showCookieButton(active);
            });
    }

    function lbsInBrowserApp(reason) {
        featureService.isActive("GPSTestFire")
            .then(function(active) {
                showCookieButton(active);
            });
        locationServicesSwitchVisible(false);
        setLocationPreference(false);
    }

    function checkFeatures() {
        deviceIdentificationService.isInMobileApp([{Value:'LocationServices',ErrorResponse:'Version'}],lbsInMobileApp , lbsInBrowserApp);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(39)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, moment) {

    var self;

    var tote = window.TOTE,
        toteSel = window.TOTESEL;

    /* private function */
    var supportsSNotation = function (toteBetType) {
        switch (toteBetType) {
            case 'Trifecta':
            case 'Exacta':
            case 'First4':
                return true;
        }

        return false;
    };

    var isMultiRaceBet = function (toteBetType) {
        switch (toteBetType) {
            case 'Double':
            case 'Quaddie':
            case 'AllUp':
                return true;
        }

        return false;
    };

    var executeTabInitialisationFunction = function (model) {
        var raceArray = [];
        model.BetViewModel.Tabs.forEach(function (tab) {
            raceArray.push(tab.RaceNo);
        });

        toteSel.initTabArray(
            model.BetViewModel.Tabs.length,
            raceArray,
            true, // All Bet types now support Field
            supportsSNotation(model.BetViewModel.BetTypeString),
            isMultiRaceBet(model.BetViewModel.BetTypeString),
            (model.BetViewModel.BetTypeString === 'Quinella'),
            (model.BetViewModel.BetTypeString === 'AllUp'),
            model.BetViewModel.HasPreselections
        );
        return;
    };

    /* class constructor */
    function StartersPageViewModel(model, backUrl, backText) {
        self = this;
        if (model.BetViewModel.IsRefresh) {
            tote.refreshToteStarterList(backUrl, backText, model.BetViewModel.BetTypeString === "Quinella");
        } else {
            tote.initToteStarterList(backUrl, backText, model.BetViewModel.BetTypeString === "Quinella");
            executeTabInitialisationFunction(model);
            if (model.BetViewModel.HasPreselections) {
                tote.preselect(tote.states.calc);
            }
        }
    }

    StartersPageViewModel.prototype = Object.create(Object.prototype, {
    });

    Object.defineProperty(StartersPageViewModel, 'constructor', {
        enumerable: false,
        value: StartersPageViewModel
    });

    return StartersPageViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Handles the "Tab Locator" page. Uses the Google Maps API (assumes GOG in window). API calls has callback initLocator().
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(7), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, tabtouch, common) {
    var getPositionTimeOut;
    var geoCodeWatchId;
    var loadingOverlay;
    var currentLocationRequestInProgress;
    var canUpdateLocation = true;
    var newPosition;
    var monitorLocationTimeout;
    var mapDefaultHeight = 600;
    var followingGPS = false;
    var hasGoogleMapsBeenFetched = false;


    function initPage(url, backText, displayTitle) {
        if (displayTitle === "True") {
            jQuery('#header-container').hide();
        }

        tabtouch.initCommon(url, backText);

        if (hasGoogleMapsBeenFetched) {
            initLocator();
        } else {
            jQuery.ajax("https://maps.google.com/maps/api/js?sensor=false&callback=LOC.initLocator", { method: "GET", cache: true, dataType: 'script' });
            hasGoogleMapsBeenFetched = true;
        }
    }

    function initLocator() {


        loadingOverlay = jQuery('#loading-overlay');

        jQuery('#directions, #viewDirectionButton, #newLocation').hide();

        addHandlers();

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (geoLocation) {
                GOG.setUsersGeoLocation(geoLocation);
                if (canUpdateLocation) {
                    GOG.updateFromCurrentLocation(geoLocation);
                    followingGPS = true;
                    geoCodeWatchId = navigator.geolocation.watchPosition(handlePositionChange);
                    monitorCurrentLocation();
                }
            });

            setTimeout(function () {
                canUpdateLocation = false;
            }, 10000);

            loadingOverlay.hide();
        }

        setMapHeight();
        GOG.initialise();
        GOG.viewMap(true);
        
        jQuery('#tabtouch-notification, #tablocator-intro-notification').css({ 'height': jQuery(document).height() });
    }

    function setMapHeight() {
        var maxAllowedHeight = jQuery(window).height() - jQuery('#tabTypeSelectionContainer').height() - jQuery('#viewList').height() - 50;
        jQuery("#map_canvas").height(Math.min(mapDefaultHeight, maxAllowedHeight));

        GOG.resizeGoogleMap();
    }

    function addHandlers() {
        jQuery('#SL1Item').click(function () { monitorChangeLocationRequest(function () { GOG.boxclick('SL1'); }); });
        jQuery('#SL2Item').click(function () { monitorChangeLocationRequest(function () { GOG.boxclick('SL2'); }); });
        jQuery('#SL3Item').click(function () { monitorChangeLocationRequest(function () { GOG.boxclick('SL3'); }); });

        var addressTextBox = jQuery('#address');

        jQuery('#currentLocation').click(function () {
            addressTextBox.val('');
            addressTextBox.blur();
            if (!currentLocationRequestInProgress) {
                currentLocationRequestInProgress = true;
                monitorChangeLocationRequest(changeLocationToCurrentLocation);
            }
        });

        jQuery('#viewList').click(viewList);
        jQuery('#viewMapButton').click(viewMap);
        jQuery('#viewDirectionButton').click(viewDirections);


        var goButton = jQuery('#go_button');
        goButton.click(function () {
            addressTextBox.blur();

            monitorChangeLocationRequest(function () {
                if (!addressTextBox.hasClass('watermark-textbox')) {
                    clearLocationWatch();
                    followingGPS = false;
                    var query = addressTextBox.val();
                    GOG.geocode(query);
                }
            });
        }
        );

        addressTextBox.keydown(function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                goButton.click();
            }
        });

        jQuery(window).resize(handleResize);

        jQuery('#directions').on("click", "tr", function () {
            GOG.viewMap();
            GOG.closeInfoWindow();
        });
    }

    function handleResize() {
        if (jQuery('#map_canvas').length == 0) {
            jQuery(window).unbind('resize', handleResize);
            return;
        }

        setMapHeight();
        jQuery('#tabtouch-notification, #tablocator-intro-notification').css({ 'height': jQuery(document).height() });
        loadingOverlay.css({ 'height': jQuery(document).height() });
    }

    function changeLocationToCurrentLocation() {
        loadingOverlay.show();
        clearLocationWatch();
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(handleSuccessfulLocationFind);
            clearTimeout(getPositionTimeOut);
            getPositionTimeOut = setTimeout(handleGetCurrentPositionError, 10000);
        }
        loadingOverlay.hide();
    }

    function clearLocationWatch() {
        navigator.geolocation.clearWatch(geoCodeWatchId);
        clearTimeout(monitorCurrentLocation);
    }

    function handleSuccessfulLocationFind(pos) {
        currentLocationRequestInProgress = false;
        clearTimeout(getPositionTimeOut);
        GOG.updateFromCurrentLocation(pos);
        followingGPS = true;
        geoCodeWatchId = navigator.geolocation.watchPosition(handlePositionChange);
        monitorCurrentLocation();
    }

    function handlePositionChange(position) {
        newPosition = position;
    }

    function monitorCurrentLocation() {
        var currentPosition = GOG.getCurrentLocation();

        if (newPosition &&
            (newPosition.coords.latitude !== currentPosition.latitude ||
            newPosition.coords.longitude !== currentPosition.longitude) &&
            !currentLocationRequestInProgress && followingGPS) {
            var distanceTravelledLessThen100 = GOG.getDistanceBetweenGeoLocations(newPosition.coords.latitude, newPosition.coords.longitude, currentPosition.latitude, currentPosition.longitude) < 100;
            GOG.updateFromCurrentLocation(newPosition, true, distanceTravelledLessThen100);
        }

        if (jQuery('#map_canvas').length > 0) {
            monitorLocationTimeout = setTimeout(monitorCurrentLocation, 5000);
        } else {
            navigator.geolocation.clearWatch(geoCodeWatchId);
        }
    }

    function monitorChangeLocationRequest(callback) {
        if (GOG.canUpdateLocation()) {
            callback();
            loadingOverlay.hide();
        } else {
            loadingOverlay.show();
            setTimeout(function () { monitorChangeLocationRequest(callback); }, 2000);
        }
    }

    function handleGetCurrentPositionError() {
        currentLocationRequestInProgress = false;
        clearTimeout(getPositionTimeOut);
        common.showPopup(jQuery('#tabtouch-notification'));
    }

    function viewList() {
        jQuery('#map_container, #directions, #viewDirectionButton').hide();
        jQuery('#location_list, #viewMapButton, #tabTypeSelectionContainer').show();
    }

    function viewDirections() {
        jQuery('#map_container, #viewDirectionButton, #location_list, #tabTypeSelectionContainer').hide();
        jQuery('#directions, #viewMapButton').show();
    }

    function viewMap() {
        GOG.viewMap();
    }

    return {
        initLocator: initLocator,
        monitorChangeLocationRequest: monitorChangeLocationRequest,
        initPage: initPage
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(7), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, nav, tabtouch, tip) {
    return {
        init: initToteSportsCurrent
    };

    function initToteSportsCurrent(url, backText) {
        tabtouch.initCommon(url, backText);

        tip.initHomeButton();

        jQuery('.totesports-pool').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('.refresh-button').click(function () {
            return refreshPools();
        });
    }

    function refreshPools() {
        return nav.refresh();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, nav, tip) {
    return {
        init: initToteSportsError
    };

    function initToteSportsError(backUrl, backText) {
        jQuery('#btnBetErrorBackToPools').click(function() {
            return tip.navigateErrorToHref(jQuery(this));
        });

        jQuery('#btnBetErrorBackToGames').click(function () {
            return tip.navigateErrorToHref(jQuery(this));
        });

        jQuery('#btnBetErrorBackToCalc').click(function () {
            return handleBetError(tip.states.calc);
        });

        jQuery('#btnBetErrorDone').click(function () {
            return handleBetError(tip.states.none);
        });
    }

    //Returns the bet to a new state after an error has occurred
    //only supported states are none and calculator (which don't require data).
    function handleBetError(newState) {
        nav.hideErrorPopup();
        return tip.changeTippingState(newState);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(7), __webpack_require__(5), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jquery, nav, tabtouch, common, tip) {
    var checked = "checked";
    var teams = { A: "Away", D: "Draw", H: "Home" };
    var gameArray = []; //Array holding the checkbox name for each game.

    return {
        init: initToteSportsGames
    };

    function initToteSportsGames(url, backText) {
        tabtouch.initCommon(url, backText);
        common.initSlideToggleHandlers();

        CALC.initCommonCalculator(false);
        CALC.initCalculator('calculator');

        tip.initHomeButton();

        jQuery('.refresh-button').click(function () {
            refreshGames();
            return false;
        });

        //create the game array -- grab all the home checkbox names.
        gameArray = [];
        jQuery('#tip-list input[type="checkbox"][value="H"]').each(function () {
            gameArray.push(jQuery(this).attr('name'));
        });

        jQuery('button.cancel').click(function () {
            jQuery('#tip-list input[type="checkbox"]').removeAttr(checked);
            updateUIState();
        });

        jQuery('button.place-bet-player').click(function () {
            saveSelections();
            tip.changeTippingState(tip.states.calc);
        });

        jQuery('#tip-list input[type="checkbox"]').change(function () {
            updateUIState();
        });

        tip.initInfoScroll();
        initProcessButtons();
        updateUIState();
    }


    function refreshGames() {
        saveSelections();
        saveInvestment();
        var action = jQuery('.refresh-button').attr('href');
        nav.ajaxPost(action,
                     jQuery('form#betting-form').serialize(),
                     processRefreshResponse);
    }

    function initProcessButtons() {
        jQuery("a#betcost").click(function () {
            if (jQuery(this).is('.disabled') === false) {

                saveInvestment();
                nav.ajaxPost(jQuery(this).attr('href'),
                   jQuery('form#betting-form').serialize(),
                   processBetCostResponse,
                   {
                       control: jQuery(this)
                   }
                );
            }
            return false;

        });

        jQuery("a#bettingFormNext").click(function () {
            if (jQuery(this).is('.disabled') === false) {

                saveInvestment();
                nav.ajaxPost(jQuery(this).attr('href'),
                    jQuery('form#betting-form').serialize(),
                    processProposeBetResponse);
            }
            return false;
        });
    }

    function saveSelections() {
        jQuery('#SelectionsString').val(extractSelectionArray(true).join('/'));
    }

    function saveInvestment() {
        jQuery('#Investment').val(jQuery('input.bet-value').val());
    }

    // Converts the current selections into an array for easy processing
    function extractSelectionArray(updateSelSummary) {
        var selections = [];
        var display;
        var gameRow;

        if (updateSelSummary) {
            jQuery('ul#sel-summary').html('');
        }

        for (var i = 0; i < gameArray.length; i++) {
            selections[i] = '';
            display = '';
            gameRow = jQuery('#tip-list li').eq(i);
            jQuery('#tip-list input[name="' + gameArray[i] + '"]:checked').each(function () {
                selections[i] += jQuery(this).val();
                if (updateSelSummary) {
                    display += ((display.length > 0) ? ', ' : '') + teams[jQuery(this).val()];
                }
            });

            if (updateSelSummary) {
                jQuery('ul#sel-summary').append('<li>Game ' + gameArray[i].substring(1) + ' - ' + gameRow.find('label.home').text() + ' v ' + gameRow.find('label.away').text() + '<br />' + display + '</span></li>');
            }
        }

        common.initDisplayListStyle(jQuery('ul#sel-summary'));

        return selections;
    }

    function processBetCostResponse(data) {
        common.showPopup(jQuery('#how-much').html(data));

        jQuery('#how-much').click(function () {
            jQuery(this).fadeOut('fast', function () {
                common.setDisableState(jQuery("a#betcost"), true);
            });
        });
    }

    function processProposeBetResponse(data) {
        tip.changeTippingState(tip.states.confirm, data);
    }

    function processRefreshResponse(data) {
        jQuery('#main-container').html(data);

        //test for existence of input#SelectionsString -- it won't be there if the pool has closed.
        if (jQuery("input#SelectionsString").length) {
            saveSelections();
        }
    }

    // Enables/Disables buttons based on the current selections
    function updateUIState() {
        var selections = extractSelectionArray(false);
        var noSelections = true;
        var allSelected = true;

        for (var i = 0; i < selections.length; i++) {
            if (selections[i] !== '') {
                noSelections = false;
            }

            if (selections[i] === '') {
                allSelected = false;
            }
        }

        common.setDisableState(jQuery('button.cancel'), !noSelections);
        common.setDisableState(jQuery('button.place-bet-player'), allSelected);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(5), __webpack_require__(7), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, nav, common, tabtouch, tip) {
    return {
        init: initToteSportsGamesResults
    };

    function initToteSportsGamesResults(url, backText) {
        tabtouch.init(url, backText);
        common.initSlideToggleHandlers();
        tip.initInfoScroll();

        tip.initHomeButton();

        jQuery('.refresh-button').click(function() {
            return refreshResults();
        });
    }

    function refreshResults() {
        return nav.refresh();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(33), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, tip, lda) {
    return {
        init: initToteSportsPropose
    };
   
    function initToteSportsPropose(backUrl, backText) {
        var locationDetailsAppender = new lda();

        jQuery('#btnCancel').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery("a#placeBetNow").click(function () {
            nav.ajaxPost(jQuery(this).attr('href'),
                locationDetailsAppender.addToUrlEncodedData(jQuery('form#betting-form').serialize()),
                processBetPlacedResponse,
                {
                    control: jQuery(this)
                }
            );

            return false;
        });
    }

    function processBetPlacedResponse(data) {
        tip.changeTippingState(tip.states.receipt, data);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(7), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, nav, tabtouch, tip) {
    return {
        init: initToteSportsResults
    };

    function initToteSportsResults(url, backText) {
        tabtouch.initCommon(url, backText);

        tip.initHomeButton();

        jQuery('.totesports-pool').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('.refresh-button').click(function () {
            return refreshPools();
        });

        jQuery('#prev-day').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('#next-day').click(function () {
            return tip.navigateToHref(jQuery(this));
        });
    }

    function refreshPools() {
        return nav.refresh();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Used in JNSpec tests.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return window;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

window.BetSlipService = (function(betSlipStore, configurationService, locationDetailsAppender) {
    var _betSlipStore = betSlipStore || new window.BetSlipStore();
    var _configurationService = configurationService || new ConfigurationService();
    var _locationDetailsAppender = locationDetailsAppender || new LocationDetailsAppender();

    var maxBetsPerBetSlip = _configurationService.MaxBetsPerBetSlip;
    var _lock = new locking.lock();
    var _reloadUrl = '';
    var _reloadReceipt = false;

    function getBetSlip() {
        return _betSlipStore.get().Bets;
    }

    function getBetSlipCount() {
        return getBetSlip().length;
    }

    function isMaxBets(numberOfBetsToAdd) {
        var isMax = false;

        if (getBetSlipCount() + parseInt(numberOfBetsToAdd) > maxBetsPerBetSlip) {
            ErrorController.showErrorPopup("A maximum of " + maxBetsPerBetSlip + " bets are allowed in the bet slip.", null);
            isMax = true;
        }
        return isMax;
    }

    function onAddToBetSlipButtonClick (jsonModel) {
        var data = jQuery.param(jsonModel, true);
        addBetToBetSlip("/api/BetSlip/PostToteRacingBetToBetSlip", data, "/#betbuilder/betslip");
    }

    function addBetToBetSlip(url, data, betSlipUrl) {
        NAV.showLoading();
        var isMax = isMaxBets(1);
        if (isMax === false) {
            if (_lock.trylock()) {
                var request = jQuery.post(url, data);

                request.done(function (bets) {
                    if (_.isArray(bets)) {
                        //at moment, we only have list of bets for mystery,
                        //so, we will ignore the checks for all mystery bets
                        _.each(bets, function (bet) {
                            if ((bets.IsMystery !== undefined && bet.IsMystery === true) || !doesBetExistInBetSlip(bet)) {
                                addBetToBetSlipStore(bet);
                                NAV.navChange(betSlipUrl);
                            } else {
                                ErrorController.showErrorPopup("Same bet exists in bet slip", null);
                            }
                        });
                    } else {
                        if ((bets.IsMystery !== undefined && bets.IsMystery === true) || !doesBetExistInBetSlip(bets)) {
                            addBetToBetSlipStore(bets);
                            NAV.navChange(betSlipUrl);
                        } else {
                            ErrorController.showErrorPopup("Same bet exists in bet slip", null);
                        }
                    }
                });

                request.fail(function (http) {
                    if (http.status === 400) {
                        var caughtException = jQuery.parseJSON(http.responseText);
                        ErrorController.showErrorPopup(caughtException.Message, caughtException.ExceptionMessage);
                    } else {
                        NAV.ajaxError(http.status, http, false);
                    }
                });

                request.always(function () {
                    _lock.unlock();
                });
            }
        }
    }

    function addBatchBetsToBetSlip(numberOfBetsToAdd, url, data, betSlipUrl) {
        NAV.showLoading();
        var isMax = isMaxBets(numberOfBetsToAdd);
        if (isMax === false) {
            if (_lock.trylock()) {
                var request = jQuery.post(url, data);

                request.done(function (bets) {
                    _.each(bets, function (bet) {
                        addBetToBetSlipStore(bet);
                    });
                    NAV.navChange(betSlipUrl);
                });

                request.fail(function (http) {
                    if (http.status === 400) {
                        var caughtException = jQuery.parseJSON(http.responseText);
                        ErrorController.showErrorPopup(caughtException.Message, caughtException.ExceptionMessage);
                    } else {
                        NAV.ajaxError(http.status, http, false);
                    }
                });

                request.always(function () {
                    _lock.unlock();
                });
            }
        }
    }

    function addBetSlipClickHandler($button, getData, isMystery, beforeRequest) {
        $button.click(function (e) {
            if ($(this).is('.disabled') === false) {
                if (beforeRequest && !beforeRequest()) {
                    return false;
                } else {
                    e.preventDefault();
                    addBetToBetSlip($(this).attr('href'), getData(), $(this).attr('data-betslipurl'), isMystery);
                }
            }
            return false;
        });
    }

    function placeInStore(url, betWalletUrl, betWalletService) {
        if (_lock.trylock()) {
            var payLoad = {};
            payLoad.Bets = getBetSlip();
            payLoad.VisitorTrackingId = betWalletService.getVisitorTrackingId();
            var requestPayLoad = JSON.stringify(payLoad);
            var request = jQuery.ajax(url, {
                data: requestPayLoad,
                contentType: 'application/json; charset=utf-8',
                type: 'POST'
            });

            request.done(function (betslipseq) {
                if (!isNaN(betslipseq)) {
                    betWalletService.addBetSlip(betslipseq);
                    _betSlipStore.tag('wallet_' + betslipseq);
                    _betSlipStore.clear();
                    NAV.navChange(betWalletUrl);
                    MSG.publish('bet.cash.receipt', { ticket: betslipseq });
                }
            });

            request.fail(function (http) {
                if (http.status === 400) {
                    var caughtException = jQuery.parseJSON(http.responseText);
                    ErrorController.showErrorPopup(caughtException.Message, caughtException.ExceptionMessage);
                } else {
                    NAV.ajaxError(http.status, http, false);
                }
            });

            request.always(function () {
                _lock.unlock();
            });
        }
    }

    function canUndoPlaceInStore(restoreTag) {
        return restoreTag
            && (_.indexOf(_betSlipStore.history(), restoreTag) >= 0)
            && (getBetSlipCount() == 0);
    }

    function undoPlaceInStore(restoreTag) {
        return _betSlipStore.restore(restoreTag);
    }

    function reloadBetSlips() {
        loadBetSlips(_reloadUrl, _reloadReceipt);
    }

    function loadBetSlips(url, receipt) {
        var requestData;
        _reloadUrl = url;
        _reloadReceipt = receipt;
        if (receipt) {
            requestData = JSON.stringify({ betReceipts: receipt });
        } else {
            requestData = JSON.stringify({ bets: getBetSlip() });
        }
        NAV.ajaxPost(url,
            requestData,
            function (data) {
                $('#content').html(data);
            },
            {
                contentType: 'application/json; charset=utf-8'
            },
            true);
    }

    function addBetToBetSlipStore(bet) {
        var betSlip = _betSlipStore.get();
        betSlip.Bets.unshift(bet);
        _betSlipStore.set(betSlip);
        MSG.publish('bet.betslip.add', betSlip);
    };

    ///Please check on server side, how to generate same hashcode for the object with same value
    function doesBetExistInBetSlip(bet) {
        var betsInSlip = _betSlipStore.get().Bets;
        var result = jQuery.grep(betsInSlip, function (localBet) { return localBet.HashCode === bet.HashCode; });
        return result.length > 0;
    }

    function hasLiveBettingBets() {
        var betsInSlip = _betSlipStore.get().Bets;
        return _.some(betsInSlip, function(localBet) {
           return localBet.HasLiveBettingLegs;
        });
    }

    function hasBetWarning() {
        var betsInSlip = _betSlipStore.get().Bets;
        var result = jQuery.grep(betsInSlip, function (localBet) { return localBet.HasWarning === true; });
        return result.length > 0;
    }

    function hasBetError() {
        var betsInSlip = _betSlipStore.get().Bets;
        var result = jQuery.grep(betsInSlip, function (localBet) { return localBet.HasError === true; });
        return result.length > 0;
    }

    function calculateTotalCost() {
        var totalCost = 0;
        var bets = getBetSlip();
        for (var i = 0; i < bets.length; i++) {
            var bet = bets[i];
            totalCost += parseFloat(bet.ExpectedCost);
        }
        return totalCost;
    }

    function clearAll() {
        _betSlipStore.clear();
        return true;
    }

    function createBetSlipRequest(url) {
        // We need to send the data up in a url encoded format rather then json so the Verification Token will be picked up
        //  the to Dictionary make this conversion while maintaining a format the MVC model binder understands.
        var payload;
        var antiForgeryToken = $('#anti-forgery [name=__RequestVerificationToken]').val();
        var betSlip = getBetSlip();

        if (antiForgeryToken) {
            payload = jQuery.toDictionary({ bets: getBetSlip(), __RequestVerificationToken: antiForgeryToken });
        } else {
            payload = jQuery.toDictionary({ bets: betSlip });
        }
         
        payload = _locationDetailsAppender.addToDictionary(payload);
        var request = jQuery.ajax(url, {
            data: payload,
            type: 'POST'
        });
        return request;
    }

    function placeBetSlipNow(url, betSlipUrl) {
        if (_lock.trylock()) {
            NAV.showLoading();

            var request = createBetSlipRequest(url);

            request.done(function (draftBets) {
                _betSlipStore.set({ Bets: draftBets });
                loadBetSlips(betSlipUrl);
                MSG.publish('bet.betslip.review', draftBets);
            });

            request.error(function (xhr, textStatus) {
                var status = textStatus === "timeout" ? 0 : xhr.status;
                NAV.ajaxError(status, xhr, false);
            });

            request.always(function () {
                _lock.unlock();
            });
        }
    }

    function getFailedBetSlips(betReceipts) {
        var failedBetSlips = [];
        _.each(betReceipts, function (betReceipt) {
            if (betReceipt.Bet.HasError) {
                failedBetSlips.push(betReceipt.Bet);
            }
        });
        return failedBetSlips;
    }

    function commitBetSlipNow(url, betSlipUrl) {
        if (_lock.trylock()) {
            NAV.showLoading();

            var request = createBetSlipRequest(url);

            request.done(function (betReceipts) {
                _betSlipStore.clear();
                var failedBetSlips = getFailedBetSlips(betReceipts);
                _betSlipStore.set({ Bets: failedBetSlips });
                loadBetSlips(betSlipUrl, betReceipts);
                if (failedBetSlips.length < betReceipts.length) {
                    MSG.publish('bet.betslip.receipt', betReceipts);
                } else {
                    MSG.publish('bet.betslip.allfailed', betReceipts);
                }
            });

            request.error(function (xhr, textStatus) {
                var status = textStatus === "timeout" ? 0 : xhr.status;
                NAV.ajaxError(status, xhr, false);
            });

            request.always(function () {
                _lock.unlock();
            });
        }
    }

    function removeBetSlipItem(index) {
        var betSlip = getBetSlip();
        if (index > -1 && index < betSlip.length) {
            betSlip.splice(index, 1);
            _betSlipStore.set({ Bets: betSlip });
        }
    }

    return {
        addBetSlipClickHandler: addBetSlipClickHandler,
        addBatchBetsToBetSlip: addBatchBetsToBetSlip,
        loadBetSlips: loadBetSlips,
        getBetSlipCount: getBetSlipCount,
        clearAll: clearAll,
        placeBetSlipNow: placeBetSlipNow,
        commitBetSlipNow: commitBetSlipNow,
        placeInStore: placeInStore,
        canUndoPlaceInStore: canUndoPlaceInStore,
        undoPlaceInStore: undoPlaceInStore,
        removeBetSlipItem: removeBetSlipItem,
        getBetSlip: getBetSlip,
        calculateTotalCost: calculateTotalCost,
        hasBetWarning: hasBetWarning,
        hasBetError: hasBetError,
        hasLiveBettingBets: hasLiveBettingBets,
        reloadBetSlips: reloadBetSlips,
        onAddToBetSlipButtonClick: onAddToBetSlipButtonClick
    };
});

module.exports = new window.BetSlipService();


/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

window.BetWalletService = function(configurationService) {
    var self = this;

    var _walletStore = new BetWalletStore();
    var _configurationService = configurationService || new ConfigurationService();

    var _searchIndex = function (betGroups, betSlipSeq) {
        var result = -1;

        jQuery.each(betGroups, function (index, inxBetSlip) {
            if (inxBetSlip.BetSlipSeq == betSlipSeq) {
                result = index;
                return false;
            }
        });

        return result;
    };

    self.maxNumOfBets = function() {
        return _configurationService.MaxBetsPerCashWallet;
    };

    self.isBetWalletFull = function () {
        return this.getBetWalletCount() >= _configurationService.MaxBetsPerCashWallet;
    };

    /* test/dev only */
    self.clearAll = function () {
        _walletStore.clear();
        return true;
    };

    self.getBetWalletCount = function () {
        return _walletStore.get_bet_groups_count();
    };

    self.getFirstBetSlip = function () {
        var betGroups = _walletStore.get_bet_groups();
        if (betGroups.length) {
            return betGroups[0].BetSlipSeq;
        }
        return null;
    };

    self.getLastBetSlip = function () {
        var betGroups = _walletStore.get_bet_groups();
        if (betGroups.length) {
            return betGroups[betGroups.length - 1].BetSlipSeq;
        }
        return null;
    };

    self.nextOrFirstBetSlip = function (curBetSlipSeq) {
        var betGroups = _walletStore.get_bet_groups();
        var index = _searchIndex(betGroups, curBetSlipSeq);
        if (index > -1) {
            index = (index + 1) % betGroups.length;
            return betGroups[index].BetSlipSeq;
        }
        return null;
    };

    self.previousOrLastBetSlip = function (curBetSlipSeq) {
        var betGroups = _walletStore.get_bet_groups();
        var index = _searchIndex(betGroups, curBetSlipSeq);
        var count = betGroups.length;
        if (index > -1) {
            index = (count + index - 1) % count;
            return betGroups[index].BetSlipSeq;
        }
        return null;
    };

    self.searchIndex = function (betSlipSeq) {
        return _searchIndex(_walletStore.get_bet_groups(), betSlipSeq);
    };

    self.getVisitorTrackingId = function() {
        return _walletStore.get_visitor_tracking_id();
    };

    self.addBetSlip = function (betSlipSeq) {
        _walletStore.add(betSlipSeq);
    };

    self.deleteBetSlip = function (betSlipSeq) {
        _walletStore.remove(Number(betSlipSeq));
    };

    self.deleteAllbetSlips = function () {
        _walletStore.remove_all();
    };
};

module.exports = new window.BetWalletService();


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.LEGIN = window.LEGIN = (function() {
    function InitQuinellaLegIn() {
        jQuery('ul.tabs li:not(.ex-option)').hide();
        var toggleButton = jQuery('#quinellalegin-toggle');

        toggleButton.click(legInButtonClick);

        setToMultiSelection();
    }

    function isLeginSelected() {
        return jQuery('#quinellalegin-toggle').hasClass('selected');
    }

    function legInButtonClick() {
        toggleLegInButton(!jQuery(this).hasClass('selected'));
    }

    function toggleLegInButton(isSelected) {
        TOTESEL.setSelectedTab(0);
        var button = jQuery('.legin-box');
        if (isSelected) {
            button.addClass('selected');
        } else {
            button.removeClass('selected');
        }

        jQuery('#IsQuinellaLegIn').val(isSelected);
        jQuery('div.starter-tab input').prop('checked', false);
        var fieldButton = jQuery('.totebet-field-button');
        fieldButton.removeClass('selected');
        TOTESEL.clearAllSelections();
        TOTE.updateStartersState(true);

        if (isSelected) {
            button.children('em').html('ON');
            jQuery('ul.tabs li').show();
            starterTabSelect(null, 0);
            setToSingleSelection();
        } else {
            button.children('em').html('OFF');
            jQuery('ul.tabs li:not(.ex-option)').hide();
            jQuery('.totebet-field-button').show();
            setToMultiSelection();
            jQuery("ul.tabs li").removeClass('ui-state-active');
            jQuery("ul.tabs").each(function () { jQuery(this).children("li:first").addClass('ui-state-active'); });
        }
    }

    function toggleOn() {
        var button = jQuery('.legin-box');
        button.addClass('selected');
        button.children('em').html('ON');
        jQuery('ul.tabs li').show();

        if (jQuery('ul.tabs li:first').hasClass('ui-state-active')) {
            setToSingleSelection();
        } else {
            setToMultiSelection();
            disableLegInStarter();
        }

    }


    function setToSingleSelection() {
        showAndEnable(jQuery('div.starter-tab input[type="radio"]'));
        hideAndDisable(jQuery('div.starter-tab input[type="checkBox"]'));
    }

    function setToMultiSelection() {
        hideAndDisable(jQuery('div.starter-tab input[type="radio"]'));
        showAndEnable(jQuery('div.starter-tab input[type="checkBox"]'));
    }


    function showAndEnable(controls) {
        controls.show();
        controls.prop('disabled', false);
    }

    function hideAndDisable(controls) {
        controls.hide();
        controls.prop('disabled', true);
    }


    function starterTabSelect(a, newIndex) {
        jQuery('.leginselection').removeClass('leginselection');
        TOTE.starterTabSelect(a, newIndex);

        if (newIndex == 0) {
            jQuery('.totebet-field-button').hide();
            setToSingleSelection();
        } else {
            jQuery('.totebet-field-button').show();
            setToMultiSelection();
            disableLegInStarter();
        }

        return false;
    }

    function disableLegInStarter() {
        var starters = TOTESEL.getSelections(0);
        if (starters.length > 0) {
            jQuery('div.starter-tab input[type="checkBox"][value="' + starters[0] + '"]').prop('disabled', true).prop('checked', true).addClass('leginselection');
        }
    }


    return {
        InitQuinellaLegIn: InitQuinellaLegIn,
        starterTabSelect: starterTabSelect,
        isLeginSelected: isLeginSelected,
        toggleOn: toggleOn
    };
})();


/***/ }),
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var LegTypeCode = (function () {
        function LegTypeCode() {
        }
        return LegTypeCode;
    }());
    LegTypeCode.Win = "W";
    LegTypeCode.Place = "P";
    LegTypeCode.WinPlace = "WP";
    exports.LegTypeCode = LegTypeCode;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Decimal) {
    "use strict";
    var PriceDetails = (function () {
        function PriceDetails() {
        }
        PriceDetails._toDecimal = function (value) {
            return value ? new Decimal(value) : new Decimal(0);
        };
        PriceDetails.normalise = function (priceDetails) {
            return priceDetails ? {
                Win: { DollarReturn: PriceDetails._toDecimal(priceDetails.Win.DollarReturn) },
                Place: { DollarReturn: PriceDetails._toDecimal(priceDetails.Place.DollarReturn) }
            } : {
                Win: { DollarReturn: new Decimal(0) },
                Place: { DollarReturn: new Decimal(0) }
            };
        };
        return PriceDetails;
    }());
    exports.PriceDetails = PriceDetails;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Decimal) {
    "use strict";
    var Stake = (function () {
        function Stake() {
        }
        Stake._toDecimal = function (value) {
            return value ? new Decimal(value) : new Decimal(0);
        };
        Stake.normalise = function (stake) {
            return stake ? {
                Win: Stake._toDecimal(stake.Win),
                Place: Stake._toDecimal(stake.Place)
            } : {
                Win: Stake._toDecimal(0),
                Place: Stake._toDecimal(0)
            };
        };
        return Stake;
    }());
    exports.Stake = Stake;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21), __webpack_require__(158)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1, LegTypeCode_1) {
    "use strict";
    var PyosExtensions = (function () {
        function PyosExtensions() {
        }
        PyosExtensions.prototype.getLegTypeForDisplay = function (specialOffer) {
            if (specialOffer) {
                if (specialOffer.IsExclusiveLegType) {
                    switch (specialOffer.LegTypeCode) {
                        case LegTypeCode_1.LegTypeCode.Win:
                            return "win only";
                        case LegTypeCode_1.LegTypeCode.Place:
                            return "place only";
                        case LegTypeCode_1.LegTypeCode.WinPlace:
                            return "win or place only";
                    }
                }
                else {
                    switch (specialOffer.LegTypeCode) {
                        case LegTypeCode_1.LegTypeCode.Win:
                            return "win";
                        case LegTypeCode_1.LegTypeCode.Place:
                            return "place";
                        case LegTypeCode_1.LegTypeCode.WinPlace:
                            return "win + place";
                    }
                }
            }
            return null;
        };
        PyosExtensions.prototype.getLegTypeIneligibilityDisplay = function (specialOffer) {
            if (specialOffer) {
                if (specialOffer.IsExclusiveLegType) {
                    switch (specialOffer.LegTypeCode) {
                        case LegTypeCode_1.LegTypeCode.Win:
                            return "Only a Win amount can be entered for the selected SuperPick. Please amend your bet";
                        case LegTypeCode_1.LegTypeCode.Place:
                            return "Only a Place amount can be entered for the selected SuperPick. Please amend your bet";
                        case LegTypeCode_1.LegTypeCode.WinPlace:
                            return null;
                    }
                }
                else {
                    switch (specialOffer.LegTypeCode) {
                        case LegTypeCode_1.LegTypeCode.Win:
                            return "A Win amount must be entered for the selected SuperPick. Please amend your bet";
                        case LegTypeCode_1.LegTypeCode.Place:
                            return "A Place amount must be entered for the selected SuperPick. Please amend your bet";
                        case LegTypeCode_1.LegTypeCode.WinPlace:
                            return null;
                    }
                }
            }
            return null;
        };
        return PyosExtensions;
    }());
    PyosExtensions = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], PyosExtensions);
    exports.PyosExtensions = PyosExtensions;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 162 */,
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Exposes Webpack'd modules for any injected markup and remote components.
 * You need to specify the Webpack module path every time so Webpack knows you want to include them and their dependencies in your bundle.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(92)], __WEBPACK_AMD_DEFINE_RESULT__ = function(handler) {

  const Tipping = __webpack_require__(40);
  const TippingError = __webpack_require__(193);
  const TippingGame = __webpack_require__(194);
  const TippingPool = __webpack_require__(195);
  const TippingPropose = __webpack_require__(196);
  const TippingReceipt = __webpack_require__(197);
  const TippingResults = __webpack_require__(198);

  handler.define("./Tipping/Tipping", function(cb) { cb(Tipping); });
  handler.define("./Tipping/TippingError", function(cb) { cb(TippingError); });
  handler.define("./Tipping/TippingGame", function(cb) { cb(TippingGame); });
  handler.define("./Tipping/TippingPool", function(cb) { cb(TippingPool); });
  handler.define("./Tipping/TippingPropose", function(cb) { cb(TippingPropose); });
  handler.define("./Tipping/TippingReceipt", function(cb) { cb(TippingReceipt); });
  handler.define("./Tipping/TippingResults", function(cb) { cb(TippingResults); });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(283)], __WEBPACK_AMD_DEFINE_RESULT__ = function(msgBus, adrum) {
    var vPageView = null;

    function init() {
        msgBus.subscribe("nav.content.start", function(url) {
            vPageView = new adrum.events.VPageView();
            vPageView.start();
            vPageView.markViewChangeStart();
        });

        msgBus.subscribe("nav.content.showing", function() {
            vPageView.markViewChangeEnd();
        });

        msgBus.subscribe("nav.content.shown", function() {
            vPageView.markViewDOMLoaded();
        });

        msgBus.subscribe("nav.content.complete", function() {
            vPageView.end();
            adrum.report(vPageView);
        });

        msgBus.subscribe("nav.content.error", function() {
            vPageView.markViewChangeEnd();
        });
    }

    return {
        init: init
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37), __webpack_require__(68), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(requireExternal, defineExternal, jQuery) {
    if (!requireExternal.defined("knockout")) defineExternal('knockout', function() { return __webpack_require__(1); });
    if (!requireExternal.defined("jquery")) defineExternal('jquery', function() { return __webpack_require__(0); });
    if (!requireExternal.defined("LoggingService")) defineExternal('LoggingService', function() { return __webpack_require__(22); });

    //CMS - Check In
    if (!requireExternal.defined("LocationBasedServices/viewmodel/attheraces-viewmodel")) defineExternal('LocationBasedServices/viewmodel/attheraces-viewmodel', function() { return __webpack_require__(253); });
    if (!requireExternal.defined("CheckInService")) defineExternal('CheckInService', function() { return __webpack_require__(41); });

    //CMS - Specials T&C
    if (!requireExternal.defined("Tabtouch")) defineExternal('Tabtouch', function() { return __webpack_require__(7); });
    if (!("$" in window)) window.$ = jQuery; //No dependency declared for this - assumed to be global
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Exposes Webpack'd modules for any injected markup and remote components.
 * You need to specify the Webpack module path every time so Webpack knows you want to include them and their dependencies in your bundle.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(92), __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(handler, ko, jquery, _) {

    handler.define("knockout", function(cb) { cb(ko); });
    handler.define("jquery", function(cb) { cb(jquery); });
    handler.define("underscore", function(cb) { cb(_); });

    __webpack_require__.e/* require.ensure */(1).then((function() {
        const analytics = __webpack_require__(188);
        const react = __webpack_require__(91);
        const dom = __webpack_require__(90);
        const rest = __webpack_require__(93);
        handler.define("rwwa-analytics", function(cb) { cb(analytics); });
        handler.define("react", function(cb) { cb(react); });
        handler.define("react-dom", function(cb) { cb(dom); });
        handler.define("rwwa-rest", function(cb) { cb(rest); });
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);

    const hammer = __webpack_require__(56);
    const HomeViewModel = __webpack_require__(129);
    const StartersPageViewModel = __webpack_require__(133);
    const AppDownloadViewModel = __webpack_require__(126);
    const SettingsViewModel = __webpack_require__(132);
    const MysteryViewModel = __webpack_require__(131);
    const singlebetreceipt = __webpack_require__(127);
    const foopropose = __webpack_require__(128);
    const TabLocatorViewModel = __webpack_require__(134);
    const AccountActivityViewModel = __webpack_require__(119);
    const AccountChangePasswordViewModel = __webpack_require__(120);
    const MarketingCommsViewModel = __webpack_require__(130);
    const AccountDepositViewModel = __webpack_require__(122);
    const AccountDepositPayconnectViewModel = __webpack_require__(121);
    const AccountPrecommitmentViewModel = __webpack_require__(123);
    const AccountTransactionViewModel = __webpack_require__(124);
    const AccountWithdrawalViewModel = __webpack_require__(125);
    const multiinvestmentviewmodel = __webpack_require__(110);
    const multiviewviewmodel = __webpack_require__(113);
    const multiproposeviewmodel = __webpack_require__(111);
    const multireceiptviewmodel = __webpack_require__(112);
    const ToteSports = __webpack_require__(33);
    const ToteSportsCurrent = __webpack_require__(135);
    const ToteSportsError = __webpack_require__(136);
    const ToteSportsGamesResults = __webpack_require__(138);
    const ToteSportsGames = __webpack_require__(137);
    const ToteSportsPropose = __webpack_require__(139);
    const ToteSportsResults = __webpack_require__(140);
    const currencybinding = __webpack_require__(107);
    const scrolltobinding = __webpack_require__(109);
    const authenticationcomponent = __webpack_require__(94);
    const MysteryBetregister = __webpack_require__(105);
    const Calculatorregister = __webpack_require__(98);
    const viewbinding = __webpack_require__(96);
    const viewcontroller = __webpack_require__(97);
    const PyosSelectregister = __webpack_require__(80);
    const ProjectedPayregister = __webpack_require__(78);
    const PyosMessageregister = __webpack_require__(79);

    handler.define("requireExternal", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(37)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); }); /* CMS content areas */
    handler.define("hammer", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(56)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Navigation/Nav", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(3)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./TabTouch", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(7)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Notification", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(12)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Services/MessageBusService", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(4)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Services/Preferences/PreferencesService", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(8)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/HomeViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(129)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/StartersPageViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(133)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AppDownloadViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(126)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/SettingsViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(132)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/MysteryViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(131)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/Fob/fob-singlebetreceipt", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(127)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/Fob/foo-propose", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(128)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/TabLocatorViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(134)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountActivityViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(119)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountChangePasswordViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(120)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/MarketingCommsViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(130)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountDepositViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(122)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountDepositPayconnectViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(121)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountPrecommitmentViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(123)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountTransactionViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(124)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/AccountWithdrawalViewModel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(125)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("MultiBet/viewmodel/multiinvestment-viewmodel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(110)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("MultiBet/viewmodel/multiview-viewmodel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(113)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("MultiBet/viewmodel/multipropose-viewmodel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(111)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("MultiBet/viewmodel/multireceipt-viewmodel", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(112)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSports", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(33)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsCurrent", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(135)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsError", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(136)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsGamesResults", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(138)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsGames", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(137)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsPropose", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(139)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsResults", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(140)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("ToteSportsReceipt", function(cb) { __webpack_require__.e/* require */(2).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(405)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./KnockoutExtensions/Bindings/currency-binding", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(107)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./KnockoutExtensions/Bindings/scrollto-binding", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(109)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Components/Authentication/Neo/register", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(94)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Components/MysteryBet/register", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(105)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Components/Calculator/register", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(98)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Components/Blackbook/myblackbook-viewbinding", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(96)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Components/Blackbook/myblackbook-viewcontroller", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(97)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("../Specials/Components/PyosSelect/register", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(80)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("../Specials/Components/ProjectedPay/register", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(78)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("../Specials/Components/PyosMessage/register", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(79)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Foundation/Logon", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(31)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./Foundation/Error", function(cb) { Promise.resolve().then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(9)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
    handler.define("./ViewModels/Location/CheckInViewModel", function(cb) { __webpack_require__.e/* require */(4).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(403)]; (cb.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this)).catch(__webpack_require__.oe); });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Handler for all "#tote/meetings/meetingCode/raceNumber?date=meetingDate" routes.
 * 
 * Route initiators include:
 * - Home -> Races (and trots, dogs) -> Race List
 * - Home -> Next Events
 * - Home -> Jackpots
 * - Account Activity -> Go To Race
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(30), __webpack_require__(4), __webpack_require__(3), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (featureService, msgBus, nav, ko) {
    "use strict";

    function bootstrapComponent(route) {
        var request = route.split("/"),
            meetingId = request[2],
            rawRaceNumber = request[3].split("?"),
            queryStrings = rawRaceNumber[1].split("&"),
            raceNumber = rawRaceNumber[0],
            meetingDate = "";

        //TODO: Do this better - maybe depend on a third party to parse our request?
        queryStrings.forEach(function (queryString) {
            var parsed = queryString.split("="),
                key = parsed[0],
                value = parsed[1];

            if (key == "date") {
                meetingDate = value;
            }
        });

        function NewStartersPageViewModel() {
            var self = this;
            self.meetingId = meetingId;
            self.raceNumber = parseInt(raceNumber);
            self.meetingDate = new Date(meetingDate);
        }

        // For Analytics
        msgBus.publish("nav.content.start", route);

        // Code Spliiting point for webpack
        __webpack_require__.e/* require.ensure */(0).then((function() {
            nav.hideLoading();

            __webpack_require__(88);
            __webpack_require__(60);
            __webpack_require__(78);
            __webpack_require__(79);
            __webpack_require__(80);
            __webpack_require__(398);
    
            document.getElementById("main-container").innerHTML = "<div id='starters-content'><race-display-state params='meetingId: $data.meetingId, raceNumber: $data.raceNumber, meetingDate: $data.meetingDate, raceStatus: $data.raceStatus'></race-display-state></div>";

            ko.applyBindings(new NewStartersPageViewModel(), document.getElementById("starters-content"));

        }).bind(null, __webpack_require__)).catch(__webpack_require__.oe)
    }

    function handle(route) {
        return new Promise(function(resolve, reject) {
            featureService.isActive("BettingPageRefresh")
                .then(function(isActive) {
                    if (isActive) {
                        bootstrapComponent(route);
                        resolve();
                    } else {
                        reject();
                    }
                }).catch(function(err) {
                    reject(err);
                });
           });
        }

    return {
        handle: handle
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(8), __webpack_require__(4), __webpack_require__(41), __webpack_require__(30), __webpack_require__(22), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, preferencesService, msgBusService, checkInService, featureService, loggingService, nav) {
    var homeUrl = '/#';
    var cashBettingEnabled = ko.observable(preferencesService.cashBettingEnabled());
    var bettingPageRefreshEnabled = ko.observable(preferencesService.bettingPageRefreshEnabled());
    var showBettingPageRefresh = ko.observable(false);

    return {
        initView: initView,
        toggleCashBetting: toggleCashBetting,
        cashBettingEnabled: cashBettingEnabled,
        toggleBettingPageRefresh: toggleBettingPageRefresh,
        bettingPageRefreshEnabled: bettingPageRefreshEnabled,
        showBettingPageRefresh: showBettingPageRefresh,
        onTabAndTrack: onTabAndTrack
    }

    function initView() {
        loggingService.logDebug("right-menu-viewmodel.initView");
        cashBettingEnabled(preferencesService.cashBettingEnabled());
        bettingPageRefreshEnabled(preferencesService.bettingPageRefreshEnabled());
        refreshToggles({reload:false});
        msgBusService.subscribe('lo.login',function(accountNumber) {
            loggingService.logDebug("right-menu-viewmodel.initView lo.login accountNumber(" + accountNumber + ")");
            preferencesService.loggedInUser(accountNumber);
            preferencesService.bettingPageRefreshEnabled(true);
            refreshToggles({reload:false});
        });
        msgBusService.subscribe('lo.logout',function() {
            preferencesService.loggedInUser(0);
            refreshToggles({reload:false});
        });
    }

    function reloadPage(params) {
        setTimeout(function() {
            location.reload(true);
        },params.delay);
    }

    function refreshToggles(params) {
        loggingService.logDebug("right-menu-viewmodel.refreshToggles");
        featureService.isActive('BettingPageRefreshToggle')
            .then(function(active) {
                if (active) {
                    loggingService.logDebug("right-menu-viewmodel.refreshToggles - featureService.isActive('BettingPageRefreshToggle') = " + active);
                    showBettingPageRefresh(active);
                    if (bettingPageRefreshEnabled() !== preferencesService.bettingPageRefreshEnabled()) {
                        bettingPageRefreshEnabled(preferencesService.bettingPageRefreshEnabled());
                        if (params.reload) {
                            reloadPage({ delay: 400 });
                        }
                    }
                } else {
                    loggingService.logDebug("right-menu-viewmodel.refreshToggles - featureService.isActive FAIL");
                    showBettingPageRefresh(false);
                }
            });
    }

    function toggleCashBetting() {
        var currentValue = preferencesService.cashBettingEnabled();
        currentValue = preferencesService.cashBettingEnabled(!currentValue);
        cashBettingEnabled(currentValue);
        msgBusService.publish('preferences.cash', currentValue);
    }

    function toggleBettingPageRefresh() {
        var currentValue = preferencesService.bettingPageRefreshEnabled();
        currentValue = preferencesService.bettingPageRefreshEnabled(!currentValue);
        bettingPageRefreshEnabled(currentValue);
        msgBusService.publish('preferences.bettingPageRefresh', currentValue);
        reloadPage({delay:200});
    }

    function onTabAndTrack() {
        var locationId = checkInService.checkedInLocationId();
        if (locationId !== undefined && locationId !== null && locationId !== '') {
            return nav.navChange('/#lbs/attheraces?code=GPS' + '&id=' + locationId);
        } else {
            return nav.navChange('/#lbs/checkin');
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

/* entry point just for referencing require.js - so that webpack processes it          */
// Include require.min first using the cshtml of the asset for require setup by the file-loader. 
// Then include this file.  Require is then available on requireExternal and defineExternal.

__webpack_require__(284);

Promise.resolve().then(__webpack_require__.bind(null, 37)).then( function(requireExternal) {

    requireExternal.config({
        map: {
            "*": {
                "ko": "knockout",
                "$": "jquery",
                "jQuery": "jquery",
                "_": "underscore"
            }
        },
        config: {
            text: {
                useXhr: function (url, protocol, hostname, port) {
                    // allow cross-domain requests
                    // remote server allows CORS
                    return true;
                }
            }
        }
    });

});

var defineExternal = __webpack_require__(68);

// Some marketing scripts will depend on using require to get to these modules.
defineExternal('knockout', function() { return __webpack_require__(1); });
defineExternal('jquery', function() { return __webpack_require__(0); });
defineExternal('underscore', function() { return __webpack_require__(2); });



/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Betting_v1_betwalletstore_legacy__ = __webpack_require__(291);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Betting_v1_betwalletstore_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Betting_v1_betwalletstore_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Betting_v1_configuration_service_legacy__ = __webpack_require__(294);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Betting_v1_configuration_service_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__Betting_v1_configuration_service_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Betting_v1_betwalletservice_legacy__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Betting_v1_betwalletservice_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__Betting_v1_betwalletservice_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Betting_v1_flexiservice_legacy__ = __webpack_require__(303);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Betting_v1_flexiservice_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__Betting_v1_flexiservice_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Betting_v1_popupservice_legacy__ = __webpack_require__(312);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Betting_v1_popupservice_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__Betting_v1_popupservice_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Betting_v1_totebettingservice_legacy__ = __webpack_require__(316);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Betting_v1_totebettingservice_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__Betting_v1_totebettingservice_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Betting_v1_betslipstore_legacy__ = __webpack_require__(288);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Betting_v1_betslipstore_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__Betting_v1_betslipstore_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Betting_v1_betslipservice_legacy__ = __webpack_require__(147);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Betting_v1_betslipservice_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__Betting_v1_betslipservice_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Betting_v1_modal_service_legacy__ = __webpack_require__(308);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Betting_v1_modal_service_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__Betting_v1_modal_service_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Betting_v1_betwalletindicator_legacy__ = __webpack_require__(290);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Betting_v1_betwalletindicator_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__Betting_v1_betwalletindicator_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Betting_v1_namespace_legacy__ = __webpack_require__(310);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Betting_v1_namespace_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__Betting_v1_namespace_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Betting_v1_collections_legacy__ = __webpack_require__(293);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Betting_v1_collections_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__Betting_v1_collections_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__Betting_v1_feature_detection_service_legacy__ = __webpack_require__(302);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__Betting_v1_feature_detection_service_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__Betting_v1_feature_detection_service_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__Betting_v1_confirmation_legacy__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__Betting_v1_confirmation_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__Betting_v1_confirmation_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__Betting_v1_models_legacy__ = __webpack_require__(309);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__Betting_v1_models_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__Betting_v1_models_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__Betting_v1_totecalculator_legacy__ = __webpack_require__(317);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__Betting_v1_totecalculator_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__Betting_v1_totecalculator_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__Betting_v1_betslip_legacy__ = __webpack_require__(287);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__Betting_v1_betslip_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__Betting_v1_betslip_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__Betting_v1_summarypanel_legacy__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__Betting_v1_summarypanel_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17__Betting_v1_summarypanel_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__Betting_v1_offers_legacy__ = __webpack_require__(311);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__Betting_v1_offers_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18__Betting_v1_offers_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__Betting_v1_BettingCalculator_legacy__ = __webpack_require__(286);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__Betting_v1_BettingCalculator_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19__Betting_v1_BettingCalculator_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__Betting_v1_toteselections_legacy__ = __webpack_require__(318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__Betting_v1_toteselections_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20__Betting_v1_toteselections_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__Betting_v1_fobracing_calculator_legacy__ = __webpack_require__(305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__Betting_v1_fobracing_calculator_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21__Betting_v1_fobracing_calculator_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__Betting_v1_betwallet_legacy__ = __webpack_require__(289);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__Betting_v1_betwallet_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22__Betting_v1_betwallet_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__Betting_v1_controllers_legacy__ = __webpack_require__(299);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__Betting_v1_controllers_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23__Betting_v1_controllers_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__Betting_v1_quinellalegin_legacy__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__Betting_v1_quinellalegin_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24__Betting_v1_quinellalegin_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__Betting_v1_controller_tote_calculator_legacy__ = __webpack_require__(298);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__Betting_v1_controller_tote_calculator_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25__Betting_v1_controller_tote_calculator_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__Betting_v1_controller_betslip_legacy__ = __webpack_require__(297);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__Betting_v1_controller_betslip_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_26__Betting_v1_controller_betslip_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__Betting_v1_controller_addbetslip_legacy__ = __webpack_require__(296);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__Betting_v1_controller_addbetslip_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_27__Betting_v1_controller_addbetslip_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__Betting_v1_tote_legacy__ = __webpack_require__(315);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__Betting_v1_fob_legacy__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__Betting_v1_fob_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_29__Betting_v1_fob_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__Betting_v1_specials_legacy__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__Betting_v1_specials_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_30__Betting_v1_specials_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__Betting_v1_fobracing_legacy__ = __webpack_require__(306);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__Betting_v1_fobracing_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_31__Betting_v1_fobracing_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__Betting_v1_cash_ui_toggler_legacy__ = __webpack_require__(292);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__Betting_v1_cash_ui_toggler_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_32__Betting_v1_cash_ui_toggler_legacy__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__Betting_v1_maps_legacy__ = __webpack_require__(307);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__Betting_v1_favouritenumbers_legacy__ = __webpack_require__(301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__Betting_v1_favouritenumbers_legacy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_34__Betting_v1_favouritenumbers_legacy__);
// LEGACY MAIN

// "Services"










// "core"















// "prod"












// Other



/***/ }),
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(373)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, InvariantFailureException_1) {
    "use strict";
    var Guard = (function () {
        function Guard() {
        }
        Guard.stringNotNullOrEmpty = function (value) {
            if (value == null || value.length === 0)
                throw new InvariantFailureException_1.default("Invariant: String not empty not satisfied.");
        };
        Guard.notNull = function (value) {
            if (value == null)
                throw new InvariantFailureException_1.default("Invariant: Value not null not satisfied.");
        };
        Guard.arrayNotNullOrEmpty = function (value) {
            if (value == null || value.length == 0)
                throw new InvariantFailureException_1.default("Invariant: Array not null or empty not satisfied.");
        };
        Guard.greaterThanZero = function (value) {
            if (value <= 0)
                throw new InvariantFailureException_1.default("Invariant: Value > 0 not satisfied.");
        };
        Guard.greaterThanOrEqualZero = function (value) {
            if (value < 0)
                throw new InvariantFailureException_1.default("Invariant: Value >= 0 not satisfied.");
        };
        Guard.greaterOrEqual = function (min, value) {
            if (value < min)
                throw new InvariantFailureException_1.default("Invariant: Value < Min not satisfied.");
        };
        return Guard;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Guard;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(185), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, Map_1, inversify_1) {
    "use strict";
    var Disposable = (function () {
        function Disposable(eventAggregator, appWindow) {
            this.evtAggregator = eventAggregator;
            this.appWindow = appWindow;
            this.disposableEventAggregatorSubscriptions = new Map_1.default();
            this.disposed = false;
            this.onDisposal = function () { };
        }
        Disposable.prototype.registerDisposals = function (func) {
            this.onDisposal = func;
        };
        Disposable.prototype.dispose = function () {
            if (this.disposed)
                return;
            this.disposed = true;
            this.onDisposal();
            for (var _i = 0, _a = this.disposableEventAggregatorSubscriptions.keys(); _i < _a.length; _i++) {
                var topic = _a[_i];
                this.removeSubscriptions(topic);
            }
            this.disposableEventAggregatorSubscriptions.clear();
        };
        Disposable.prototype.mergeDisposables = function (other) {
            for (var _i = 0, _a = other.keys(); _i < _a.length; _i++) {
                var topic = _a[_i];
                if (this.disposableEventAggregatorSubscriptions.has(topic)) {
                    this.disposableEventAggregatorSubscriptions.get(topic).concat(other.get(topic));
                }
                else {
                    this.disposableEventAggregatorSubscriptions.set(topic, other.get(topic));
                }
            }
        };
        Disposable.prototype.safeSubscribe = function (topic, func) {
            if (this.disposableEventAggregatorSubscriptions.has(topic)) {
                this.disposableEventAggregatorSubscriptions.get(topic).push(func);
            }
            else {
                this.disposableEventAggregatorSubscriptions.set(topic, [func]);
            }
            this.evtAggregator.subscribe(topic, func);
        };
        Disposable.prototype.removeSubscriptions = function (topic) {
            var callbacks = this.disposableEventAggregatorSubscriptions.get(topic);
            if (callbacks) {
                for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                    var func = callbacks_1[_i];
                    this.evtAggregator.unsubscribe(topic, func);
                }
            }
            this.disposableEventAggregatorSubscriptions.delete(topic);
        };
        return Disposable;
    }());
    Disposable = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [Object, Object])
    ], Disposable);
    exports.Disposable = Disposable;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 181 */,
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(179), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, Guard_1, inversify_1) {
    "use strict";
    var EventAggregator = (function () {
        function EventAggregator() {
        }
        EventAggregator.prototype.subscribe = function (topic, func) {
            Guard_1.default.stringNotNullOrEmpty(topic);
            Guard_1.default.notNull(func);
            amplify.subscribe(topic, func);
        };
        EventAggregator.prototype.publish = function (topic) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            Guard_1.default.stringNotNullOrEmpty(topic);
            amplify.publish.apply(amplify, [topic].concat(args));
        };
        EventAggregator.prototype.unsubscribe = function (topic, func) {
            amplify.unsubscribe(topic, func);
        };
        return EventAggregator;
    }());
    EventAggregator = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], EventAggregator);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = EventAggregator;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(0), __webpack_require__(118), __webpack_require__(21), __webpack_require__(192)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, jQuery, version, inversify_1, ServiceError_1) {
    "use strict";
    var AppWindow = (function () {
        function AppWindow(preferenceService) {
            this.preferenceService = preferenceService;
        }
        AppWindow.prototype.addEventListener = function (evt, func, capture) {
            window.addEventListener(evt, func, capture);
        };
        AppWindow.prototype.removeEventListener = function (evt, func) {
            window.removeEventListener(evt, func);
        };
        AppWindow.prototype.scrollTo = function (selector, offset, delay) {
            jQuery('html, body').animate({
                scrollTop: jQuery(selector).offset().top + offset
            }, delay);
        };
        AppWindow.prototype.domElementExists = function (selector) {
            return !!jQuery(selector).length;
        };
        AppWindow.prototype.fetch = function (url, includeCredential) {
            var request;
            if (includeCredential) {
                var requestInit = { credentials: "include" };
                request = new Request(url, requestInit);
            }
            else {
                request = new Request(url);
            }
            var clientTimeZoneOffset = (new Date().getTimezoneOffset()) / 60;
            request.headers.set("Accept", "application/json");
            request.headers.set("ClientTimeZone", clientTimeZoneOffset.toString());
            request.headers.set("ClientScreenWidth", window.innerWidth.toString());
            request.headers.set("BettingPageRefresh", this.preferenceService.bettingPageRefreshEnabled() ? "True" : "False");
            var xTabTouchVersion = version.getTabTouchVersion();
            if (xTabTouchVersion) {
                request.headers.set("X-TabTouch-Version", xTabTouchVersion);
            }
            return window.fetch(request)
                .then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                else {
                    throw new ServiceError_1.ServiceError(response.status, response.statusText);
                }
            });
        };
        AppWindow.prototype.post = function (url, payload, includeCredential) {
            var requestInit = { method: "post", body: JSON.stringify(payload) };
            if (includeCredential) {
                requestInit.credentials = "include";
            }
            var request = new Request(url, requestInit);
            request.headers.set("Content-Type", "application/json");
            request.headers.set("Accept", "application/json");
            return window.fetch(request)
                .then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                else {
                    throw new ServiceError_1.ServiceError(response.status, response.statusText);
                }
            });
        };
        AppWindow.prototype.changeHashTo = function (suffix) {
            window.location.hash = suffix;
        };
        AppWindow.prototype.redirectTo = function (href) {
            window.location.href = href;
        };
        AppWindow.prototype.requestAnimationFrame = function (fn) {
            window.requestAnimationFrame(fn);
        };
        AppWindow.prototype.clearInterval = function (timerId) {
            window.clearInterval(timerId);
        };
        return AppWindow;
    }());
    AppWindow = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("IPreferencesServiceWrapper")),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], AppWindow);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AppWindow;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1, PreferencesService) {
    "use strict";
    var PreferencesServiceWrapper = (function () {
        function PreferencesServiceWrapper() {
        }
        PreferencesServiceWrapper.prototype.loggedInUser = function () {
            var preferencesServiceLocal = PreferencesService;
            return preferencesServiceLocal.loggedInUser();
        };
        PreferencesServiceWrapper.prototype.cashBettingEnabled = function () {
            var preferencesServiceLocal = PreferencesService;
            return preferencesServiceLocal.cashBettingEnabled();
        };
        PreferencesServiceWrapper.prototype.bettingPageRefreshEnabled = function () {
            var preferencesServiceLocal = PreferencesService;
            return preferencesServiceLocal.bettingPageRefreshEnabled();
        };
        return PreferencesServiceWrapper;
    }());
    PreferencesServiceWrapper = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], PreferencesServiceWrapper);
    exports.PreferencesServiceWrapper = PreferencesServiceWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var Map = (function () {
        function Map() {
            this._dict = {};
            this._size = 0;
        }
        Object.defineProperty(Map.prototype, "size", {
            get: function () {
                return this._size;
            },
            enumerable: true,
            configurable: true
        });
        Map.prototype.keys = function () {
            var keys = [];
            for (var hash in this._dict) {
                if (this._dict.hasOwnProperty(hash)) {
                    keys.push(this._dict[hash].key);
                }
            }
            return keys;
        };
        Map.prototype.has = function (key) {
            return this._dict.hasOwnProperty(this.toHash(key));
        };
        Map.prototype.get = function (key) {
            var hash = this.toHash(key);
            if (this._dict.hasOwnProperty(hash)) {
                return this._dict[hash].value;
            }
            return undefined;
        };
        Map.prototype.set = function (key, value) {
            var hash = this.toHash(key);
            if (!this._dict.hasOwnProperty(hash)) {
                ++this._size;
            }
            this._dict[hash] = { key: key, value: value };
            return this;
        };
        Map.prototype.delete = function (key) {
            var hash = this.toHash(key);
            if (this._dict.hasOwnProperty(hash)) {
                --this._size;
                delete this._dict[hash];
                return true;
            }
            return false;
        };
        Map.prototype.clear = function () {
            this._dict = {};
            this._size = 0;
        };
        Map.prototype.toHash = function (key) {
            return "#" + key;
        };
        return Map;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Map;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(0), __webpack_require__(21), __webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, jQuery, inversify_1, logon) {
    "use strict";
    var LogInHelper = (function () {
        function LogInHelper() {
        }
        LogInHelper.prototype.isUserLoggedIn = function () {
            var loggedOn = (jQuery('#LoggedOn').val() === 'True');
            return loggedOn;
        };
        LogInHelper.prototype.presentLogIn = function () {
            logon.login();
            jQuery('html, body').animate({ scrollTop: 0 }, 0);
        };
        return LogInHelper;
    }());
    LogInHelper = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], LogInHelper);
    exports.LogInHelper = LogInHelper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(50)], __WEBPACK_AMD_DEFINE_RESULT__ = function(stateMachine) {

        return {
            open: stateMachine.createIntent('OPEN MODAL'),
            close: stateMachine.createIntent('CLOSE MODAL')
        }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 188 */,
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(377), __webpack_require__(21), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, ProgressIndicatorBase_1, inversify_1, nav) {
    "use strict";
    var ProgressIndicator = (function (_super) {
        tslib_1.__extends(ProgressIndicator, _super);
        function ProgressIndicator() {
            return _super.call(this) || this;
        }
        ProgressIndicator.prototype.beginning = function () {
            this.setServiceCallCompleted(false);
            nav.showLoadingNoAuto();
        };
        ProgressIndicator.prototype.finished = function () {
            this.setServiceCallCompleted(true);
            nav.hideLoading();
        };
        ProgressIndicator.prototype.displayFor = function (promise) {
            return nav.pushLoadingFor(promise);
        };
        return ProgressIndicator;
    }(ProgressIndicatorBase_1.default));
    ProgressIndicator = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], ProgressIndicator);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ProgressIndicator;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21), __webpack_require__(278)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1, countdown) {
    "use strict";
    var CountdownTimer = (function () {
        function CountdownTimer() {
        }
        CountdownTimer.prototype.register = function (start, callback, options) {
            return countdown(start, callback, options);
        };
        CountdownTimer.prototype.cancel = function (timer) {
            window.clearInterval(timer);
        };
        Object.defineProperty(CountdownTimer.prototype, "HOURS", {
            get: function () {
                return countdown.HOURS;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CountdownTimer.prototype, "MINUTES", {
            get: function () {
                return countdown.MINUTES;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CountdownTimer.prototype, "SECONDS", {
            get: function () {
                return countdown.SECONDS;
            },
            enumerable: true,
            configurable: true
        });
        return CountdownTimer;
    }());
    CountdownTimer = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], CountdownTimer);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = CountdownTimer;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var CurrencyConverter = (function () {
        function CurrencyConverter() {
        }
        CurrencyConverter.prototype.toMoney = function (value, decimalNumbers, currencySymbol, decimalSymbol, thousandsSymbol) {
            var n = value, c = isNaN(decimalNumbers = Math.abs(decimalNumbers)) ? 2 : decimalNumbers, d = decimalSymbol == undefined ? "." : decimalSymbol, t = thousandsSymbol == undefined ? "," : thousandsSymbol, m = currencySymbol == undefined ? "$" : currencySymbol, s = n < 0 ? "-" : "", nubmerValue = Number(Math.abs(+n || 0).toFixed(c)), integerValue = parseInt(nubmerValue.toString()), integerString = integerValue.toString(), j = (j = integerString.length) > 3 ? j % 3 : 0;
            var str = s + m + (j ? integerString.substr(0, j) + t : "") + integerString.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(nubmerValue - integerValue).toFixed(c).slice(2) : "");
            return str;
        };
        return CurrencyConverter;
    }());
    exports.CurrencyConverter = CurrencyConverter;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var ServiceError = (function () {
        function ServiceError(status, responseText) {
            this.status = status;
            this.responseText = responseText;
        }
        return ServiceError;
    }());
    exports.ServiceError = ServiceError;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(40), __webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (tip, jQuery, nav) {
    return {
        init: initTippingError
    };

    function initTippingError(backUrl, backText) {
        jQuery('#btnBetErrorBackToPools').click(function () {
            return tip.navigateErrorToHref(jQuery(this));
        });

        jQuery('#btnBetErrorBackToGames').click(function () {
            return tip.navigateErrorToHref(jQuery(this));
        });

        jQuery('#btnBetErrorBackToCalc').click(function () {
            return handleBetError(tip.states.calc);
        });

        jQuery('#btnBetErrorDone').click(function () {
            return handleBetError(tip.states.none);
        });
    }

    //Returns the bet to a new state after an error has occurred
    //only supported states are none and calculator (which don't require data).
    function handleBetError(newState) {
        nav.hideErrorPopup();
        return tip.changeTippingState(newState);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(40), __webpack_require__(0), __webpack_require__(3), __webpack_require__(7), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (tip, jQuery, nav, tabtouch, common) {
    var checked = "checked";
    var teams = { A: "Away", D: "Draw", H: "Home" };
    var gameArray = []; //Array holding the checkbox name for each game.

    return {
        init: initTippingGames
    };

    function initTippingGames(url, backText) {
        tabtouch.initCommon(url, backText);

        CALC.initCommonCalculator(false);
        CALC.initCalculator('calculator');

        tip.initHomeButton();

        jQuery('.refresh-button').click(function () {
            refreshGames();
            return false;
        });

        //create the game array -- grab all the home checkbox names.
        gameArray = [];
        jQuery('#tip-list input[type="checkbox"][value="H"]').each(function () {
            gameArray.push(jQuery(this).attr('name'));
        });

        jQuery('button.cancel').click(function () {
            jQuery('#tip-list input[type="checkbox"]').removeAttr(checked);
            updateUIState();
        });

        jQuery('button.place-bet-player').click(function () {
            saveSelections();
            tip.changeTippingState(tip.states.calc);
        });

        jQuery('#tip-list input[type="checkbox"]').change(function () {
            updateUIState();
        });

        tip.initInfoScroll();
        initProcessButtons();
        updateUIState();
    }


    function refreshGames() {
        saveSelections();
        saveInvestment();
        var action = jQuery('.refresh-button').attr('href');
        nav.ajaxPost(action,
                     jQuery('form#betting-form').serialize(),
                     processRefreshResponse);
    }

    function initProcessButtons() {
        jQuery("a#betcost").click(function () {
            if (jQuery(this).is('.disabled') === false) {

                saveInvestment();
                nav.ajaxPost(jQuery(this).attr('href'),
                   jQuery('form#betting-form').serialize(),
                   processBetCostResponse,
                   {
                       control: jQuery(this)
                   }
                );
            }
            return false;

        });

        jQuery("a#bettingFormNext").click(function () {
            if (jQuery(this).is('.disabled') === false) {

                saveInvestment();
                nav.ajaxPost(jQuery(this).attr('href'),
                    jQuery('form#betting-form').serialize(),
                    processProposeBetResponse);
            }
            return false;
        });
    }

    function saveSelections() {
        jQuery('#Selections').val(extractSelectionArray(true).join('/'));
    }

    function saveInvestment() {
        jQuery('#Investment').val(jQuery('input.bet-value').val());
    }

    // Converts the current selections into an array for easy processing
    function extractSelectionArray(updateSelSummary) {
        var selections = [];
        var display;
        var gameRow;

        if (updateSelSummary) {
            jQuery('ul#sel-summary').html('');
        }

        for (var i = 0; i < gameArray.length; i++) {
            selections[i] = '';
            display = '';
            gameRow = jQuery('#tip-list li').eq(i);
            jQuery('#tip-list input[name="' + gameArray[i] + '"]:checked').each(function () {
                selections[i] += jQuery(this).val();
                if (updateSelSummary) {
                    display += ((display.length > 0) ? ', ' : '') + teams[jQuery(this).val()];
                }
            });

            if (updateSelSummary) {
                jQuery('ul#sel-summary').append('<li>Game ' + gameArray[i].substring(1) + ' - ' + gameRow.find('label.home').text() + ' v ' + gameRow.find('label.away').text() + '<br />' + display + '</span></li>');
            }
        }

        common.initDisplayListStyle(jQuery('ul#sel-summary'));

        return selections;
    }

    function processBetCostResponse(data) {
        common.showPopup(jQuery('#how-much').html(data));

        jQuery('#how-much').click(function () {
            jQuery(this).fadeOut('fast', function () {
                common.setDisableState(jQuery("a#betcost"), true);
            });
        });
    }

    function processProposeBetResponse(data) {
        tip.changeTippingState(tip.states.confirm, data);
    }

    function processRefreshResponse(data) {
        jQuery('#main-container').html(data);

        //test for existence of input#Selections -- it won't be there if the pool has closed.
        if (jQuery("input#Selections").length) {
            saveSelections();
        }
    }

    // Enables/Disables buttons based on the current selections
    function updateUIState() {
        var selections = extractSelectionArray(false);
        var noSelections = true;
        var allSelected = true;

        for (var i = 0; i < selections.length; i++) {
            if (selections[i] !== '') {
                noSelections = false;
            }

            if (selections[i] === '') {
                allSelected = false;
            }
        }

        common.setDisableState(jQuery('button.cancel'), !noSelections);
        common.setDisableState(jQuery('button.place-bet-player'), allSelected);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(40), __webpack_require__(3), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, tip, nav, tabtouch) {
    return {
        init: initTippingPools
    };

    function initTippingPools(url, backText) {
        tabtouch.initCommon(url, backText);

        tip.initHomeButton();

        jQuery('#prev-day').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('#next-day').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('.pool').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('.refresh-button').click(function () {
            return refreshPools();
        });
    }

    function refreshPools() {
        return nav.refresh();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(40), __webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (tip, jQuery, nav) {
    return {
        init: initTippingPropose
    };
   
    function initTippingPropose(backUrl, backText) {
        var locationDetailsAppender = new LocationDetailsAppender();

        jQuery('#btnCancel').click(function () {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery("a#placeBetNow").click(function () {
            nav.ajaxPost(jQuery(this).attr('href'),
                    //jQuery('form#betting-form').serialize(),
                    locationDetailsAppender.addToUrlEncodedData(jQuery('form#betting-form').serialize()),
                    processBetPlacedResponse,
                    {
                        control: jQuery(this)
                    }
            );

            return false;
        });
    }

    function processBetPlacedResponse(data) {
        tip.changeTippingState(tip.states.receipt, data);
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery, tip) {
    return {
        init: initTippingReceipt
    };

    function initTippingReceipt(backUrl, backText) {
        jQuery('#btnTippingPools').click(function() {
            return tip.navigateToHref(jQuery(this));
        });

        jQuery('#btnTippingGames').click(function() {
            return tip.navigateToHref(jQuery(this));
        });
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(7), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, tabtouch, tip) {
    return {
        init: initTippingResults
    };

    function initTippingResults(url, backText) {
        tabtouch.initCommon(url, backText);
        tip.initInfoScroll();

        tip.initHomeButton();

        jQuery('.refresh-button').click(function() {
            return refreshResults();
        });
    }

    function refreshResults() {
        return nav.refresh();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(51)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, jQuery, _, defineDelegate) {
    var Delegate = defineDelegate({ require: ["heading", "onLogonSuccessful", "loading"] });

    function logonViewModel(params) {
        var self = this;
        _.bindAll(self, "attemptChangePassword");
        var delegate = self.delegate = new Delegate(params.delegate);

        delegate.heading("Temporary Password");

        delegate.notifyNavigation("");

        _.extend(self, {
            changePasswordUrl: params.changePasswordUrl,
            loading: delegate.loading,

            accountNumber: delegate.accountNumber,
            currentPassword: delegate.password,

            plaintextPassword: ko.observable(""),
            plaintextPasswordFocused: ko.observable(false),

            displayPassword: ko.observable(false),
            displayPasswordFocused: ko.observable(false),
            errorMessage: ko.observable(),


        });

        self.displayPasswordLabelText = ko.pureComputed(function() {
            if (self.displayPassword()) {
                return "Hide";
            }
            return "Show";
        });


        self.passwordInputType = ko.pureComputed(function() {
            if (self.displayPassword()) {
                return "text";
            }
            return "password";
        });


        self.conditionNumbersOnly = ko.pureComputed(function() {
            return !!self.plaintextPassword() && !!self.plaintextPassword().match(/^\d*$/);
        });

        self.conditionLength = ko.pureComputed(function() {
            return !!self.plaintextPassword().match(/^\d{4,8}$/);
        });
        self.conditionNotEqualToAccountNumber = ko.pureComputed(function() {
            return !!self.plaintextPassword() && self.plaintextPassword() != self.accountNumber;
        });
        self.conditionRepeatingDigits = ko.pureComputed(function() {
            return !!self.plaintextPassword() && !self.plaintextPassword().match(/(.)\1{2,}/);
        });

        self.isValid = ko.pureComputed(function() {
            return self.conditionNumbersOnly() && self.conditionLength() && self.conditionRepeatingDigits() && self.conditionNotEqualToAccountNumber();
        });


        delegate.loading(false);
    }

    _.extend(logonViewModel.prototype, {
        attemptChangePassword: function() {
            var self = this;

            if (!this.isValid()) {
                return;
            }

            self.loading(true);

            var data = {
                accountNumber: this.accountNumber,
                password: this.currentPassword,
                newPassword: this.plaintextPassword(),
            };

            jQuery.ajax(
                {
                    type: "POST",
                    url: this.changePasswordUrl,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    data: data
                })
                .always(function() {
                    self.loading(false);
                })
                .then(function(result) {
                    if (result.IsSuccessful) {
                        self.delegate.onLogonSuccessful(data.accountNumber);
                        self.delegate.notifyNavigation("success");
                    } else {
                        self.delegate.notifyNavigation("invalid");
                        self.errorMessage(result.ErrorMessage);
                    }
                }).fail(function() {
                    self.errorMessage("Sorry, something went wrong. Please try again.");
                });
        }
    });


    return logonViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(199), __webpack_require__(350)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, Vm, template) {
    ko.components.register('tt-logon-change-password', {
        viewModel: Vm,
        template: template
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(51)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, jQuery, _, defineDelegate) {
    var Delegate = defineDelegate({ require: ["heading", "beginRecoverPassword", "beginChangePassword", "onLogonSuccessful", "loading"] });

    function logonViewModel(params) {
        var self = this;
        _.bindAll(self, "reset", "attemptLogin");
        var delegate = self.delegate = new Delegate(params.delegate);
        delegate.heading("Login");

        delegate.setResetFn(this.reset);

        _.extend(self, {
            logonUrl: params.logonUrl,
            loading: delegate.loading,
            accountNumber: ko.observable(delegate.defaultAccountNumber),
            accountNumberFocused: ko.observable(),
            password: ko.observable(),
            passwordFocused: ko.observable(),
            rememberUser: ko.observable(delegate.defaultRememberAccount),
            rememberUserFocused: ko.observable(),
            errorMessage: ko.observable(),
            beginRecoverPassword: delegate.beginRecoverPassword,
            beginRecoverAccountNumber: delegate.beginRecoverAccountNumber,
            beginChangePassword: delegate.beginChangePassword,
            signUp: delegate.beginSignUp
        });

        self.isValid = ko.pureComputed(function() {
            return !!self.accountNumber() && !!self.password();
        });
    }

    _.extend(logonViewModel.prototype, {
        reset: function() {
            this.accountNumber(this.delegate.defaultAccountNumber);
            this.accountNumberFocused(false);
            this.password("");
            this.passwordFocused(false);
            this.rememberUser(this.delegate.defaultRememberAccount);
            this.rememberUserFocused(false);
            this.errorMessage(null);
        },

        attemptLogin: function() {
            var self = this;

            self.loading(true);

            var data = {
                accountNumber: this.accountNumber(),
                password: this.password(),
                rememberAccount: this.rememberUser()
            };

            jQuery.ajax(
                {
                    type: "POST",
                    url: this.logonUrl,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    data: data
                })
                .always(function() {
                    self.delegate.loading(false);
                })
                .then(function(result) {
                    if (result.IsSuccessful) {
                        self.delegate.onLogonSuccessful(data.accountNumber);
                        self.delegate.notifyNavigation("success");
                    } else {
                        if (result.MustChangePassword) {
                            self.beginChangePassword(data);
                        } else {
                            self.delegate.notifyNavigation("invalid");
                            self.errorMessage("The account or password details you entered are invalid. Please try again.");
                        }

                    }
                }).fail(function() {
                    self.errorMessage("Sorry, something went wrong. Please try again.");
                });;
        }
    });


    return logonViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(201), __webpack_require__(351)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, Vm, template) {
    ko.components.register('tt-logon', {
        viewModel: Vm,
        template: template
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(4), __webpack_require__(3), __webpack_require__(31), __webpack_require__(141)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, msgBusService, nav, logon, window) {
    //"window" was a dependency - removed?

    function authenticationViewModel(params) {
        var self = this;

        self.currentStepNumber = 1;
        self.shouldUpdateStepNumber = true;
        self.steppedThroughForgottenPassword = false;
        self.registeredPopState = false;
        self.depth = 0;
        self.stack = [1];
        self.pastFinalStep = false;

        _.bindAll(self, "beginRecoverPassword", "willShow", "popstate", "prepare", "beginRecoverAccountNumber", "beginChangePassword", "beginSignUp", "close", "reset", "_showLogon", "_showRecoverPassword", "_showChangePassword", "_showRecoverAccountNumber");

        self.currentWorkflow = ko.observable();
        self.loading = ko.observable();
        self.heading = ko.observable();
        self.showLogon = ko.pureComputed(self._showLogon);
        self.showRecoverPassword = ko.pureComputed(self._showRecoverPassword);
        self.showRecoverAccountNumber = ko.pureComputed(self._showRecoverAccountNumber);
        self.showChangePassword = ko.pureComputed(self._showChangePassword);
        self.logonUrl = params.logonUrl;
        self.changePasswordUrl = params.changePasswordUrl;
        self.progressStepNumSub = null;
        self.loadingSub = null;

        self.backHandler = ko.observable();

        var currentStepNumber = function (stepNumber) {

            if (!self.shouldUpdateStepNumber) {
                self.shouldUpdateStepNumber = true;
                return;
            }

            if (++stepNumber === self.currentStepNumber) {
                return;
            }
            self.currentStepNumber = Math.max(self.currentStepNumber, stepNumber);
            self.stack.push(stepNumber);

            history.pushState({ stepNumber: stepNumber, stack: _.clone(self.stack) }, null);

            self.shouldUpdateStepNumber = false;
        };

        self.progressDelegate = {
            numberOfSteps: ko.observable(0),
            currentStepNumber: ko.observable(1).extend({ notify: "always" })
        };

        self.progressStepNumSub = self.progressDelegate.currentStepNumber.subscribe(function (value) {
            currentStepNumber(value);
        });

        self.recoverPasswordDelegate = {
            onWorkflowComplete: function () {
                self.reset();
                self.pastFinalStep = true;
            },
            onWorkflowBackedOut: self.reset,
            heading: self.heading,
            loading: self.loading,
            currentStepNumber: self.progressDelegate.currentStepNumber,
            numberOfSteps: self.progressDelegate.numberOfSteps,
            attachBackHandler: function (fn) {
                self.backHandler(fn);
            },
            beginSignUp: self.beginSignUp,
            beginAccountNumberRecovery: self.beginRecoverAccountNumber,
            notifyNavigation: function (p) { msgBusService.publish('nav.nav', "#account/recoverPassword/" + p); }
        };

        self.recoverAccountNumberDelegate = {
            onWorkflowComplete: function () {
                self.reset();
                self.pastFinalStep = true;
            },
            onWorkflowBackedOut: function () {


                self.backHandler(null);
                self.progressDelegate.numberOfSteps(0);

                if (self.steppedThroughForgottenPassword) {
                    self.currentStepNumber = 2;
                    history.pushState({ stepNumber: 1 }, null);
                    self.currentWorkflow(self.WORKFLOW_RECOVER_PASSWORD);
                } else {
                    self.currentStepNumber = 1;
                    self.currentWorkflow(self.WORKFLOW_LOGON);
                }
                self.loading(false);

            },
            heading: self.heading,
            loading: self.loading,
            currentStepNumber: self.progressDelegate.currentStepNumber,
            numberOfSteps: self.progressDelegate.numberOfSteps,
            attachBackHandler: function (fn) {
                self.backHandler(fn);
            },
            beginSignUp: self.beginSignUp,
            notifyNavigation: function (p) { msgBusService.publish('nav.nav', "#account/accountNumber/" + p); }
        };

        self.logonDelegate = {
            setResetFn: function (fn) { self.resetLogon = fn; },
            onLogonSuccessful: function (accountNumber) { logon.ajaxLogonState(true, accountNumber) },
            beginRecoverPassword: self.beginRecoverPassword,
            beginRecoverAccountNumber: self.beginRecoverAccountNumber,
            beginChangePassword: self.beginChangePassword,
            beginSignUp: self.beginSignUp,
            loading: self.loading,
            heading: self.heading,
            defaultRememberAccount: params.rememberAccount,
            defaultAccountNumber: params.accountNumber,
            notifyNavigation: function (p) { msgBusService.publish('nav.nav', "#account/login/" + p); }
        };

        self.changePasswordDelegate = {
            heading: self.heading,
            loading: self.loading,
            changePasswordUrl: params.changePasswordUrl,
            onLogonSuccessful: function (accountNumber) { logon.ajaxLogonState(true, accountNumber) },
            notifyNavigation: function (p) { msgBusService.publish('nav.nav', "#account/changePassword/" + p); }
        }

        self.reset();

        self.loadingSub = self.loading.subscribe(function (value) {
            if (value) {
                nav.showLoadingFullScreenFixed();
            } else {
                nav.hideLoading();
            };
        });

        msgBusService.publish('AUTH.onCreate', this.uniqueId);

        self.dispose = function() {
            self.progressStepNumSub.dispose();
            self.loadingSub.dispose();

            window.removeEventListener("popstate", this.popstate);
        }
    }

    _.extend(authenticationViewModel.prototype, {
        WORKFLOW_LOGON: { type: 'Logon' },
        WORKFLOW_RECOVER_PASSWORD: { type: 'RecoverPassword' },
        WORKFLOW_RECOVER_ACCOUNT_NUMBER: { type: 'RecoverAccountNumber' },
        WORKFLOW_CHANGE_PASSWORD: { type: 'ChangePassword' },


        beginSignUp: function () {
            nav.showLoading();
            location.href = "/SignUp/CreateAccount";
        },

        beginRecoverPassword: function () {
            var self = this;
            self.loading(true);
            self.steppedThroughForgottenPassword = true;
            self.shouldUpdateStepNumber = true;
            self.currentWorkflow(this.WORKFLOW_RECOVER_PASSWORD);
        },

        beginChangePassword: function (data) {
            _.extend(this.changePasswordDelegate, data);
            var self = this;
            self.loading(true);
            self.currentWorkflow(this.WORKFLOW_CHANGE_PASSWORD);
        },

        beginRecoverAccountNumber: function () {
            var self = this;
            self.loading(true);
            self.currentWorkflow(this.WORKFLOW_RECOVER_ACCOUNT_NUMBER);
        },

        popstate: function (event) {
            var state = event.state;
            var that = this;

            if (state && state.stepNumber) {

                if (state.stepNumber < that.currentStepNumber) {
                    if (typeof that.backHandler() === "function") {
                        that.backHandler()();
                    } else {
                        that.close();
                    }
                } else {

                    if (that.pastFinalStep) {
                        that.pastFinalStep = false;
                        history.pushState({ stepNumber: 1, stack: [1] }, null);
                        that.close();
                    } else {
                        that.close();
                    }
                }
            } else {
                that.close();
            }
        },

        reset: function () {
            window.removeEventListener("popstate", this.popstate);

            if (!!this.resetLogon) {
                this.resetLogon();
            }
            this.backHandler(null);
            this.currentStepNumber = 1;
            this.progressDelegate.numberOfSteps(0);
            this.steppedThroughForgottenPassword = false;
            this.stack = [];
            this.pastFinalStep = false;
            this.currentWorkflow(this.WORKFLOW_LOGON);
            this.loading(false);
        },

        prepare: function () {
            this.depth = 0;
            this.backHandler(null);
            this.progressDelegate.numberOfSteps(0);
            this.currentStepNumber = 1;
            history.pushState({ stepNumber: 1, stack: [1] }, null);
            this.currentWorkflow(this.WORKFLOW_LOGON);
            this.loading(false);
            this.steppedThroughForgottenPassword = false;
            this.stack = [1];
            this.shouldUpdateStepNumber = true;
            this.pastFinalStep = false;
        },

        close: function () {
            this.reset();

            logon.closeLoginPopup();

            this.registeredPopState = false;
            this.shouldUpdateStepNumber = false;
        },

        _showLogon: function () {
            return this.currentWorkflow() === this.WORKFLOW_LOGON;
        },

        _showRecoverPassword: function () {
            return this.currentWorkflow() === this.WORKFLOW_RECOVER_PASSWORD;
        },
        _showRecoverAccountNumber: function () {
            return this.currentWorkflow() === this.WORKFLOW_RECOVER_ACCOUNT_NUMBER;
        },

        _showChangePassword: function (data) {
            return this.currentWorkflow() === this.WORKFLOW_CHANGE_PASSWORD;
        },

        _notifyNavigation: function (path) {
            msgBusService.publish('nav.nav', url);
        },

        willShow: function () {
            this.reset();
            this.prepare();
            
            this.depth = Math.max(window.history.length, 0);

            if (!this.registeredPopState) {
                window.addEventListener("popstate", this.popstate);
                this.registeredPopState = true;
            }
        }

    });


    return authenticationViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(51)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, _, defineDelegate) {
    var Delegate = defineDelegate({ required: ['numberOfSteps', "currentStepNumber"] });

    function progressViewmodel(params) {
        var self = this;

        _.bindAll(self, "isCurrentStep", "steps");

        var delegate = new Delegate(params.delegate);

        self.numberOfSteps = delegate.numberOfSteps;
        self.currentStepNumber = delegate.currentStepNumber;
    }

    _.extend(progressViewmodel.prototype, {
        isCurrentStep: function(index) {
            return this.currentStepNumber() === (index() + 1);
        },

        steps: function() {
            return Array(this.numberOfSteps() || 0);         
        }
    });
    return progressViewmodel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(204), __webpack_require__(353)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, Vm, template) {
        ko.components.register('tt-progress-steps', {
            viewModel: Vm,
            template: template
        });
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));  

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(51), __webpack_require__(44), __webpack_require__(249)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, defineDelegate, apiService, remoteComponents) {

    var Delegate = defineDelegate({ required: ['heading', "loading"] });

    function viewModel(params) {
        var self = this;
        _.bindAll(self, "_onLoadError", '_loadRemoteComponent', '_onRemoteComponentLoaded');

        var delegate = self.delegate = new Delegate(params.delegate);

        delegate.heading("Account Number Recovery");

        self.loading = delegate.loading;
        self.loading(true);
        self.remoteComponentLoadedWithoutError = ko.observable(false);
        self.errorLoadingRemote = ko.observable(false);

        self._loadRemoteComponent();
    }

    _.extend(viewModel.prototype, {
        _loadRemoteComponent: function () {
            var self = this;

            apiService.fetchJsonFromApi("/api/config/RwwaIdentityHost").then(function(identityHost) {
                apiService.fetchJsonFromApi(identityHost).then(function(identityIndex) {
                    var url = identityIndex.recoverAccountNumber.components.knockout.version[2].url;

                    remoteComponents.defineModule('knockout', function() {
                        return __webpack_require__(1);
                    });

                    remoteComponents.fetchComponent(url).then(function(component) {
                        component.init(identityHost);
                        self._onRemoteComponentLoaded();
                    }).catch(self._onLoadError);
                }).catch(self._onLoadError);
            }).catch(self._onLoadError);
        },

        _onRemoteComponentLoaded: function() {
            this.remoteComponentLoadedWithoutError(true);
            this.loading(false);
        },

        _onLoadError: function (err) {
            this.delegate.heading("Sorry");
            this.loading(false);
            this.errorLoadingRemote(true);
            console.error("Failed to load: " + err);
        }
    });

    return viewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(206), __webpack_require__(354)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, Vm, template) {
  
    ko.components.register('tt-recover-account-number', {
        viewModel: Vm,
        template: template
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(51)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, _, defineDelegate) {

    var Delegate = defineDelegate({ required: ['heading', "loading"] });

    function viewModel(params) {
        var self = this;
        _.bindAll(self, "_onLoadError", '_loadRemoteComponent', '_onRemoteComponentLoaded');

        var delegate = self.delegate = new Delegate(params.delegate);

        delegate.heading("Password Reset");

        self.loading = delegate.loading;
        self.loading(true);
        self.remoteComponentLoadedWithoutError = ko.observable(false);
        self.errorLoadingRemote = ko.observable(false);

        self._loadRemoteComponent();
    }

    _.extend(viewModel.prototype, {
        _loadRemoteComponent: function () {
            var self = this;

            try {
                apiService.fetchXmlFromApiAsString("/api/config/RwwaIdentityHost").then(function(identityHost) {
                    apiService.fetchXmlFromApi(identityHost).then(function(identityIndex) {
                        apiService.fetchXmlFromApi(identityIndex.recoverPassword.components.knockout.version[2].url, function(_) {
                            _.init(identityHost);
                            self._onRemoteComponentLoaded();
                        });
                    });
                });
            } catch (_) {
                self._onLoadError();
            }
        },

        _onRemoteComponentLoaded: function() {
            this.remoteComponentLoadedWithoutError(true);
            this.loading(false);
        },

        _onLoadError: function () {
            this.delegate.heading("Sorry");
            this.loading(false);
            this.errorLoadingRemote(true);
        }
    });

    return viewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(208), __webpack_require__(355)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, Vm, template) {

    ko.components.register('tt-recover-password', {
        viewModel: Vm,
        template: template
    });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿(function () {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
        return function (betAmount) {
            var self = this;

            self.BetAmount = betAmount;
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
})();

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(45), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, rwwaMath, _) {
    return function (betAmount) {
        var self = this;

        self.BetAmount = betAmount;
        self.PreviousIsPreset = true;

        function floorToStep(step, value) {
            return step * Math.floor(value / step);
        }

        function clampAmountValue(amount) {
            var minf = _.partial(Math.min, self.BetAmount.Max);
            var maxf = _.partial(Math.max, self.BetAmount.Min);
            var stepf = _.partial(floorToStep, self.BetAmount.Step());
            return _.compose(minf, maxf, stepf)(amount);
        }

        function updateAmountIfNumber() {
            var amountString = self.BetAmount.AmountString();
            if (!isNaN(amountString) && self.BetAmount.Pattern().test(amountString)) {
                self.BetAmount.Amount(clampAmountValue(Number(amountString)));
            }
        }

        self.BetAmount.IsNumberPadVisible.subscribe(function (newValue) {
            if (newValue == true) {
                self.BetAmount.AmountString(self.BetAmount.Amount().toString());
            } else {
                self.BetAmount.Amount(clampAmountValue(self.BetAmount.Amount()));
                self.BetAmount.AmountString(rwwaMath.toMoney(self.BetAmount.Amount(), 2, ''));
            }
        });

        self.UpdateAmount = function (delta) {
            self.PreviousIsPreset = true;
            self.BetAmount.Amount(clampAmountValue(self.BetAmount.Amount() + delta));
            self.BetAmount.AmountString(self.BetAmount.Amount().toString());
        }

        self.ClearAmount = function () {
            self.BetAmount.Amount(clampAmountValue(0));
            self.BetAmount.AmountString(self.BetAmount.Amount().toString());
        }

        self.AppendAmount = function (str) {
            if ((self.BetAmount.Amount() < self.BetAmount.Max) && (str != '.' || self.BetAmount.Step() == 0.5)) {
                if (str == '.') {
                    self.PreviousIsPreset = false;
                }

                if (self.PreviousIsPreset) {
                    self.ClearAmount();
                    self.PreviousIsPreset = false;
                }
                var amountString = self.BetAmount.AmountString();

                if (amountString == '0') {
                    amountString = '';
                }

                if (str != '.' || !amountString.match(/\./)) {
                    var appendedAmountString = amountString + str;

                    if (self.BetAmount.Pattern().test(appendedAmountString)) {
                        self.BetAmount.AmountString(appendedAmountString);
                        updateAmountIfNumber();
                    }
                }
            }
        }

        self.BackSpaceAmount = function () {
            var strLen = self.BetAmount.AmountString().length;
            self.PreviousIsPreset = false;
            if (strLen > 1) {
                var amountString = self.BetAmount.AmountString();
                var backSpacedAmountString = amountString.substring(0, strLen - 1);
                self.BetAmount.AmountString(backSpacedAmountString);
                updateAmountIfNumber();
            } else {
                self.BetAmount.Amount(0);
                self.BetAmount.AmountString('0');
            }
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿(function () {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(211)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, calculator) {
        return function (betAmountViewModel) {
            var self = this;

            self.BetAmount = betAmountViewModel;
            self.Calculator = new calculator(self.BetAmount);
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
})();

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿(function () {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
        return function (calculator) {
            var self = this;

            self.Calculator = calculator;
            //self.Step = calculator.BetAmount.Step;

            self.UpdateAmount = function (delta) {
                self.Calculator.UpdateAmount(delta);
            }

            self.AppendAmount = function (str) {
                self.Calculator.AppendAmount(str);
            }

            self.BackSpaceAmount = function () {
                self.Calculator.BackSpaceAmount();
            }
        };
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
})();

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko) {
    function betTypeViewModel(type, name, options, defaultOptionNumber, isDisabled) {
        var self = this;

        self.Type = type;
        self.Name = name;
        self.Options = options;
        self.DefaultOptionNumber = defaultOptionNumber;
        self.IsActive = ko.observable(false);
        self.IsDisabled = isDisabled;
    };

    return betTypeViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko) {
    function numberOfBetsViewModel(value) {
        var self = this;

        self.Value = value;
        self.IsActive = ko.observable(false);
    }

    return numberOfBetsViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko) {
    function optionViewModel(optionNumber, noOfCombinations, betExplanation) {
        var self = this;

        self.OptionNumber = optionNumber;
        self.NumberOfCombinations = noOfCombinations;
        //self.Description = description;
        self.Description = noOfCombinations <= 1 ? "Combination" : "Combinations";
        self.BetExplanation = betExplanation;
        self.IsActive = ko.observable(false);
    }

    return optionViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko) {
    function quickPickModel(type, name, optionNumber, investmentAmount, cost, isDisabled) {
        var self = this;

        self.Type = type;
        self.Name = name;
        self.OptionNumber = optionNumber;
        self.InvestmentAmount = investmentAmount;
        self.Cost = cost;
        self.CostString = '$' + cost;
        self.IsActive = ko.observable(false);
        self.IsDisabled = isDisabled;
    };

    return quickPickModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko) {
    function tabViewModel(name) {
        var self = this;

        self.Name = name;
        self.IsActive = ko.observable(false);
    }

    return tabViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 219 */,
/* 220 */,
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko) {
    ko.bindingHandlers['css2'] = ko.bindingHandlers.css;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 222 */,
/* 223 */,
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, $) {
    ko.extenders.pattern = function (target, pattern) {
        //create a writable computed observable to intercept writes to our observable
        var result = ko.pureComputed({
            read: target,  //always return the original observables value
            write: function (newValue) {
                var current = target();
                var valueToWrite = pattern.test(newValue) ? newValue : current;

                //only write if it changed
                if (valueToWrite !== current) {
                    target(valueToWrite);
                } else {
                    //if the write value is the same, but a different value was written, force a notification for the current field
                    if (newValue !== current) {
                        target.notifySubscribers(valueToWrite);
                    }
                }
            }
        }).extend({ notify: 'always' });

        return result;
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(366), __webpack_require__(234)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, template) {

    ko.components.register('tt-modal', {
        viewModel: {
            createViewModel: function (params) {
                return params.viewModel;
            }
        },
        template: template
       
    });
    return true;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))  

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0), __webpack_require__(367)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ko, jQuery, template) {
    var $loadingOverlay = jQuery("#loading-overlay");

    function ViewModel(params, element) {
        var app = null;
        var self = this;
        var factory = params.factory;

        self.isError = ko.observable(false);
        self.isLoading = ko.observable(false);
        self.title = params.title;

        self.dispose = function () {
            app && app.dispose();
            app = null;
            factory = null;
            self = null;
            element = null;
        };

        self.onError = function (err) {
            if (console && typeof (console.error) == "function") {
                console.error(err);
            }

            if (!self)
                return;

            self.isError(true);
        };

        self.load = function () {
            if (!self)
                return;

            self.isLoading(true);
            factory()
                .then(function (run) {
                    self.isLoading(false);
                    app = run(element.querySelector(".remote-app-host"));
                })
                .catch(function(err) {
                    self.isLoading(false);
                    self.onError(err);
                });
        };
        self.retry = function () {
            if (!self)
                return;

            self.isError(false);
            self.load();
        };
        self.load();
    }

    ko.components.register('tt-remote', {
        viewModel: {
            createViewModel: function (params, meta) {
                return new ViewModel({ factory: params.factory }, meta.element);
            }
        },
        template: template

    });
    return true;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(45), __webpack_require__(29), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (rwwaMath, Decimal, _) {
    return {
        calculate: calculate
    };

    function product(currencyValues) {
        return _.reduce(currencyValues, function (memo, num) {
            return Decimal(Decimal(memo).mul(num));
        }, Decimal(1));
    }

    function sum(currencyValues) {
        return _.reduce(currencyValues, function (memo, num) {
            var res1 = Decimal(memo.add(num));
            return res1;
        }, Decimal(0));
    }

    function combReturn(set, size, investment) {
        return _.reduce(rwwaMath.combinations(set, size), function(memo, comb) {
            var combinationProduct = Decimal(rwwaMath.truncate(Decimal(product(comb).toNumber()).mul(100).mul(investment.toNumber()))).div(100);
            return sum([memo, combinationProduct]);
        }, Decimal(0));
    }

    function calculate(stakes, legReturn) {
        var decLegReturns = _.map(legReturn, function (value) {
            return Decimal(value);
        });
        var decStakes = _.map(stakes, function(value) {
            return Decimal(value);
        });

        var decReturns = [];

        _.each(decStakes, function (stake, idx) {
            decReturns.push(combReturn(decLegReturns, (idx + 1), stake));
        });

        var pp = sum(decReturns);

        return pp.toNumber();
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(22), __webpack_require__(6), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (loggingService, amplify, _) {
    var _storeKey = 'multi';

    // use session scope storage for now - may change to local storage
    var _store = function () {
        if (amplify.store.types.sessionStorage) {
            return amplify.store.sessionStorage;
        }
        return amplify.store.memory;
    }();

    return {
        clear: clear,
        get: get,
        set: set
    }

    function clear() {
        loggingService.logDebug("multiStore.clear");

        _store(_storeKey, null);
    };

    function get() {
        var result = {
            uuid: null,
            investment: 0,
            multiFormulas: [],
            numberOfLegs: 0
        };

        var multiBetData = _store(_storeKey);

        if (multiBetData && _.isObject(multiBetData)) {
            result.uuid = multiBetData.uuid || result.uuid;
            result.investment = multiBetData.investment || result.investment;
            result.multiFormulas = multiBetData.multiFormulas || result.multiFormulas;
            result.numberOfLegs = multiBetData.numberOfLegs || result.numberOfLegs;
        }

        return result;
    };

    function set(multiBetData) {

        loggingService.logDebug("multiStore.set", JSON.stringify(multiBetData));

        var data = {
            uuid: multiBetData.uuid,
            investment: multiBetData.investment,
            multiFormulas: multiBetData.multiFormulas,
            numberOfLegs: multiBetData.numberOfLegs
        };
        _store(_storeKey, data);
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(235), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (projectedPayCalculator, _) {
    return {
        buildSummary: buildSummary
    };

    function buildSummary(multiBetAmount, multiFormulas, multiBetLegReturns) {
        var combinations = 0;
        var total = 0;
        var projectedPay = 0;

        _.each(multiFormulas, function (multiFormula) {
            total += multiFormula.Stake * multiFormula.NumberOfCombinations;
            if (multiFormula.Stake > 0) {
                combinations += multiFormula.NumberOfCombinations;
            }
        });

        var stakes = _.map(_.sortBy(multiFormulas, 'FormulaNumber'), function(multiFormula) {
            return multiFormula.Stake;
        });

        if (stakes.length == 0) {
            for (var legCnt = 1; legCnt < multiBetLegReturns.length; legCnt++) {
                stakes.push(0);
            };
        }

        if (multiBetAmount > 0) {
            combinations++;
            total += multiBetAmount;
            stakes.push(multiBetAmount);
        }

        projectedPay += projectedPayCalculator.calculate(stakes, multiBetLegReturns);


        return {
            numberOfCombinations: combinations,
            totalCost: total,
            projectedPay: projectedPay
        };
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(45), __webpack_require__(2), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, rwwaMath, _) {
    return function(amount,min,max,step,pattern) {
        var self = this;
        self.Amount = ko.observable(amount);
        self.AmountString = ko.observable(amount.toString());
        self.HasFocus = ko.observable();
        self.PreviousIsPreset = true;
        self.TotalCost = ko.observable(0);

        self.Step = step;
        self.Min = min;
        self.Max = max;
        self.Pattern = pattern;

        self.HasFocus.subscribe(function(newValue) {
            if (newValue == true) {
                self.AmountString(self.Amount().toString());
            } else {
                self.Amount(clampAmountValue(self.Amount()));
                self.AmountString(rwwaMath.toMoney(self.Amount(), 2, ''));
            }
        });
        self.HasFocus(false);
      
        function floorToStep(step, value) {
            return step * Math.floor(value / step);
        }

        function clampAmountValue(amount) {
            var minf = _.partial(Math.min, self.Max);
            var maxf = _.partial(Math.max, self.Min);
            var stepf = _.partial(floorToStep, self.Step);
            return _.compose(minf, maxf, stepf)(amount);
        }

        function updateAmountIfNumber() {
            var amountString = self.AmountString();
            if (!isNaN(amountString) && self.Pattern.test(amountString)) {
                self.Amount(clampAmountValue(Number(amountString)));
            }
        }

        self.UpdateAmount = function (delta) {
            self.PreviousIsPreset = true;
            self.Amount(clampAmountValue(self.Amount() + delta));
            self.AmountString(self.Amount().toString());
        }

        self.ClearAmount = function () {
            self.Amount(clampAmountValue(0));
            self.AmountString(self.Amount().toString());
        }
     
        self.AppendAmount = function (str) {
            if ((self.Amount() < max) && (str != '.' || self.Step == 0.5)) {
                if (str == '.') {
                    self.PreviousIsPreset = false;
                }

                if (self.PreviousIsPreset) {
                    self.ClearAmount();
                    self.PreviousIsPreset = false;
                }
                var amountString = self.AmountString();

                if (amountString == '0') {
                    amountString = '';
                }

                if (str != '.' || !amountString.match(/\./)) {
                    var appendedAmountString = amountString + str;

                    if (self.Pattern.test(appendedAmountString)) {
                        self.AmountString(appendedAmountString);
                        updateAmountIfNumber();
                    }
                }
            }
        }

        self.BackSpaceAmount = function () {
            var strLen = self.AmountString().length;
            self.PreviousIsPreset = false;
            if (strLen > 1) {
                var amountString = self.AmountString();
                var backSpacedAmountString = amountString.substring(0, strLen - 1);
                self.AmountString(backSpacedAmountString);
                updateAmountIfNumber();
            } else {
                self.Amount(0);
                self.AmountString('0');
            }
        }

        self.Enter = function() {
            self.HasFocus(true);
        }

        self.Leave = function () {
            self.HasFocus(false);
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(238), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, calculatorViewModel) {
    return function (formulaName, formulaNumber, stake, numberOfCombinations) {
        var self = this;

        function buildCalculatorFor(formulaNum, initStake) {
            if (formulaNum === 1) {
                return new calculatorViewModel(initStake, 0, 99999, 1, /^\d{0,5}$/);
            }
            return new calculatorViewModel(initStake, 0, 99999.5, 0.5, /^\d{0,5}(\.\d?)?$/);
        }

        self.calculator = buildCalculatorFor(formulaNumber, stake);
        self.Stake = self.calculator.Amount;
        self.StakeString = self.calculator.AmountString;
        self.FormulaName = ko.observable(formulaName);
        self.FormulaNumber = ko.observable(formulaNumber);
        self.NumberOfCombinations = ko.observable(numberOfCombinations);
        self.CalculatorVisible = ko.observable(false);
        self.TotalCost = self.calculator.TotalCost;
        self.CalcHasFocus = self.calculator.HasFocus;
        self.Step = self.calculator.Step;

        self.Cost = ko.computed(function () {
            return self.Stake() * self.NumberOfCombinations();
        });
        self.UpdateStake = function (value) {
            self.calculator.UpdateAmount(value);
        }
        self.ClearStake = function () {
            self.calculator.ClearAmount();
        }
        self.AppendStake = function (str) {
            self.calculator.AppendAmount(str);
        }
        self.BackSpaceStake = function () {
            self.calculator.BackSpaceAmount();
        }
        self.ShowCalculator = function() {
            self.CalculatorVisible(true);
            self.calculator.Enter();
        }
        self.HideCalculator = function() {
            self.calculator.Leave();
            self.CalculatorVisible(false);
        }
        self.SetCalculatorPresetMode = function (presetMode) {
            self.calculator.PreviousIsPreset = presetMode;
        }
    }

}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(71)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, betAmountViewModel) {
    return function (formulaName, formulaNumber, numberOfCombinations, stake) {
        var self = this;

        function buildBetAmountModelFor(formulaNum, initStake) {
            if (formulaNum === 1) {
                return new betAmountViewModel(initStake, 0, 99999, 1);
            }
            return new betAmountViewModel(initStake, 0, 99999.5, 0.5);
        }

        self.FormulaName = formulaName;
        self.FormulaNumber = formulaNumber;
        self.NumberOfCombinations = numberOfCombinations;
        self.BetAmountViewModel = buildBetAmountModelFor(formulaNumber, stake);
        self.Cost = ko.computed(function () {
            return self.BetAmountViewModel.Amount() * self.NumberOfCombinations;
        });
        self.TotalCost = ko.observable(0);
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * A constructor for a loading indicator used in page navigation.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery) {
    var indicator = function(elementSelector) {
        var self = this;

        var _styles = {
            none: "none",
            autoTop: "autoTop",
            fullScreenFixed: "fullScreenFixed"
        };

        self.selector = elementSelector;
        self.shownFlag = false; /* standard show/hide flag */
        self.counter = 0;   /* stack counter for pop/push */
        self.style = _styles.none;

        function render() {
            var $overlay = jQuery(self.selector);
            if (self.shownFlag || self.counter) {
                switch (self.style) {
                    case _styles.fullScreenFixed:
                        $overlay.css({ 'height': jQuery(document).height() })
                            .css({ 'position': "fixed" })
                            .css({ 'top': 0, 'left': 0, 'right': 0, 'bottom': 0 })
                            .show();
                        break;
                    case _styles.autoTop:
                        $overlay.css({ 'height': jQuery(document).height(), 'top': "auto" }).show();
                        break;
                    default:
                        $overlay.css({ 'height': jQuery(document).height() }).show();
                        break;
                }
            } else {
                $overlay.hide();
            }
            //console.log("=>" + JSON.stringify(self));
        }

        self.showLoading = function() {
            self.shownFlag = true;
            self.counter = 0;
            self.style = _styles.autoTop;
            render();
        }

        self.showLoadingNoAuto = function() {
            self.shownFlag = true;
            self.counter = 0;
            self.style = _styles.none;
            render();
        }

        self.showLoadingFullScreenFixed = function() {
            self.shownFlag = true;
            self.counter = 0;
            self.style = _styles.fullScreenFixed;
            render();
        }

        self.hideLoading = function() {
            self.shownFlag = false;
            render();
        }

        /* allow nested show/hides, operates in addition to show/hide function */
        self.pushLoading = function(action) {
            if (!self.shownFlag) {
                self.style = _styles.autoTop;
            }
            self.counter++;
            render();

            return action(function hide() {
                if (self.counter > 0) {
                    self.counter--;
                }
                render();
            });
        }
    }

    return indicator;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Returns configuration rules for navigation.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    var self = this;

    //
    // urlPattern: regex to match destination url.
    //
    // useNavStack: if true historical navigation is enabled for this page,
    //              if false the standard tabtouch structural nav is used.
    //
    // returnUrl: optionally override the back target that will be pushed for this page 
    //
    self.NAV_CONFIG = [
        { urlPattern: "^betbuilder.*$", useNavStack: true, returnUrl: null },
        { urlPattern: "^account.*$", useNavStack: true, returnUrl: null },
        { urlPattern: "^password.*$", useNavStack: true, returnUrl: null },
        { urlPattern: "^settings.*$", useNavStack: true, returnUrl: null },
        { urlPattern: "^cms.*$", useNavStack: true, returnUrl: null },
        { urlPattern: "^.*$", useNavStack: false, returnUrl: null }
    ];


    //
    // Get the first matching rule given url
    //
    self.configFor = function(url) {
        for (var i = 0; i < self.NAV_CONFIG.length; ++i) {
            var config = self.NAV_CONFIG[i];
            var pattern = new RegExp(config.urlPattern);
            if (pattern.test(url)) {
                return config;
            }
        }
        return { urlPattern: null, useNavStack: false, returnUrl: null };
    };

    return self;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Handles redirection stuff.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(5), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, nav, common, cookies) {
    var isChecked = false,
        closePopup = function() {
            jQuery('#redirect-window').fadeOut('fast');
        },
        addCookie = function(remember) {
            cookies.set("RememberDesktopRedirect", remember, { expires: 365 });
        },
        getCookie = function() {
            return cookies.get("RememberDesktopRedirect");
        },
        initialiseRedirectPopup = function() {
            jQuery('#redirect-desktop').on("click", function(e) {
                if (isChecked === true) {
                    addCookie(true);
                }
            });

            jQuery('#redirect-mobile').on("click", function(e) {
                e.preventDefault();
                closePopup();
                if (isChecked === true) {
                    addCookie(false);
                }
            });

            jQuery('#RememberSelection').change(function() {
                if (this.checked === true) {
                    isChecked = true;
                } else {
                    isChecked = false;
                }
            });
        },
        showPopup = function() {
            jQuery("#redirect-window").show();
        },
        initialiseRedirect = function() {
            var isDesktopUser = jQuery("#desktop-user").val();
            var localUrlReferral = jQuery("#localUrlReferral").val();
            var isHome = nav.isHome(location.hash);
            if (isHome && isDesktopUser === "True") {
                if (typeof getCookie() === "undefined" && localUrlReferral !== "True") {
                    showPopup();
                } else if (getCookie() === "true" && localUrlReferral !== "True") {
                    var referrer = jQuery('#referrer');
                    var externalReferrer = null;
                    if (referrer.length !== 0) {
                        externalReferrer = referrer.val();
                    }
                    if (externalReferrer === null) {
                        var tabtouchDesktopUrl = jQuery("#tabtouch-desktop-url").val();
                        nav.redirectExternal(tabtouchDesktopUrl);
                        return;
                    }
                }
            }
        };

    (function() {
        common.bindLiveEvent('click', '[data-redirect-close-popup]', function(e) {
            closePopup();
            e.preventDefault();
            return false;
        });
    })();

    return {
        closePopup: closePopup,
        initialiseRedirectPopup: initialiseRedirectPopup,
        getCookie: getCookie,
        initialiseRedirect: initialiseRedirect
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery) {
    var ajax = function(type, url, data) {
        return jQuery.ajax({
            type: type,
            url: url,
            data: data,
            cache: false,
            contentType: 'application/json'
        });
    };

    return {
        get: function(url, data) {
            return ajax('GET', url, data);
        },
        put: function (url, data) {
            return ajax('PUT', url, data);
        },
        post: function (url, data) {
            return ajax('POST', url, data);
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function (messageBusService, loggingService) {
    var onError = null;
    var onSuccess = null;
    var watchId = null;
    var isGpsNative = false;

    return {
        init: init,
        cancel: cancel,
        success: success,
        error: error
    }

    function init() {
        messageBusService.subscribe("NATIVEBEACONID", onSuccess);
        messageBusService.subscribe("NATIVEBEACONERROR", onError);
        loggingService.logDebug('BeaconLocationService.init');
    }

    function cancel() {
        messageBusService.unsubscribe("NATIVEBEACONID", onSuccess);
        messageBusService.unsubscribe("NATIVEBEACONERROR", onError);
        loggingService.logDebug('BeaconLocationService.cancel');
    }

    function success(callback) {
        loggingService.logDebug('BeaconLocationService.success - callback set');
        onSuccess = callback;
        return this;
    }

    function error(callback) {
        loggingService.logDebug('BeaconLocationService.error - callback set');
        onError = callback;
        return this;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(30), __webpack_require__(4), __webpack_require__(22), __webpack_require__(62)], __WEBPACK_AMD_DEFINE_RESULT__ = function (featureService, messageBusService, loggingService, lbsConfigService) {
    var onError = null;
    var onSuccess = null;
    var watchId = null;
    var isGpsNative = false;

    return {
        init: init,
        cancel: cancel,
        jolt: jolt,
        success: success,
        error: error
    }

    function init() {
        var msg = 'GeoLocationService.init';
        loggingService.logDebug(msg);
        featureService.isActive('NativeGps')
            .then(function(active) {
                if (active) {
                    isGpsNative = true;
                    setupNativeGps();
                } else {
                    isGpsNative = false;
                    setupJsGps();
                }
            });
    }

    function turnOnNativeGps() {
        var parameters = lbsConfigService.getParameters();
        var data = parameters;
        data["state"] = "on";
        var msg = "GeoLocationService - turnOnNativeGps : " + JSON.stringify(data);
        loggingService.logDebug(msg);
        messageBusService.publish("LBSTRACKING", data);
    }

    function turnOffNativeGps() {
        messageBusService.publish("LBSTRACKING", { state: "off" });
    }

    function setupNativeGps() {
        if (watchId == null) {
            var msg = "GeoLocationService - setupNativeGps";
            loggingService.logDebug(msg);
            messageBusService.subscribe("NATIVEGPSCOORDINATES", onSuccess);
            messageBusService.subscribe("NATIVEGPSERROR", onError);
            turnOnNativeGps();
            watchId = 1;
        }
    }

    function destroyNativeGps() {
            if (watchId) {
                var msg = "GeoLocationService - setupNativeGps";
                loggingService.logDebug(msg);
                messageBusService.unsubscribe("NATIVEGPSCOORDINATES", onSuccess);
                messageBusService.unsubscribe("NATIVEGPSERROR", onError);
                turnOffNativeGps();
                watchId = null;
            }      
    }

    function setupJsGps() {
        if (watchId == null) {
            watchId = navigator.geolocation.watchPosition(onSuccess, onError, { enableHighAccuracy: true, maximumAge: 40000, timeout: 60000 });
        }
    }

    function cancel() {
        var msg = 'GeoLocationService.cancel';
        loggingService.logDebug(msg);
        if (isGpsNative) {
            destroyNativeGps();
        } else {
            if (watchId) {
                navigator.geolocation.clearWatch(watchId);
                watchId = null;
            }
        }
    }

    function jolt() {
        var msg = 'GeoLocationService.jolt';
        loggingService.logDebug(msg);
        turnOffNativeGps();
        turnOnNativeGps();
    }

    function success(callback) {
        var msg = 'GeoLocationService.success - callback set';
        loggingService.logDebug(msg);
        onSuccess = callback;
        return this;
    }

    function error(callback) {
        var msg = 'GeoLocationService.error - callback set';
        loggingService.logDebug(msg);
        onError = callback;
        return this;
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Handles storing sessions (and history?).
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(amplify, _) {
    var self = this;

    var _storeKey = 'nav';

    //
    // store the nav settings per browser session
    //
    var _store = function() {
        if (amplify.store.types.sessionStorage) {
            return amplify.store.sessionStorage;
        }
        return amplify.store.memory;
    }();

    var _getData = function() {
        var data = _store(_storeKey);
        if (data) {
            return data;
        }
        return { backUrl: '#', urlStack: [] };
    };

    var _setData = function(data) {
        _store(_storeKey, data);
    };

    self.getData = function() {
        return _getData();
    }

    //
    // set the fixed back url which applies not using stack
    //   based nav for this page
    //
    self.setBackUrl = function (backUrl) {
        console.log('NavigationService: setBackUrl(' + backUrl + ')');
        console.log(_getData());
        var navData = _getData();
        navData.backUrl = backUrl;
        _setData(navData);
    };

    //
    // get the current back url and removing it from the stack if any,
    //   or return the fixed back url
    //
    self.popUrl = function (navTo) {
        console.log('NavigationService: popUrl(' + navTo + ')');
        console.log(_getData());
        var navData = _getData();
        if (navData.urlStack.length) {
            var head = navData.urlStack.shift();
            _setData(navData);
            return navTo(head);
        }
        if (navData.backUrl) {
            return navTo(navData.backUrl);
        }
        return false;
    };

    //
    // push url to stack, if url already in stack, bring it to the top
    //
    self.pushUrl = function (url) {
        console.log('NavigationService: pushUrl(' + url + ')');
        console.log(_getData());
        var navData = _getData();
        navData.urlStack = _.filter(navData.urlStack, function(elem) {
            return elem != url;
        });
        navData.urlStack.unshift(url);
        _setData(navData);
    };

    //
    // get the current back url without removing it
    //
    self.peekUrl = function () {
        console.log('NavigationService: peekUrl()');
        console.log(_getData());
        var navData = _getData();
        if (navData.urlStack.length) {
            return navData.urlStack[0];
        }
        return navData.backUrl;
    };

    //
    // remove all instances of url from stack
    //
    self.clearUrl = function (url) {
        console.log('NavigationService: clearUrl()');
        console.log(_getData());
        var navData = _getData();
        navData.urlStack = _.filter(navData.urlStack, function(elem) {
            return elem != url;
        });
        _setData(navData);
    };

    //
    // remove all instances of urls starting with url from stack
    //
    self.pruneUrl = function (baseUrl) {
        console.log('NavigationService: pruneUrl(' + baseUrl + ')');
        console.log(_getData());
        var navData = _getData();
        navData.urlStack = _.filter(navData.urlStack, function(elem) {
            return elem.substring(0, baseUrl.length) != baseUrl;
        });
        _setData(navData);
    };

    //
    // clear the nav stack, effectivly reverting to the normal 
    // fixed structural nav
    //
    self.clearUrlStack = function () {
        console.log('NavigationService: clearUrlStack()');
        console.log(_getData());
        var navData = _getData();
        navData.urlStack = [];
        _setData(navData);
    };

    return self;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(0), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function(amplify, jQuery, TupleSpace) {
    window.PreferencesStore = function() {
        var self = this;

        var _storeKey = 'userprefs';

        //
        // the persistant store is shared across browser sessions and tabs per user-device
        // and has a long life-time
        //
        var _localStore = amplify.store;

        //
        // memory store is temporary and renewed each full page load
        //
        var _memoryStore = amplify.store.memory;

        //
        // allow for possible future data-migration
        //
        var _version = "1";

        // 
        // get preferences data from persistent storage, substitute in any missing attributes to 
        // ensure the data is well-formed before returning. If the key is missing then
        // initialise a new bet wallet, then write it to storage and return 
        //   
        var _readStorage = function() {
            var data = _localStore(_storeKey);
            if (!data || !jQuery.isArray(data)) {
                data = [];
                var space = new TupleSpace(data);
                space.put("Version", _version);
                _localStore(_storeKey, data);
            }
            return data;
        };

        //
        // load in-memory copy of prefs, otherwise sync with persistent store
        //
        var _readMemory = function() {
            var result = _memoryStore(_storeKey);
            if (!result) {
                result = _readStorage();
                _memoryStore(_storeKey, result);
            }
            return result;
        };

        // 
        //  update prefs, writing-through updates to in-memory and persistent-storage,
        //  which will keep data in sync without exposing the user to unexpected updates
        //
        var _updateStorage = function(operation, params) {
            var localData = _readStorage();
            var memData = _readMemory();

            localData = operation(localData, params);
            memData = operation(memData, params);

            _localStore(_storeKey, localData);
            _memoryStore(_storeKey, memData);
        };

        var _operations = {
            clear: function(data, params) {
                return null;
            },
            set: function(data, params) {
                var space = new TupleSpace(data);
                space.take_many(params.key);
                space.put(params.key, params.value);
                return data;
            },
            remove: function(data, params) {
                var space = new TupleSpace(data);
                space.take_many(params.key);
                return data;
            },
        };

        //
        // blast away any prefs data
        //
        self.clear = function() {
            _updateStorage(_operations.clear);
        };

        //
        // read operations
        //

        self.get = function(key) {
            var space = new TupleSpace(_readMemory());
            var tuple = space.copy(key);
            return tuple ? tuple[1] : null;
        };

        //
        // update operations
        //
        self.set = function(key, value) {
            _updateStorage(_operations.set, { key: key, value: value });
        };

        self.remove = function(key) {
            _updateStorage(_operations.remove, { key: key });
        };

    };

    return new window.PreferencesStore();
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37), __webpack_require__(68)], __WEBPACK_AMD_DEFINE_RESULT__ = function(rjsRequire, rjsDefine) {
    /**
     * Uses RequireJS to import a component from anywhere.
     */
    function fetchComponent(url) {
        return new Promise(function(resolve) {
            rjsRequire([url], function(component) {
                resolve(component);
            });
        });
    }


    /**
     * Define a RequireJS for remote components to be able to import.
     */
    function defineModule(name, func) {
        rjsDefine(name, func);
    }


    return {
        fetchComponent: fetchComponent,
        defineModule: defineModule
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function(amplify) {
    function store(key, value) {
        if (value !== undefined) {
            return amplify.store(key, value);
        } else {
            return amplify.store(key);
        }
    }

    return {
        store: store
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/**
 * Extends the string prototype with special "format" methods. This is ugly.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    if (!String.prototype.format) {
        String.prototype.format = function() {
            var args = arguments;
            return this.replace(/{(\d+)}/g, function(match, number) {
                return typeof args[number] != 'undefined' ? args[number] : match;
            });
        };
    };
    if (!String.prototype.template) {
        String.prototype.template = function(data) {
            return this.replace(/{{(\w+)}}/g, function(match, token) {
                return typeof data[token] != 'undefined' ? data[token] : match;
            });
        };
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return {
        getTime: function() {
            return new Date().getTime();
        }
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(87), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ko, lbs, nav) {
    return {
        initView: initView
    }

    function initView() {
        lbs.initView();
        nav.resetBack("Back");
    }
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */
/***/ (function(module, exports) {

/*global window */
/**
 * @license countdown.js v2.6.0 http://countdownjs.org
 * Copyright (c)2006-2014 Stephen M. McKamey.
 * Licensed under The MIT License.
 */
/*jshint bitwise:false */

/**
 * @public
 * @type {Object|null}
 */
var module;

/**
 * API entry
 * @public
 * @param {function(Object)|Date|number} start the starting date
 * @param {function(Object)|Date|number} end the ending date
 * @param {number} units the units to populate
 * @return {Object|number}
 */
var countdown = (

/**
 * @param {Object} module CommonJS Module
 */
function(module) {
	/*jshint smarttabs:true */

	'use strict';

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MILLISECONDS	= 0x001;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var SECONDS			= 0x002;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MINUTES			= 0x004;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var HOURS			= 0x008;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var DAYS			= 0x010;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var WEEKS			= 0x020;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MONTHS			= 0x040;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var YEARS			= 0x080;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var DECADES			= 0x100;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var CENTURIES		= 0x200;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MILLENNIA		= 0x400;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var DEFAULTS		= YEARS|MONTHS|DAYS|HOURS|MINUTES|SECONDS;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MILLISECONDS_PER_SECOND = 1000;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var SECONDS_PER_MINUTE = 60;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MINUTES_PER_HOUR = 60;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var HOURS_PER_DAY = 24;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MILLISECONDS_PER_DAY = HOURS_PER_DAY * MINUTES_PER_HOUR * SECONDS_PER_MINUTE * MILLISECONDS_PER_SECOND;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var DAYS_PER_WEEK = 7;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var MONTHS_PER_YEAR = 12;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var YEARS_PER_DECADE = 10;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var DECADES_PER_CENTURY = 10;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var CENTURIES_PER_MILLENNIUM = 10;

	/**
	 * @private
	 * @param {number} x number
	 * @return {number}
	 */
	var ceil = Math.ceil;

	/**
	 * @private
	 * @param {number} x number
	 * @return {number}
	 */
	var floor = Math.floor;

	/**
	 * @private
	 * @param {Date} ref reference date
	 * @param {number} shift number of months to shift
	 * @return {number} number of days shifted
	 */
	function borrowMonths(ref, shift) {
		var prevTime = ref.getTime();

		// increment month by shift
		ref.setMonth( ref.getMonth() + shift );

		// this is the trickiest since months vary in length
		return Math.round( (ref.getTime() - prevTime) / MILLISECONDS_PER_DAY );
	}

	/**
	 * @private
	 * @param {Date} ref reference date
	 * @return {number} number of days
	 */
	function daysPerMonth(ref) {
		var a = ref.getTime();

		// increment month by 1
		var b = new Date(a);
		b.setMonth( ref.getMonth() + 1 );

		// this is the trickiest since months vary in length
		return Math.round( (b.getTime() - a) / MILLISECONDS_PER_DAY );
	}

	/**
	 * @private
	 * @param {Date} ref reference date
	 * @return {number} number of days
	 */
	function daysPerYear(ref) {
		var a = ref.getTime();

		// increment year by 1
		var b = new Date(a);
		b.setFullYear( ref.getFullYear() + 1 );

		// this is the trickiest since years (periodically) vary in length
		return Math.round( (b.getTime() - a) / MILLISECONDS_PER_DAY );
	}

	/**
	 * Applies the Timespan to the given date.
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @param {Date=} date
	 * @return {Date}
	 */
	function addToDate(ts, date) {
		date = (date instanceof Date) || ((date !== null) && isFinite(date)) ? new Date(+date) : new Date();
		if (!ts) {
			return date;
		}

		// if there is a value field, use it directly
		var value = +ts.value || 0;
		if (value) {
			date.setTime(date.getTime() + value);
			return date;
		}

		value = +ts.milliseconds || 0;
		if (value) {
			date.setMilliseconds(date.getMilliseconds() + value);
		}

		value = +ts.seconds || 0;
		if (value) {
			date.setSeconds(date.getSeconds() + value);
		}

		value = +ts.minutes || 0;
		if (value) {
			date.setMinutes(date.getMinutes() + value);
		}

		value = +ts.hours || 0;
		if (value) {
			date.setHours(date.getHours() + value);
		}

		value = +ts.weeks || 0;
		if (value) {
			value *= DAYS_PER_WEEK;
		}

		value += +ts.days || 0;
		if (value) {
			date.setDate(date.getDate() + value);
		}

		value = +ts.months || 0;
		if (value) {
			date.setMonth(date.getMonth() + value);
		}

		value = +ts.millennia || 0;
		if (value) {
			value *= CENTURIES_PER_MILLENNIUM;
		}

		value += +ts.centuries || 0;
		if (value) {
			value *= DECADES_PER_CENTURY;
		}

		value += +ts.decades || 0;
		if (value) {
			value *= YEARS_PER_DECADE;
		}

		value += +ts.years || 0;
		if (value) {
			date.setFullYear(date.getFullYear() + value);
		}

		return date;
	}

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_MILLISECONDS	= 0;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_SECONDS		= 1;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_MINUTES		= 2;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_HOURS			= 3;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_DAYS			= 4;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_WEEKS			= 5;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_MONTHS		= 6;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_YEARS			= 7;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_DECADES		= 8;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_CENTURIES		= 9;

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	var LABEL_MILLENNIA		= 10;

	/**
	 * @private
	 * @type {Array}
	 */
	var LABELS_SINGLUAR;

	/**
	 * @private
	 * @type {Array}
	 */
	var LABELS_PLURAL;

	/**
	 * @private
	 * @type {string}
	 */
	var LABEL_LAST;

	/**
	 * @private
	 * @type {string}
	 */
	var LABEL_DELIM;

	/**
	 * @private
	 * @type {string}
	 */
	var LABEL_NOW;

	/**
	 * Formats a number & unit as a string
	 * 
	 * @param {number} value
	 * @param {number} unit
	 * @return {string}
	 */
	var formatter;

	/**
	 * Formats a number as a string
	 * 
	 * @private
	 * @param {number} value
	 * @return {string}
	 */
	var formatNumber;

	/**
	 * @private
	 * @param {number} value
	 * @param {number} unit unit index into label list
	 * @return {string}
	 */
	function plurality(value, unit) {
		return formatNumber(value)+((value === 1) ? LABELS_SINGLUAR[unit] : LABELS_PLURAL[unit]);
	}

	/**
	 * Formats the entries with singular or plural labels
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @return {Array}
	 */
	var formatList;

	/**
	 * Timespan representation of a duration of time
	 * 
	 * @private
	 * @this {Timespan}
	 * @constructor
	 */
	function Timespan() {}

	/**
	 * Formats the Timespan as a sentence
	 * 
	 * @param {string=} emptyLabel the string to use when no values returned
	 * @return {string}
	 */
	Timespan.prototype.toString = function(emptyLabel) {
		var label = formatList(this);

		var count = label.length;
		if (!count) {
			return emptyLabel ? ''+emptyLabel : LABEL_NOW;
		}
		if (count === 1) {
			return label[0];
		}

		var last = LABEL_LAST+label.pop();
		return label.join(LABEL_DELIM)+last;
	};

	/**
	 * Formats the Timespan as a sentence in HTML
	 * 
	 * @param {string=} tag HTML tag name to wrap each value
	 * @param {string=} emptyLabel the string to use when no values returned
	 * @return {string}
	 */
	Timespan.prototype.toHTML = function(tag, emptyLabel) {
		tag = tag || 'span';
		var label = formatList(this);

		var count = label.length;
		if (!count) {
			emptyLabel = emptyLabel || LABEL_NOW;
			return emptyLabel ? '<'+tag+'>'+emptyLabel+'</'+tag+'>' : emptyLabel;
		}
		for (var i=0; i<count; i++) {
			// wrap each unit in tag
			label[i] = '<'+tag+'>'+label[i]+'</'+tag+'>';
		}
		if (count === 1) {
			return label[0];
		}

		var last = LABEL_LAST+label.pop();
		return label.join(LABEL_DELIM)+last;
	};

	/**
	 * Applies the Timespan to the given date
	 * 
	 * @param {Date=} date the date to which the timespan is added.
	 * @return {Date}
	 */
	Timespan.prototype.addTo = function(date) {
		return addToDate(this, date);
	};

	/**
	 * Formats the entries as English labels
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @return {Array}
	 */
	formatList = function(ts) {
		var list = [];

		var value = ts.millennia;
		if (value) {
			list.push(formatter(value, LABEL_MILLENNIA));
		}

		value = ts.centuries;
		if (value) {
			list.push(formatter(value, LABEL_CENTURIES));
		}

		value = ts.decades;
		if (value) {
			list.push(formatter(value, LABEL_DECADES));
		}

		value = ts.years;
		if (value) {
			list.push(formatter(value, LABEL_YEARS));
		}

		value = ts.months;
		if (value) {
			list.push(formatter(value, LABEL_MONTHS));
		}

		value = ts.weeks;
		if (value) {
			list.push(formatter(value, LABEL_WEEKS));
		}

		value = ts.days;
		if (value) {
			list.push(formatter(value, LABEL_DAYS));
		}

		value = ts.hours;
		if (value) {
			list.push(formatter(value, LABEL_HOURS));
		}

		value = ts.minutes;
		if (value) {
			list.push(formatter(value, LABEL_MINUTES));
		}

		value = ts.seconds;
		if (value) {
			list.push(formatter(value, LABEL_SECONDS));
		}

		value = ts.milliseconds;
		if (value) {
			list.push(formatter(value, LABEL_MILLISECONDS));
		}

		return list;
	};

	/**
	 * Borrow any underflow units, carry any overflow units
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @param {string} toUnit
	 */
	function rippleRounded(ts, toUnit) {
		switch (toUnit) {
			case 'seconds':
				if (ts.seconds !== SECONDS_PER_MINUTE || isNaN(ts.minutes)) {
					return;
				}
				// ripple seconds up to minutes
				ts.minutes++;
				ts.seconds = 0;

				/* falls through */
			case 'minutes':
				if (ts.minutes !== MINUTES_PER_HOUR || isNaN(ts.hours)) {
					return;
				}
				// ripple minutes up to hours
				ts.hours++;
				ts.minutes = 0;

				/* falls through */
			case 'hours':
				if (ts.hours !== HOURS_PER_DAY || isNaN(ts.days)) {
					return;
				}
				// ripple hours up to days
				ts.days++;
				ts.hours = 0;

				/* falls through */
			case 'days':
				if (ts.days !== DAYS_PER_WEEK || isNaN(ts.weeks)) {
					return;
				}
				// ripple days up to weeks
				ts.weeks++;
				ts.days = 0;

				/* falls through */
			case 'weeks':
				if (ts.weeks !== daysPerMonth(ts.refMonth)/DAYS_PER_WEEK || isNaN(ts.months)) {
					return;
				}
				// ripple weeks up to months
				ts.months++;
				ts.weeks = 0;

				/* falls through */
			case 'months':
				if (ts.months !== MONTHS_PER_YEAR || isNaN(ts.years)) {
					return;
				}
				// ripple months up to years
				ts.years++;
				ts.months = 0;

				/* falls through */
			case 'years':
				if (ts.years !== YEARS_PER_DECADE || isNaN(ts.decades)) {
					return;
				}
				// ripple years up to decades
				ts.decades++;
				ts.years = 0;

				/* falls through */
			case 'decades':
				if (ts.decades !== DECADES_PER_CENTURY || isNaN(ts.centuries)) {
					return;
				}
				// ripple decades up to centuries
				ts.centuries++;
				ts.decades = 0;

				/* falls through */
			case 'centuries':
				if (ts.centuries !== CENTURIES_PER_MILLENNIUM || isNaN(ts.millennia)) {
					return;
				}
				// ripple centuries up to millennia
				ts.millennia++;
				ts.centuries = 0;
				/* falls through */
			}
	}

	/**
	 * Ripple up partial units one place
	 * 
	 * @private
	 * @param {Timespan} ts timespan
	 * @param {number} frac accumulated fractional value
	 * @param {string} fromUnit source unit name
	 * @param {string} toUnit target unit name
	 * @param {number} conversion multiplier between units
	 * @param {number} digits max number of decimal digits to output
	 * @return {number} new fractional value
	 */
	function fraction(ts, frac, fromUnit, toUnit, conversion, digits) {
		if (ts[fromUnit] >= 0) {
			frac += ts[fromUnit];
			delete ts[fromUnit];
		}

		frac /= conversion;
		if (frac + 1 <= 1) {
			// drop if below machine epsilon
			return 0;
		}

		if (ts[toUnit] >= 0) {
			// ensure does not have more than specified number of digits
			ts[toUnit] = +(ts[toUnit] + frac).toFixed(digits);
			rippleRounded(ts, toUnit);
			return 0;
		}

		return frac;
	}

	/**
	 * Ripple up partial units to next existing
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @param {number} digits max number of decimal digits to output
	 */
	function fractional(ts, digits) {
		var frac = fraction(ts, 0, 'milliseconds', 'seconds', MILLISECONDS_PER_SECOND, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'seconds', 'minutes', SECONDS_PER_MINUTE, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'minutes', 'hours', MINUTES_PER_HOUR, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'hours', 'days', HOURS_PER_DAY, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'days', 'weeks', DAYS_PER_WEEK, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'weeks', 'months', daysPerMonth(ts.refMonth)/DAYS_PER_WEEK, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'months', 'years', daysPerYear(ts.refMonth)/daysPerMonth(ts.refMonth), digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'years', 'decades', YEARS_PER_DECADE, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'decades', 'centuries', DECADES_PER_CENTURY, digits);
		if (!frac) { return; }

		frac = fraction(ts, frac, 'centuries', 'millennia', CENTURIES_PER_MILLENNIUM, digits);

		// should never reach this with remaining fractional value
		if (frac) { throw new Error('Fractional unit overflow'); }
	}

	/**
	 * Borrow any underflow units, carry any overflow units
	 * 
	 * @private
	 * @param {Timespan} ts
	 */
	function ripple(ts) {
		var x;

		if (ts.milliseconds < 0) {
			// ripple seconds down to milliseconds
			x = ceil(-ts.milliseconds / MILLISECONDS_PER_SECOND);
			ts.seconds -= x;
			ts.milliseconds += x * MILLISECONDS_PER_SECOND;

		} else if (ts.milliseconds >= MILLISECONDS_PER_SECOND) {
			// ripple milliseconds up to seconds
			ts.seconds += floor(ts.milliseconds / MILLISECONDS_PER_SECOND);
			ts.milliseconds %= MILLISECONDS_PER_SECOND;
		}

		if (ts.seconds < 0) {
			// ripple minutes down to seconds
			x = ceil(-ts.seconds / SECONDS_PER_MINUTE);
			ts.minutes -= x;
			ts.seconds += x * SECONDS_PER_MINUTE;

		} else if (ts.seconds >= SECONDS_PER_MINUTE) {
			// ripple seconds up to minutes
			ts.minutes += floor(ts.seconds / SECONDS_PER_MINUTE);
			ts.seconds %= SECONDS_PER_MINUTE;
		}

		if (ts.minutes < 0) {
			// ripple hours down to minutes
			x = ceil(-ts.minutes / MINUTES_PER_HOUR);
			ts.hours -= x;
			ts.minutes += x * MINUTES_PER_HOUR;

		} else if (ts.minutes >= MINUTES_PER_HOUR) {
			// ripple minutes up to hours
			ts.hours += floor(ts.minutes / MINUTES_PER_HOUR);
			ts.minutes %= MINUTES_PER_HOUR;
		}

		if (ts.hours < 0) {
			// ripple days down to hours
			x = ceil(-ts.hours / HOURS_PER_DAY);
			ts.days -= x;
			ts.hours += x * HOURS_PER_DAY;

		} else if (ts.hours >= HOURS_PER_DAY) {
			// ripple hours up to days
			ts.days += floor(ts.hours / HOURS_PER_DAY);
			ts.hours %= HOURS_PER_DAY;
		}

		while (ts.days < 0) {
			// NOTE: never actually seen this loop more than once

			// ripple months down to days
			ts.months--;
			ts.days += borrowMonths(ts.refMonth, 1);
		}

		// weeks is always zero here

		if (ts.days >= DAYS_PER_WEEK) {
			// ripple days up to weeks
			ts.weeks += floor(ts.days / DAYS_PER_WEEK);
			ts.days %= DAYS_PER_WEEK;
		}

		if (ts.months < 0) {
			// ripple years down to months
			x = ceil(-ts.months / MONTHS_PER_YEAR);
			ts.years -= x;
			ts.months += x * MONTHS_PER_YEAR;

		} else if (ts.months >= MONTHS_PER_YEAR) {
			// ripple months up to years
			ts.years += floor(ts.months / MONTHS_PER_YEAR);
			ts.months %= MONTHS_PER_YEAR;
		}

		// years is always non-negative here
		// decades, centuries and millennia are always zero here

		if (ts.years >= YEARS_PER_DECADE) {
			// ripple years up to decades
			ts.decades += floor(ts.years / YEARS_PER_DECADE);
			ts.years %= YEARS_PER_DECADE;

			if (ts.decades >= DECADES_PER_CENTURY) {
				// ripple decades up to centuries
				ts.centuries += floor(ts.decades / DECADES_PER_CENTURY);
				ts.decades %= DECADES_PER_CENTURY;

				if (ts.centuries >= CENTURIES_PER_MILLENNIUM) {
					// ripple centuries up to millennia
					ts.millennia += floor(ts.centuries / CENTURIES_PER_MILLENNIUM);
					ts.centuries %= CENTURIES_PER_MILLENNIUM;
				}
			}
		}
	}

	/**
	 * Remove any units not requested
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @param {number} units the units to populate
	 * @param {number} max number of labels to output
	 * @param {number} digits max number of decimal digits to output
	 */
	function pruneUnits(ts, units, max, digits) {
		var count = 0;

		// Calc from largest unit to smallest to prevent underflow
		if (!(units & MILLENNIA) || (count >= max)) {
			// ripple millennia down to centuries
			ts.centuries += ts.millennia * CENTURIES_PER_MILLENNIUM;
			delete ts.millennia;

		} else if (ts.millennia) {
			count++;
		}

		if (!(units & CENTURIES) || (count >= max)) {
			// ripple centuries down to decades
			ts.decades += ts.centuries * DECADES_PER_CENTURY;
			delete ts.centuries;

		} else if (ts.centuries) {
			count++;
		}

		if (!(units & DECADES) || (count >= max)) {
			// ripple decades down to years
			ts.years += ts.decades * YEARS_PER_DECADE;
			delete ts.decades;

		} else if (ts.decades) {
			count++;
		}

		if (!(units & YEARS) || (count >= max)) {
			// ripple years down to months
			ts.months += ts.years * MONTHS_PER_YEAR;
			delete ts.years;

		} else if (ts.years) {
			count++;
		}

		if (!(units & MONTHS) || (count >= max)) {
			// ripple months down to days
			if (ts.months) {
				ts.days += borrowMonths(ts.refMonth, ts.months);
			}
			delete ts.months;

			if (ts.days >= DAYS_PER_WEEK) {
				// ripple day overflow back up to weeks
				ts.weeks += floor(ts.days / DAYS_PER_WEEK);
				ts.days %= DAYS_PER_WEEK;
			}

		} else if (ts.months) {
			count++;
		}

		if (!(units & WEEKS) || (count >= max)) {
			// ripple weeks down to days
			ts.days += ts.weeks * DAYS_PER_WEEK;
			delete ts.weeks;

		} else if (ts.weeks) {
			count++;
		}

		if (!(units & DAYS) || (count >= max)) {
			//ripple days down to hours
			ts.hours += ts.days * HOURS_PER_DAY;
			delete ts.days;

		} else if (ts.days) {
			count++;
		}

		if (!(units & HOURS) || (count >= max)) {
			// ripple hours down to minutes
			ts.minutes += ts.hours * MINUTES_PER_HOUR;
			delete ts.hours;

		} else if (ts.hours) {
			count++;
		}

		if (!(units & MINUTES) || (count >= max)) {
			// ripple minutes down to seconds
			ts.seconds += ts.minutes * SECONDS_PER_MINUTE;
			delete ts.minutes;

		} else if (ts.minutes) {
			count++;
		}

		if (!(units & SECONDS) || (count >= max)) {
			// ripple seconds down to milliseconds
			ts.milliseconds += ts.seconds * MILLISECONDS_PER_SECOND;
			delete ts.seconds;

		} else if (ts.seconds) {
			count++;
		}

		// nothing to ripple milliseconds down to
		// so ripple back up to smallest existing unit as a fractional value
		if (!(units & MILLISECONDS) || (count >= max)) {
			fractional(ts, digits);
		}
	}

	/**
	 * Populates the Timespan object
	 * 
	 * @private
	 * @param {Timespan} ts
	 * @param {?Date} start the starting date
	 * @param {?Date} end the ending date
	 * @param {number} units the units to populate
	 * @param {number} max number of labels to output
	 * @param {number} digits max number of decimal digits to output
	 */
	function populate(ts, start, end, units, max, digits) {
		var now = new Date();

		ts.start = start = start || now;
		ts.end = end = end || now;
		ts.units = units;

		ts.value = end.getTime() - start.getTime();
		if (ts.value < 0) {
			// swap if reversed
			var tmp = end;
			end = start;
			start = tmp;
		}

		// reference month for determining days in month
		ts.refMonth = new Date(start.getFullYear(), start.getMonth(), 15, 12, 0, 0);
		try {
			// reset to initial deltas
			ts.millennia = 0;
			ts.centuries = 0;
			ts.decades = 0;
			ts.years = end.getFullYear() - start.getFullYear();
			ts.months = end.getMonth() - start.getMonth();
			ts.weeks = 0;
			ts.days = end.getDate() - start.getDate();
			ts.hours = end.getHours() - start.getHours();
			ts.minutes = end.getMinutes() - start.getMinutes();
			ts.seconds = end.getSeconds() - start.getSeconds();
			ts.milliseconds = end.getMilliseconds() - start.getMilliseconds();

			ripple(ts);
			pruneUnits(ts, units, max, digits);

		} finally {
			delete ts.refMonth;
		}

		return ts;
	}

	/**
	 * Determine an appropriate refresh rate based upon units
	 * 
	 * @private
	 * @param {number} units the units to populate
	 * @return {number} milliseconds to delay
	 */
	function getDelay(units) {
		if (units & MILLISECONDS) {
			// refresh very quickly
			return MILLISECONDS_PER_SECOND / 30; //30Hz
		}

		if (units & SECONDS) {
			// refresh every second
			return MILLISECONDS_PER_SECOND; //1Hz
		}

		if (units & MINUTES) {
			// refresh every minute
			return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE;
		}

		if (units & HOURS) {
			// refresh hourly
			return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR;
		}
		
		if (units & DAYS) {
			// refresh daily
			return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * HOURS_PER_DAY;
		}

		// refresh the rest weekly
		return MILLISECONDS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * HOURS_PER_DAY * DAYS_PER_WEEK;
	}

	/**
	 * API entry point
	 * 
	 * @public
	 * @param {Date|number|Timespan|null|function(Timespan,number)} start the starting date
	 * @param {Date|number|Timespan|null|function(Timespan,number)} end the ending date
	 * @param {number=} units the units to populate
	 * @param {number=} max number of labels to output
	 * @param {number=} digits max number of decimal digits to output
	 * @return {Timespan|number}
	 */
	function countdown(start, end, units, max, digits) {
		var callback;

		// ensure some units or use defaults
		units = +units || DEFAULTS;
		// max must be positive
		max = (max > 0) ? max : NaN;
		// clamp digits to an integer between [0, 20]
		digits = (digits > 0) ? (digits < 20) ? Math.round(digits) : 20 : 0;

		// ensure start date
		var startTS = null;
		if ('function' === typeof start) {
			callback = start;
			start = null;

		} else if (!(start instanceof Date)) {
			if ((start !== null) && isFinite(start)) {
				start = new Date(+start);
			} else {
				if ('object' === typeof startTS) {
					startTS = /** @type{Timespan} */(start);
				}
				start = null;
			}
		}

		// ensure end date
		var endTS = null;
		if ('function' === typeof end) {
			callback = end;
			end = null;

		} else if (!(end instanceof Date)) {
			if ((end !== null) && isFinite(end)) {
				end = new Date(+end);
			} else {
				if ('object' === typeof end) {
					endTS = /** @type{Timespan} */(end);
				}
				end = null;
			}
		}

		// must wait to interpret timespans until after resolving dates
		if (startTS) {
			start = addToDate(startTS, end);
		}
		if (endTS) {
			end = addToDate(endTS, start);
		}

		if (!start && !end) {
			// used for unit testing
			return new Timespan();
		}

		if (!callback) {
			return populate(new Timespan(), /** @type{Date} */(start), /** @type{Date} */(end), /** @type{number} */(units), /** @type{number} */(max), /** @type{number} */(digits));
		}

		// base delay off units
		var delay = getDelay(units),
			timerId,
			fn = function() {
				callback(
					populate(new Timespan(), /** @type{Date} */(start), /** @type{Date} */(end), /** @type{number} */(units), /** @type{number} */(max), /** @type{number} */(digits)),
					timerId
				);
			};

		fn();
		return (timerId = setInterval(fn, delay));
	}

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.MILLISECONDS = MILLISECONDS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.SECONDS = SECONDS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.MINUTES = MINUTES;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.HOURS = HOURS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.DAYS = DAYS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.WEEKS = WEEKS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.MONTHS = MONTHS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.YEARS = YEARS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.DECADES = DECADES;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.CENTURIES = CENTURIES;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.MILLENNIA = MILLENNIA;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.DEFAULTS = DEFAULTS;

	/**
	 * @public
	 * @const
	 * @type {number}
	 */
	countdown.ALL = MILLENNIA|CENTURIES|DECADES|YEARS|MONTHS|WEEKS|DAYS|HOURS|MINUTES|SECONDS|MILLISECONDS;

	/**
	 * Customize the format settings.
	 * @public
	 * @param {Object} format settings object
	 */
	var setFormat = countdown.setFormat = function(format) {
		if (!format) { return; }

		if ('singular' in format || 'plural' in format) {
			var singular = format.singular || [];
			if (singular.split) {
				singular = singular.split('|');
			}
			var plural = format.plural || [];
			if (plural.split) {
				plural = plural.split('|');
			}

			for (var i=LABEL_MILLISECONDS; i<=LABEL_MILLENNIA; i++) {
				// override any specified units
				LABELS_SINGLUAR[i] = singular[i] || LABELS_SINGLUAR[i];
				LABELS_PLURAL[i] = plural[i] || LABELS_PLURAL[i];
			}
		}

		if ('string' === typeof format.last) {
			LABEL_LAST = format.last;
		}
		if ('string' === typeof format.delim) {
			LABEL_DELIM = format.delim;
		}
		if ('string' === typeof format.empty) {
			LABEL_NOW = format.empty;
		}
		if ('function' === typeof format.formatNumber) {
			formatNumber = format.formatNumber;
		}
		if ('function' === typeof format.formatter) {
			formatter = format.formatter;
		}
	};

	/**
	 * Revert to the default formatting.
	 * @public
	 */
	var resetFormat = countdown.resetFormat = function() {
		LABELS_SINGLUAR = ' millisecond| second| minute| hour| day| week| month| year| decade| century| millennium'.split('|');
		LABELS_PLURAL = ' milliseconds| seconds| minutes| hours| days| weeks| months| years| decades| centuries| millennia'.split('|');
		LABEL_LAST = ' and ';
		LABEL_DELIM = ', ';
		LABEL_NOW = '';
		formatNumber = function(value) { return value; };
		formatter = plurality;
	};

	/**
	 * Override the unit labels.
	 * @public
	 * @param {string|Array=} singular a pipe ('|') delimited list of singular unit name overrides
	 * @param {string|Array=} plural a pipe ('|') delimited list of plural unit name overrides
	 * @param {string=} last a delimiter before the last unit (default: ' and ')
	 * @param {string=} delim a delimiter to use between all other units (default: ', ')
	 * @param {string=} empty a label to use when all units are zero (default: '')
	 * @param {function(number):string=} formatNumber a function which formats numbers as a string
	 * @param {function(number,number):string=} formatter a function which formats a number/unit pair as a string
	 * @deprecated since version 2.6.0
	 */
	countdown.setLabels = function(singular, plural, last, delim, empty, formatNumber, formatter) {
		setFormat({
			singular: singular,
			plural: plural,
			last: last,
			delim: delim,
			empty: empty,
			formatNumber: formatNumber,
			formatter: formatter
		});
	};

	/**
	 * Revert to the default unit labels.
	 * @public
	 * @deprecated since version 2.6.0
	 */
	countdown.resetLabels = resetFormat;

	resetFormat();

	if (module && module.exports) {
		module.exports = countdown;

	} else if (typeof window.define === 'function' && typeof window.define.amd !== 'undefined') {
		window.define('countdown', [], function() {
			return countdown;
		});
	}

	return countdown;

})(module);


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));

/***/ }),
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */
/***/ (function(module, exports) {

;/* Version f13718297ad3d9e6b80d6bc11e953001 v:4.2.6.1, c:c8c088bee6f12e7f0aaafbb5d077ef18f63aa268, b:5372 n:35-4.2.6.next-build */(function(){new function(){if(!window.ADRUM&&!0!==window["adrum-disable"]){var g=window.ADRUM={};window["adrum-start-time"]=window["adrum-start-time"]||(new Date).getTime();(function(a){(function(a){a.Zc=function(){for(var a=[],d=0;d<arguments.length;d++)a[d-0]=arguments[d];for(d=0;d<a.length;d++){var b=a[d];b&&b.setUp()}}})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){a=a.conf||(a.conf={});a.beaconUrlHttp="http://col.eum-appdynamics.com";a.beaconUrlHttps="https://col.eum-appdynamics.com";a.corsEndpointPath="/eumcollector/beacons/browser/v1";
a.imageEndpointPath="/eumcollector/adrum.gif?";a.appKey=window["adrum-app-key"]||"AD-AAB-AAC-SRG";var d="https:"===document.location.protocol;a.adrumExtUrl=(d?"https://cdn.appdynamics.com":"http://cdn.appdynamics.com")+"/adrum-ext.f13718297ad3d9e6b80d6bc11e953001.js";a.adrumXdUrl="https://cdn.appdynamics.com/adrum-xd.f13718297ad3d9e6b80d6bc11e953001.html";a.agentVer="4.2.6.1";a.sendImageBeacon="false";if(window["adrum-geo-resolver-url"]){var f=window["adrum-geo-resolver-url"],c=f.indexOf("://");-1!=
c&&(f=f.substring(c+3));f=(d?"https://":"http://")+f}else f=d?"":"";a.geoResolverUrl=f;a.useStrictDomainCookies=!0===window["adrum-use-strict-domain-cookies"];a.userConf=window["adrum-config"];a.$d=10})(g||(g={}));(function(a){(function(d){function f(a){return"undefined"!==typeof a&&null!==a}function c(a){return"[object Array]"===Object.prototype.toString.apply(a)}function b(a){return"object"==typeof a&&!c(a)&&null!==a}function e(a){return"string"==
typeof a}function h(a,p){for(var e in p){var d=p[e];if(p.hasOwnProperty(e)&&f(d)){var g=a[e];b(d)&&b(g)?h(g,d):a[e]=c(g)&&c(d)?g.concat(d):d}}return a}function p(a){return e(a)?a.replace(/^\s*/,"").replace(/\s*$/,""):a}d.isDefined=f;d.isArray=c;d.isObject=b;d.isFunction=function(a){return"function"==typeof a||!1};d.isString=e;d.isNumber=function(a){return"number"==typeof a};d.Ta=function(a){setTimeout(a,0)};d.addEventListener=function(h,b,p){function e(){try{return p.apply(this,Array.prototype.slice.call(arguments))}catch(d){a.exception(d,
"M1",b,h,d)}}a.isDebug&&a.log("M0",b,h);h.addEventListener?h.addEventListener(b,e,!1):h.attachEvent&&h.attachEvent("on"+b,e)};d.loadScriptAsync=function(h){var b=document.createElement("script");b.async=!0;b.src=h;var p=document.getElementsByTagName("script")[0];p?(p.parentNode.insertBefore(b,p),a.log("M2",h)):a.log("M3",h)};d.mergeJSON=h;d.od=function(a){var h=[];a&&(d.isObject(a)?h=[a]:d.isArray(a)&&(h=a));return h};d.generateGUID="undefined"!==typeof window.crypto&&"undefined"!==typeof window.crypto.getRandomValues?
function(){function a(h){for(h=h.toString(16);4>h.length;)h="0"+h;return h}var h=new Uint16Array(8);window.crypto.getRandomValues(h);return a(h[0])+a(h[1])+"_"+a(h[2])+"_"+a(h[3])+"_"+a(h[4])+"_"+a(h[5])+a(h[6])+a(h[7])}:function(){return"xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx".replace(/[xy]/g,function(a){var h=16*Math.random()|0;return("x"==a?h:h&3|8).toString(16)})};d.fd=function(a){return a?(a=a.stack)&&"string"===typeof a?a:null:null};d.trim=p;d.wg=function(a){var h={},b,e;if(!a)return h;var d=
a.split("\n");for(e=0;e<d.length;e++){var c=d[e];b=c.indexOf(":");a=p(c.substr(0,b)).toLowerCase();b=p(c.substr(b+1));a&&(h[a]=h[a]?h[a]+(", "+b):b)}return h};d.tryPeriodically=function(a,h,b,p){function e(){if(h())b&&b();else{var c=a(++d);0<c?setTimeout(e,c):p&&p()}}var d=0;e()};d.Qb=function(a){return a.charAt(0).toUpperCase()+a.slice(1)};d.Ic=function(a){for(var h=[],b=1;b<arguments.length;b++)h[b-1]=arguments[b];return function(){for(var b=[],p=0;p<arguments.length;p++)b[p-0]=arguments[p];return a.apply(this,
h.concat(b))}};d.now=Date&&Date.now||function(){return(new Date).getTime()}})(a.utils||(a.utils={}))})(g||(g={}));(function(a){function d(h,b,e,d){h=a.conf.beaconUrlHttps+"/eumcollector/error.gif?version=1&appKey="+e+"&msg="+encodeURIComponent(h.substring(0,500));d&&(h+="&stack=",h+=encodeURIComponent(d.substring(0,1500-h.length)));return h}function f(h,b){2<=e||(document.createElement("img").src=d(h,0,a.conf.appKey,b),e++)}function c(a){return 0<=a.location.search.indexOf("ADRUM_debug=true")||0<=
a.cookie.search(/(^|;)\s*ADRUM_debug=true/)}a.iDR=c;a.isDebug=c(document);var b=[];a.logMessages=b;a.log=function(h){for(var p=1;p<arguments.length;p++);a.isDebug&&b.push(Array.prototype.slice.call(arguments).join(" | "))};a.error=function(h){for(var b=1;b<arguments.length;b++);b=Array.prototype.slice.call(arguments).join(" | ");a.log(b);f(b,null)};a.exception=function(){for(var h=[],b=0;b<arguments.length;b++)h[b-0]=arguments[b];1>arguments.length||(h=Array.prototype.slice.call(arguments),b=a.utils.fd(h[0]),
h=h.slice(1).join(" | "),a.log(h),f(h,b))};a.assert=function(h,b){h||a.error("Assert fail: "+b)};a.dumpLog=a.isDebug?function(){for(var a="",e=0;e<b.length;e++)a+=b[e].replace(RegExp("<br/>","g"),"\n\t")+"\n";return a}:function(){};a.cIEBU=d;var e=0;a.log("M4")})(g||(g={}));(function(a){var d=function(){function a(b){this.max=b;this.za=0}a.prototype.Mf=function(){this.la()||this.za++};a.prototype.la=function(){return this.za>=this.max};a.prototype.reset=function(){this.za=0};return a}(),f=function(){function c(){this.ha=
[];this.Va=new d(c.oe);this.Ka=new d(c.ce)}c.prototype.submit=function(b){this.push(b)&&a.initEXTDone&&this.processQ()};c.prototype.processQ=function(){for(var b=this.ef(),e=0;e<b.length;e++){var h=b[e];"function"===typeof a.commands[h[0]]?(a.isDebug&&a.log("M5",h[0],h.slice(1).join(", ")),a.commands[h[0]].apply(a,h.slice(1))):a.error("M6",h[0])}};c.prototype.ag=function(a){return"reportXhr"===a||"reportPageError"===a};c.prototype.push=function(b){var e=b[0],h=this.ag(e),p=h?this.Va:this.Ka;if(p.la())return a.log("M7",
h?"spontaneous":"non spontaneous",e),!1;this.ha.push(b);p.Mf();return!0};c.prototype.ef=function(){var a=this.ha;this.reset();return a};c.prototype.size=function(){return this.ha.length};c.prototype.reset=function(){this.ha=[];this.Va.reset();this.Ka.reset()};c.prototype.isSpontaneousQueueDead=function(){return this.Va.la()};c.prototype.isNonSpontaneousQueueDead=function(){return this.Ka.la()};c.oe=100;c.ce=100;return c}();a.Cd=f})(g||(g={}));(function(a){a.q=new a.Cd;a.command=function(d){for(var f=
1;f<arguments.length;f++);a.isDebug&&a.log("M8",d,Array.prototype.slice.call(arguments).slice(1).join(", "));a.q.submit(Array.prototype.slice.call(arguments))}})(g||(g={}));(function(a){(function(a){var f=function(){function a(){this.status={}}a.prototype.setUp=function(){};a.prototype.set=function(a,e){this.status[a]=e};return a}();a.mb=f})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(d){window.ADRUM.aop=d;d.support=function(a){return!a||"apply"in a};d.around=function(f,c,b,e){a.assert(d.support(f),
"aop.around called on a function which does not support interception");f=f||function(){};return function(){a.isDebug&&a.log("M9",e,Array.prototype.slice.call(arguments).join(", "));var h=Array.prototype.slice.call(arguments),p;try{c&&(p=c.apply(this,h))}catch(d){a.exception(d,"M10",e,d)}a.assert(!p||"[object Array]"===Object.prototype.toString.call(p));var k=void 0;try{k=f.apply(this,p||h)}finally{try{b&&b.apply(this,h)}catch(g){a.exception(g,"M11",e,g)}}return k}};d.before=function(a,c){return d.around(a,
c)};d.after=function(a,c){return d.around(a,null,c)}})(a.aop||(a.aop={}))})(g||(g={}));(function(a){a=a.EventType||(a.EventType={});a[a.BASE_PAGE=0]="BASE_PAGE";a[a.IFRAME=1]="IFRAME";a[a.XHR=2]="XHR";a[a.VIRTUAL_PAGE=3]="VIRTUAL_PAGE";a[a.PAGE_ERROR=4]="PAGE_ERROR";a[a.ABSTRACT=100]="ABSTRACT";a[a.ADRUM_XHR=101]="ADRUM_XHR";a[a.NG_VIRTUAL_PAGE=102]="NG_VIRTUAL_PAGE"})(g||(g={}));(function(a){a=a.events||(a.events={});a.l={};a.l[100]={guid:"string",url:"string",parentGUID:"string",parentUrl:"string",
parentType:"number",timestamp:"number"};a.l[3]={resTiming:"object"};a.l[102]={digestCount:"number"};a.l[2]={method:"string",parentPhase:"string",parentPhaseId:"number",error:"object"};a.l[101]={xhr:"object"};a.l[4]={msg:"string",line:"number",stack:"string"}})(g||(g={}));(function(a){var d=function(){function a(){this.w={}}a.prototype.mark=function(a,e){f.mark.apply(this,arguments)};a.prototype.getTiming=function(a){return(a=this.getEntryByName(a))&&a.startTime};a.prototype.measure=function(a,e,h){f.measure.apply(this,
arguments)};a.prototype.getEntryByName=function(a){return f.getEntryByName.call(this,a)};a.ia=function(a){return f.ia(a)};return a}();a.PerformanceTracker=d;var f;(function(d){d.mark;d.measure;d.getEntryByName;d.ia;var b=window.performance||window.mozPerformance||window.msPerformance||window.webkitPerformance,e=b&&b.timing&&b.timing.navigationStart?b.timing.navigationStart:window["adrum-start-time"],h=a.utils.now;d.mark=function(b,e){this.w[b]={name:b,entryType:"mark",startTime:a.utils.isDefined(e)?
e:h(),duration:0}};d.measure=function(b,d,c){this.w.hasOwnProperty(d)&&this.w.hasOwnProperty(c)?this.w[b]={name:b,entryType:"measure",startTime:d?this.w[d].startTime:e,duration:(c?this.w[c].startTime:h())-(d?this.w[d].startTime:e)}:a.error("M12"+(this.w.hasOwnProperty(d)?c:d)+" does not exist. ")};d.getEntryByName=function(a){return this.w[a]||null};d.ia=function(a){return a+e}})(f||(f={}))})(g||(g={}));(function(a){(function(d){function f(b,h){b=b||{};for(var d in b)h[d]=function(){var h=d,c=b[d];
return function(b){var e="_"+h,d=this[e];if(a.utils.isDefined(b))if(typeof b===c)this[e]=b;else throw TypeError("wrong type of "+h+" value, "+typeof b+" passed in but should be a "+c+".");return d}}()}function c(a){var h={},b;for(b in a){var d=a[b];h[d.start]=!0;h[d.end]=!0}return h}var b=function(){function b(h){this.perf=new a.PerformanceTracker;this.timestamp(a.utils.now());this.guid(a.utils.generateGUID());this.url(document.URL);this.Yc(h)}b.prototype.type=function(){return 100};b.prototype.Yc=
function(b){if(a.utils.isObject(b))for(var d in b){var e=this[d]||this["mark"+a.utils.Qb(d)];e&&a.utils.isFunction(e)&&e.call(this,b[d])}};b.Mb=function(a,b,d){return{guid:function(){return a},url:function(){return b},type:function(){return d}}};b.prototype.Cf=function(){return b.Mb(this.parentGUID(),this.parentUrl(),this.parentType())};b.prototype.parent=function(b){var d=this.Cf();a.utils.isDefined(b)&&(this.parentGUID(b.guid()),this.parentUrl(b.url()),this.parentType(b.type()));return d};return b}();
d.EventTracker=b;d.W=f;d.Nb=function(b,h){b=b||{};var d=c(b),l;for(l in d)d=a.utils.Qb(l),h["mark"+d]=a.utils.Ic(function(a,b){this.perf.mark(a,b)},l),h["get"+d]=a.utils.Ic(function(a){return this.perf.getTiming(a)},l)};f(d.l[100],b.prototype)})(a.events||(a.events={}))})(g||(g={}));var s=this.He||function(a,d){function f(){this.constructor=a}for(var c in d)d.hasOwnProperty(c)&&(a[c]=d[c]);f.prototype=d.prototype;a.prototype=new f};(function(a){(function(a){var f=function(a){function b(b){a.call(this,
b)}s(b,a);b.prototype.type=function(){return 4};return b}(a.EventTracker);a.Error=f;a.W(a.l[4],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(d){var f=function(d){function b(){d.apply(this,arguments)}s(b,d);b.prototype.setUp=function(){d.prototype.setUp.call(this);a.listenForErrors=this.Ac;this.Ac()};b.prototype.Ac=function(){if(a.aop.support(window.onerror)){var d=this;window.onerror=a.aop.around(window.onerror,function(h,p,c,f,g){b.Ia||(b.errorsSent>=a.conf.$d?a.log("M13"):
(f=a.utils.fd(g),a.command("reportPageError",new a.events.Error(a.utils.mergeJSON({msg:h,url:p,line:c,stack:f},d.status))),b.errorsSent++,b.Ia=!0))},function(){b.Ia=!1},"onerror");a.log("M14")}else a.log("M15")};b.Ia=!1;b.errorsSent=0;return b}(d.mb);d.ErrorMonitor=f;d.Zb=new d.ErrorMonitor})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){var d=function(){function d(){this.ta=[];this.oa(d.wa,0)}d.prototype.og=function(a){this.oa(d.Gb,a)};d.prototype.qg=function(a){this.oa(d.Ob,a)};d.prototype.pg=
function(a){this.oa(d.Ib,a)};d.prototype.oa=function(a,b){this.ta.push({mg:(new Date).getTime(),lg:b,Jc:a});this.af=a};d.prototype.getPhaseName=function(){return this.af};d.prototype.getPhaseID=function(a){for(var b=0;b<d.Lb.length;b++)if(d.Lb[b]===a)return b;return null};d.prototype.getPhaseCallbackTime=function(a){for(var b=this.ta,d=0;d<b.length;d++)if(b[d].Jc===a)return b[d].mg;return null};d.prototype.findPhaseAtNominalTime=function(c){a.assert(0<=c);for(var b=this.ta,e=b.length-1;0<=e;e--)if(c>=
b[e].lg)return b[e].Jc;a.error("M16",c,a.utils.ff(b));return d.wa};d.wa="AFTER_FIRST_BYTE";d.Gb="AFTER_DOM_INTERACTIVE";d.Ob="AT_ONLOAD";d.Ib="AFTER_ONLOAD";d.Lb=[d.wa,d.Gb,d.Ob,d.Ib];return d}();a.oh=d;a.lifecycle=new d;a.lifecycle=a.lifecycle})(g||(g={}));(function(a){(function(a){var f=function(a){function b(){a.apply(this,arguments)}s(b,a);b.prototype.type=function(){return 0};return b}(a.EventTracker);a.PageView=f})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(d){var f=function(){function c(){}
c.prototype.setUp=function(){c.Kg();c.Jg()};c.Jg=function(){a.utils.addEventListener(window,"load",c.pa);a.utils.addEventListener(window,"load",c.tg)};c.tg=function(b){a.lifecycle.qg(b&&b.timeStamp);a.utils.Ta(function(){var b=(new Date).getTime();a.lifecycle.pg(b);a.command("mark","onload",b);d.yb.perf&&(d.perfMonitor.Xe(),d.perfMonitor.Ye());a.command("reportOnload",new a.events.PageView);a.utils.loadScriptAsync(a.conf.adrumExtUrl)});a.log("M17")};c.Kg=function(){if(document.addEventListener)document.addEventListener("DOMContentLoaded",
c.ca,!1);else{document.attachEvent("onreadystatechange",c.ca);var b=null;try{b=null===window.frameElement?document.documentElement:null}catch(d){}null!=b&&b.doScroll&&function p(){if(!c.isReady){try{b.doScroll("left")}catch(a){setTimeout(p,10);return}c.pa()}}()}a.log("M18")};c.pa=function(b){c.Dc||(a.lifecycle.og(b&&b.timeStamp),a.command("mark","onready",(new Date).getTime()),c.Dc=!0)};c.ca=function(a){document.addEventListener?(document.removeEventListener("DOMContentLoaded",c.ca,!1),c.pa(a)):"complete"===
document.readyState&&(document.detachEvent("onreadystatechange",c.ca),c.pa(a))};c.isReady=!1;c.Dc=!1;return c}();d.Ed=f;d.df=new d.Ed})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(d){var f=function(){function d(){this.navTiming=this.resTiming=null}d.prototype.setUp=function(){d.perf=window.performance||window.mozPerformance||window.msPerformance||window.webkitPerformance};d.prototype.Xe=function(){var b=d.perf;if(b=b&&b.timing)if(b.navigationStart&&b.navigationStart<=b.loadEventEnd){var e=
{},h;for(h in b){var p=b[h];"number"===typeof p&&(e[h]=p)}this.navTiming=e}else a.log("M20");else a.log("M19")};d.prototype.Ye=function(){this.resTiming=this.hc()};d.prototype.hc=function(){var b=d.perf,e=[];b&&b.getEntriesByType&&(b=b.getEntriesByType("resource"))&&b.length&&0<b.length&&b.unshift&&(e=b);0==e.length&&a.log("M21");return e};d.perf=null;return d}();d.yb=f;d.perfMonitor=new d.yb})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){a=a.events||(a.events={});a=a.b||(a.b={});a.navigationStart=
"navigationStart";a.domainLookupStart="domainLookupStart";a.domainLookupEnd="domainLookupEnd";a.connectStart="connectStart";a.secureConnectionStart="secureConnectionStart";a.connectEnd="connectEnd";a.requestStart="requestStart";a.responseStart="responseStart";a.responseEnd="responseEnd";a.domContentLoadedEventStart="domContentLoadedEventStart";a.loadEventEnd="loadEventEnd";a.Wc="sendTime";a.ac="firstByteTime";a.Sc="respAvailTime";a.Tc="respProcTime";a.cb="viewChangeStart";a.kd="viewChangeEnd";a.eb=
"viewDOMLoaded";a.qd="xhrRequestsCompleted";a.Vh="viewFragmentsLoaded";a.Wh="viewResourcesLoaded";a.fb="virtualPageStart";a.dh="virtualPageEnd"})(g||(g={}));(function(a){a=a.events||(a.events={});a.B={};a.B[0]={lf:{start:a.b.navigationStart,end:a.b.loadEventEnd,name:"PLT"},qf:{start:a.b.navigationStart,end:a.b.responseStart,name:"FBT"},Rh:{start:a.b.navigationStart,end:a.b.requestStart,name:"SCT"},Sh:{start:a.b.secureConnectionStart,end:a.b.connectEnd,name:"SHT"},yh:{start:a.b.domainLookupStart,end:a.b.domainLookupEnd,
name:"DLT"},Uh:{start:a.b.connectStart,end:a.b.connectEnd,name:"TCP"},Ph:{start:a.b.requestStart,end:a.b.responseStart,name:"RAT"},Ah:{start:a.b.responseStart,end:a.b.loadEventEnd,name:"FET"},Ch:{start:a.b.responseStart,end:a.b.domContentLoadedEventStart,name:"DRT"},sh:{start:a.b.responseStart,end:a.b.responseEnd,name:"DDT"},wh:{start:a.b.responseEnd,end:a.b.domContentLoadedEventStart,name:"DPT"},Oh:{start:a.b.domContentLoadedEventStart,end:a.b.loadEventEnd,name:"PRT"},xh:{start:a.b.navigationStart,
end:a.b.domContentLoadedEventStart,name:"DOM"}};a.B[2]={qf:{start:a.b.Wc,end:a.b.ac,name:"FBT"},Bh:{start:a.b.ac,end:a.b.Sc,name:"DDT"},rh:{start:a.b.Sc,end:a.b.Tc,name:"DPT"},lf:{start:a.b.Wc,end:a.b.Tc,name:"PLT"}};a.B[3]={Ih:{start:a.b.fb,end:a.b.dh,name:"PLT"},uh:{start:a.b.cb,end:a.b.kd,name:"DDT"},Fh:{start:a.b.cb,end:a.b.eb,name:"DRT"},jh:{start:a.b.kd,end:a.b.eb,name:"DPT"},kh:{start:a.b.cb,end:a.b.eb,name:"DOM"},Nh:{start:"viewChangeEnd",end:"xhrRequestsCompleted",name:null},Gh:{start:"viewChangeEnd",
end:"viewPartialsLoaded",name:null},Eh:{start:"viewPartialsLoaded",end:"viewFragmentsLoaded",name:null},Hh:{start:"viewPartialsLoaded",end:"viewResourcesLoaded",name:null}};a.B[102]=a.B[3]})(g||(g={}));(function(a){(function(a){var f=function(a){function b(b){a.call(this,b)}s(b,a);b.prototype.type=function(){return 2};return b}(a.EventTracker);a.Ajax=f;a.W(a.l[2],f.prototype);a.Nb(a.B[2],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(a){var f=function(a){function b(b){a.call(this,
b)}s(b,a);b.prototype.type=function(){return 2};return b}(a.Ajax);a.AdrumAjax=f;a.W(a.l[101],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(d){var f=function(d){function b(){d.call(this);this.conf=null;this.Wa=!1;!0===window["adrum-xhr-disable"]?a.log("M22"):window.XMLHttpRequest?(this.conf={exclude:[{urls:[{pattern:a.conf.beaconUrlHttp+a.conf.corsEndpointPath},{pattern:a.conf.beaconUrlHttps+a.conf.corsEndpointPath}]}],include:[]},b.Mc(this.conf,a.conf.userConf&&a.conf.userConf.xhr),
(this.d=window.XMLHttpRequest.prototype)?"open"in this.d&&"send"in this.d?(this.Wa=a.aop.support(this.d.open)&&a.aop.support(this.d.send))||a.log("M26"):a.log("M25"):a.log("M24")):a.log("M23")}s(b,d);b.Mc=function(d,h){h&&(h.include=a.utils.od(h.include),h.exclude=a.utils.od(h.exclude),a.utils.mergeJSON(d,h));var p=d.exclude;if(p)for(var c=0;c<p.length;c++){var k=p[c].urls;k&&0<k.length&&(p[c].urls=b.Ub(k))}if(p=d.include)for(c=0;c<p.length;c++)(k=p[c].urls)&&0<k.length&&(p[c].urls=b.Ub(k))};b.Ub=
function(b){for(var h=[],d=0;d<b.length;d++){var c=b[d].pattern;if("string"===typeof c)try{h.push(new RegExp(c))}catch(k){a.exception(k,"Parse regex pattern failed.")}else a.error("xhr filter pattern should be a string")}return h};b.$c=function(a,h,d){var c=d&&d.include;d=d&&d.exclude;return c&&0<c.length&&!b.xc(h,a,c)||d&&0<d.length&&b.xc(h,a,d)};b.prototype.setUp=function(){if(this.Wa){a.log("M27");a.xhrConstructor=window.XMLHttpRequest;a.xhrOpen=this.xhrOpen=this.d.open;a.xhrSend=this.xhrSend=
this.d.send;var d=this;this.d.open=a.aop.around(this.d.open,function(){var h=1<=arguments.length?String(arguments[0]):"",p=2<=arguments.length?String(arguments[1]):"";b.$c(p,h,d.conf)||(this._adrumAjaxT=new a.events.AdrumAjax(a.utils.mergeJSON({method:h,url:p,xhr:this},d.status)))},null,"XHR.open");this.d.send=a.aop.around(this.d.send,function(){var h=this,p=h._adrumAjaxT;if(p){var c=a.utils.now(),k=p.getSendTime();a.assert(null===k,"M28");p.timestamp(c);p.markSendTime(k||c);p.parentPhase(a.lifecycle.getPhaseName());
b.Zf(p.url())?h.setRequestHeader("ADRUM","isAjax:true"):a.log("M29",document.location.href,p.url());var f=0,g=function(){if(4==h.readyState)a.log("M30"),d.ua(h);else{var p=null;try{p=h.onreadystatechange}catch(c){a.log("M31",c);d.ua(h);return}f++;p?a.aop.support(p)?(h.onreadystatechange=d.Vb(p,h,"XHR.onReadyStateChange"),a.log("M32",f)):(a.log("M33"),d.ua(h)):f<b.Fe?a.utils.Ta(g):(a.log("M34"),d.ua(h))}};g()}},null,"XHR.send");"addEventListener"in this.d&&"removeEventListener"in this.d&&a.aop.support(this.d.addEventListener)&&
a.aop.support(this.d.removeEventListener)?(this.d.addEventListener=a.aop.around(this.d.addEventListener,this.$e(),null,"XHR.addEventListener"),this.d.removeEventListener=a.aop.around(this.d.removeEventListener,function(b,d){if(this._adrumAjaxT){var e=Array.prototype.slice.call(arguments);d.__adrumInterceptor?(e[1]=d.__adrumInterceptor,a.log("M35")):a.log("M36");return e}},null,"XHR.removeEventListener")):a.log("M37");a.log("M38")}};b.jg=function(a,b){for(var d=!1,c=0;c<b.length;c++){var k=b[c];if(k&&
k.test(a)){d=!0;break}}return d};b.xc=function(a,d,p){var c=!1;if(d&&p)for(var k=0;k<p.length;k++){var f=p[k];if(!(f.method&&a!==f.method||f.urls&&!b.jg(d,f.urls))){c=!0;break}}return c};b.Zf=function(a){var b=document.createElement("a");b.href=a;a=document.location;return":"===b.protocol&&""===b.hostname&&""===b.port||b.protocol===a.protocol&&b.hostname===a.hostname&&b.port===a.port};b.nc=function(b){var d=b._adrumAjaxT;if(d){var p=(new Date).getTime();2==b.readyState?d.markFirstByteTime(d.getFirstByteTime()||
p):4==b.readyState&&(a.assert(null===d.getRespAvailTime(),"M39"),d.markRespAvailTime(d.getRespAvailTime()||p),d.markFirstByteTime(d.getFirstByteTime()||p))}};b.prototype.Vb=function(d,h,p){return b.hh(d,function(){b.nc(this)},function(){var d=h._adrumAjaxT;if(d&&4==h.readyState){var e=(new Date).getTime();a.assert(null===d.getRespProcTime(),"M40");d.markRespProcTime(d.getRespProcTime()||e);b.a(h,d)}},p)};b.a=function(b,d){var p=b.status;if(400<=p){var c=b.responseText;d.error({status:p,msg:a.utils.isString(c)?
c:""})}a.command("reportXhr",d)};b.prototype.ua=function(d){if(d._adrumAjaxT){var h=(new Date).getTime()+3E4,p=function(){b.nc(d);var c=d._adrumAjaxT;if(c){var f=(new Date).getTime();4==d.readyState?(a.assert(null===c.getRespProcTime(),"M41"),c.markRespProcTime(c.markRespProcTime()||f),a.log("M42"),b.a(d,c),delete d._adrumAjaxT):f<h?setTimeout(p,b.lb):(delete d._adrumAjaxT,a.log("M43"))}};p()}};b.hh=function(b,d,p,c){var f=b;b&&"object"===typeof b&&"toString"in b&&"[xpconnect wrapped nsIDOMEventListener]"===
b.toString()&&"handleEvent"in b&&(f=function(){b.handleEvent.apply(this,Array.prototype.slice.call(arguments))});return a.aop.around(f,d,p,c)};b.prototype.$e=function(){for(var b=0;b<arguments.length;b++);var d=this;return function(b,e){if(("load"===b||"error"===b)&&e&&this._adrumAjaxT){var c;c=e;if(c.__adrumInterceptor)c=c.__adrumInterceptor;else if(a.aop.support(c)){var f=d.Vb(c,this,"XHR.invokeEventListener");c=c.__adrumInterceptor=f}else c=null;if(c)return f=Array.prototype.slice.call(arguments),
f[1]=c,a.log("M44"),f;a.log("M45",b,e)}}};b.Fe=5;b.lb=50;return b}(d.mb);d.fa=f;d.hb=new d.fa})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(d){function f(a,b){var d=[],c=/^\s*(ADRUM_BT\w*)=(.*)\s*$/i.exec(a);if(c){var f=c[1],c=c[2].replace(/^"|"$/g,""),c=decodeURIComponent(c).split("|"),g=c[0].split(":");if("R"===g[0]&&Number(g[1])===b)for(e(f),f=1;f<c.length;f++)d.push(c[f])}return d}function c(a,b){var d=/^\s*(ADRUM_(\d+)_(\d+)_(\d+))=(.*)\s*$/i.exec(a);if(d){var c=d[1],f=d[4],
g=d[5];if(Number(d[3])===b)return e(c),{index:Number(f),value:g}}return null}function b(b){var d=/^\s*ADRUM=s=([\d]+)&r=(.*)\s*/.exec(b);if(d){a.log("M48",b);if(3===d.length)return e("ADRUM"),{startTime:Number(d[1]),startPage:d[2]};a.error("M49",b);return null}}function e(b){a.log("M47",b);var d=new Date;d.setTime(d.getTime()-1E3);document.cookie=b+"=;Expires="+d.toUTCString()}d.startTimeCookie=null;d.cookieMetadataChunks=null;d.Xb=function(h,e){a.log("M46");for(var g=e?e.length:0,k=[],q=h.split(";"),
m=0;m<q.length;m++){var n=q[m],s=c(n,g);s?k.push(s):(n=b(n),null!=n&&(d.startTimeCookie=n))}Array.prototype.sort.call(k,function(a,b){return a.index-b.index});n=[];for(m=0;m<k.length;m++)n.push(k[m].value);for(m=0;m<q.length;m++)(k=f(q[m],g))&&0<k.length&&(n=n.concat(k));d.cookieMetadataChunks=n};a.correlation.eck=d.Xb})(a.correlation||(a.correlation={}))})(g||(g={}));(function(a){a.report=function(d){a.utils.Ta(function(){a.command("reportEvent",d)})}})(g||(g={}));(function(a){"APP_KEY_NOT_SET"===
a.conf.appKey&&"undefined"!==typeof console&&"undefined"!==typeof console.log&&console.log("AppDynamics EUM cloud application key missing. Please specify window['adrum-app-key']");a.correlation.Xb(document.cookie,document.referrer);a.command("mark","firstbyte",window["adrum-start-time"]);a.monitor.Zc(a.monitor.Zb,a.monitor.df,a.monitor.perfMonitor,a.monitor.hb)})(g||(g={}));(function(a){a=a.ng||(a.ng={});a=a.c||(a.c={});a.Bc="locationChangeStart";a.gg="locationChangeSuccess";a.Uc="routeChangeStart";
a.Vc="routeChangeSuccess";a.bd="stateChangeStart";a.cd="stateChangeSuccess";a.ld="viewContentLoaded";a.Jf="includeContentRequested";a.If="includeContentLoaded";a.Wb="digest";a.Kh="outstandingRequestsComplete";a.Pb="beforeNgXhrRequested";a.Hb="afterNgXhrRequested";a.Jh="ngXhrLoaded";a.Sb="$$completeOutstandingRequest"})(g||(g={}));(function(a){(function(a){function f(b,c,h,p,f,g){if(c)try{return c.apply(b,[h,p,f].concat(g))}catch(q){return b.error(h,p,f,g,a.Error.Md,"an exception occurred in a caller-provided callback function",
q)}}function c(b,c){return function(){var h=this.current,p=c[h]||c[a.ea]||h,g=Array.prototype.slice.call(arguments);if(this.Ve(b))return this.error(b,h,p,g,a.Error.Nd,"event "+b+" inappropriate in current state "+this.current);if(!1===f(this,this["onbefore"+b],b,h,p,g))return a.da.ib;p===a.ea&&(p=h);if(h===p)return f(this,this["onafter"+b]||this["on"+b],b,h,p,g),a.da.qe;var k=this;this.transition=function(){k.transition=null;k.current=p;f(k,k["onenter"+p]||k["on"+p],b,h,p,g);f(k,k["onafter"+b]||k["on"+
b],b,h,p,g);return a.da.ye};if(!1===f(this,this["onleave"+h],b,h,p,g))return this.transition=null,a.da.ib;if(this.transition)return this.transition()}}a.VERSION="2.3.5";a.da={ye:1,qe:2,ib:3,mh:4};a.Error={Nd:100,nh:200,Md:300};a.ea="*";a.create=function(b,e){function h(b){var h=b.from instanceof Array?b.from:b.from?[b.from]:[a.ea];m[b.name]=m[b.name]||{};for(var c=0;c<h.length;c++)n[h[c]]=n[h[c]]||[],n[h[c]].push(b.name),m[b.name][h[c]]=b.to||h[c]}var p="string"==typeof b.initial?{state:b.initial}:
b.initial,f=e||b.target||{},g=b.events||[],q=b.callbacks||{},m={},n={};p&&(p.event=p.event||"startup",h({name:p.event,from:"none",to:p.state}));for(var s=0;s<g.length;s++)h(g[s]);for(var u in m)m.hasOwnProperty(u)&&(f[u]=c(u,m[u]));for(u in q)q.hasOwnProperty(u)&&(f[u]=q[u]);f.current="none";f.Dh=function(a){return a instanceof Array?0<=a.indexOf(this.current):this.current===a};f.Ue=function(b){return!this.transition&&(m[b].hasOwnProperty(this.current)||m[b].hasOwnProperty(a.ea))};f.Ve=function(a){return!this.Ue(a)};
f.ta=function(){return n[this.current]};f.error=b.error||function(a,b,d,h,c,e,p){throw p||e;};if(p&&!p.defer)f[p.event]();return f}})(a.Bb||(a.Bb={}))})(g||(g={}));(function(a){(function(d){var f=function(c){function b(b){c.call(this,b);this.perf=new a.PerformanceTracker;this.start()}s(b,c);b.prototype.type=function(){return 3};b.prototype.yf=function(){return d.EventTracker.Mb(this.guid(),this.url(),this.type())};b.prototype.ad=function(b){var d=this.yf();b.set("parent",d);a.log("M50",d.guid(),d.url())};
b.prototype.startCorrelatingXhrs=function(){a.log("M51");this.ad(a.monitor.hb)};b.prototype.stopCorrelatingXhrs=function(){a.monitor.hb.set("parent",null);a.log("M52")};b.prototype.Ng=function(){a.log("M53");this.ad(a.monitor.Zb)};b.prototype.start=function(){this.markVirtualPageStart();this.startCorrelatingXhrs()};b.prototype.end=function(){this.markVirtualPageEnd();this.stopCorrelatingXhrs()};return b}(d.EventTracker);d.VPageView=f;d.W(d.l[3],f.prototype);d.Nb(d.B[3],f.prototype)})(a.events||(a.events=
{}))})(g||(g={}));(function(a){var d=a.ng||(a.ng={}),d=d.conf||(d.conf={});d.disabled=a.conf.userConf&&a.conf.userConf.spa&&a.conf.userConf.spa.angular&&a.conf.userConf.spa.angular.disable;d.distinguishVPwithItsTemplateUrl=a.conf.userConf&&a.conf.userConf.spa&&a.conf.userConf.spa.angular&&!0===a.conf.userConf.spa.angular.distinguishVPwithItsTemplateUrl?!0:!1;d.xhr={};d.metrics={includeResTimingInEndUserResponseTiming:!0};a.conf.userConf&&a.conf.userConf.spa&&a.conf.userConf.spa.angular&&a.conf.userConf.spa.angular.vp&&
(a.conf.userConf.spa.angular.vp.xhr&&a.monitor.fa.Mc(d.xhr,a.conf.userConf.spa.angular.vp.xhr),a.conf.userConf.spa.angular.vp.metrics&&a.utils.mergeJSON(d.metrics,a.conf.userConf.spa.angular.vp.metrics))})(g||(g={}));(function(a){(function(d){var f=function(c){function b(a){c.call(this,a);this.vc=!0;this.Y={};this.U=0;this.stopCorrelatingXhrs()}s(b,c);b.prototype.type=function(){return 3};b.prototype.fb=function(){this.markViewChangeStart();this.markVirtualPageStart(this.getViewChangeStart());this.timestamp(this.getViewChangeStart())};
b.prototype.Kf=function(){this.digestCount(this.digestCount()+1)};b.prototype.Lf=function(){this.U++;a.log("increasing xhr count "+this.U+" pending xhr requests")};b.prototype.bf=function(){this.U--;a.log("decreasing xhr count "+this.U+" pending xhr requests")};b.prototype.Ff=function(){var b=this.perf.getEntryByName(a.events.b.qd);a.log("xhrCount "+this.U+" xhrReuqestCompleted "+b);return 0<this.U};b.prototype.Re=function(){var a={sa:0},d=document.querySelectorAll("ng-view, [ng-view], .ng-view, [ui-view]");
if(d&&0<d.length)for(var c in b.Rc)for(var f=0;f<d.length;f++){var g=angular.element(d[f]).find(c);if(0<g.length)for(var q=0;q<g.length;q++){var m=g[q][b.Rc[c].Ya];(m=m?decodeURIComponent(m):null)&&!a[m]&&(a[m]=c,a.sa++)}}this.Y=a};b.prototype.Qe=function(a){return!!this.Y[decodeURIComponent(a.name)]};b.prototype.Se=function(){var b=[],d=this;0<this.Y.sa&&(b=a.monitor.perfMonitor.hc().filter(function(a){return d.Qe(a)}));this.resTiming(b)};b.nf=function(b){for(var h=[],c=0;c<b.length;c++){var f=b[c];
2!==b[c].eventType&&101!==b[c].eventType||a.monitor.fa.$c(f.eventUrl,f.method,d.conf.xhr)||h.push(b[c])}return h};b.zf=function(a){var b,d,c=-1;b=0;for(d=a.length;b<d;b++)c=Math.max(c,a[b].timestamp+a[b].metrics.PLT);return c};b.prototype.Le=function(){if(d.conf.xhr){var c=b.nf(a.channel.getEventsWithParentGUID(this.guid())),c=b.zf(c);if(0<c){var h=this.perf.getEntryByName(a.events.b.qd);this.markXhrRequestsCompleted(Math.min(h&&h.startTime||Number.MAX_VALUE,c))}}};b.prototype.adjustTimings=function(){this.Le();
var b=this.getViewDOMLoaded(),h=this.getXhrRequestsCompleted(),b=Math.max(b,h);d.conf.metrics.includeResTimingInEndUserResponseTiming&&(this.Ke(),h=this.getViewResourcesLoaded(),h=Math.max(b,h),a.log("adjust this.end from %s to %s",b,h),b=h);this.markVirtualPageEnd(b)};b.prototype.Ke=function(){if(0<this.Y.sa){this.Se();var b=this.resTiming();if(b&&b.length>=this.Y.sa){for(var d=[],c=0;c<b.length;c++)d.push(b[c].responseEnd);b=Math.max.apply(Math,d);this.markViewResourcesLoaded(a.PerformanceTracker.ia(b))}}};
b.prototype.identifier=function(d){var h=this.nd;a.utils.isDefined(d)&&(this.nd=b.mf(d),this.url(this.nd.url));return h};b.mf=function(b){var d={};b&&b.g?(d.g={Ma:""},a.utils.mergeJSON(d.g,{Ma:b.g.originalPath,Z:b.g.template,$:b.g.templateUrl})):b&&b.state&&(d.state={url:""},a.utils.mergeJSON(d.state,{url:b.state.url,name:b.state.name,Z:b.state.template,$:b.state.templateUrl}));return d};b.Rc={img:{Ya:"src"},script:{Ya:"src"},link:{Ya:"href"}};return b}(a.events.VPageView);d.NgVPageView=f;a.events.W(a.events.l[102],
f.prototype)})(a.ng||(a.ng={}))})(g||(g={}));(function(a){(function(d){var f=function(){function c(){this.e=new d.NgVPageView}c.prototype.Dg=function(){var b=this;d.conf.metrics.includeResTimingInEndUserResponseTiming?(a.log("M54"),setTimeout(function(){b.Pa()},c.Ae)):setTimeout(function(){b.Pa()},c.Be)};c.prototype.Pa=function(){a.log("M55");var b=this.e;a.command("call",function(){b.adjustTimings();a.reporter.reportEvent(b)})};c.prototype.Ig=function(a){this.e=a};c.Ae=5E3;c.Be=2*a.monitor.fa.lb;
return c}();d.VirtualPageStateMachine=f;a.Bb.create({events:[{name:"start",from:"none",to:"ChangeView"},{name:"viewLoaded",from:"ChangeView",to:"XhrPending"},{name:"xhrCompleted",from:"XhrPending",to:"End"},{name:"abort",from:"*",to:"none"},{name:"init",from:"*",to:"none"},{name:"locChange",from:"*",to:"*"},{name:"beforeXhrReq",from:"*",to:"*"},{name:"afterXhrReq",from:"*",to:"*"}],error:function(d){a.log("M56"+d)},callbacks:{onChangeView:function(){this.e.fb();this.e.Ng()},onviewLoaded:function(){this.e.markViewDOMLoaded()},
onXhrPending:function(){this.e.vc&&this.xhrCompleted()},onleaveXhrPending:function(a,b,d){if("abort"===a)return this.Pa(),!0;if("xhrCompleted"===a&&"End"===d){if(this.e.Ff())return!1;this.e.markXhrRequestsCompleted();return!0}},onEnd:function(){this.e.Re();this.Dg()},oninit:function(a,b,d,h){this.Ig(h)},onlocChange:function(a,b,d,h){this.e.identifier.url=h},onbeforeXhrReq:function(d,b,f,h){var p=this.e;p.vc=!1;a.log("M57",h&&h[1]||"",p.guid());p.Lf();p.startCorrelatingXhrs();h[3]&&(h[3]=a.aop.before(h[3],
function(b,d,h){a.log("M58");p.bf();h&&(b=a.utils.wg(h)["content-type"])&&0<=b.indexOf("text/html")&&p.markViewFragmentsLoaded()}));return h},onafterXhrReq:function(){this.e.stopCorrelatingXhrs()}}},f.prototype)})(a.ng||(a.ng={}))})(g||(g={}));(function(a){(function(d){var f=function(){function c(){this.k=new d.VirtualPageStateMachine;this.distinguishVPwithItsTemplateUrl=a.ng.conf.distinguishVPwithItsTemplateUrl}c.prototype.h=function(b,f){a.log("M59",b);switch(b){case d.c.Uc:case d.c.bd:this.k.start();
var h=new d.NgVPageView({url:f.next.url,identifier:f.next});this.distinguishVPwithItsTemplateUrl&&c.Tf(this.k.e,h)?this.k.e.Yc({url:f.next.url,identifier:f.next}):this.Sg(h);break;case d.c.Vc:case d.c.cd:this.k.e.markViewChangeEnd();break;case d.c.ld:this.k.viewLoaded();break;case d.c.Pb:this.k.beforeXhrReq(f);break;case d.c.Hb:this.k.afterXhrReq();break;case d.c.Sb:this.k.xhrCompleted();break;case d.c.Bc:this.k.locChange(f.next.url);break;case d.c.Wb:this.k.e.Kf()}};c.prototype.Sg=function(a){this.k.abort();
this.k.init(a);this.k.start()};c.Tf=function(b,d){var h=b.identifier(),c=d.identifier(),f=!1;return f=!a.utils.isDefined(h)&&!a.utils.isDefined(c)||h===c?!0:a.utils.isDefined(h)&&a.utils.isDefined(c)?h.state||c.state?a.utils.isDefined(h.state)&&a.utils.isDefined(c.state)?h.state.name===c.state.name&&h.state.Z===c.state.Z&&h.state.$===c.state.$&&h.state.url===c.state.url:!1:h.g&&c.g?h.g.Ma===c.g.Ma&&h.g.Z===c.g.Z&&h.g.$===c.g.$:h.url===c.url:!1};return c}();d.De=f})(a.ng||(a.ng={}))})(g||(g={}));(function(a){(function(d){var f=
function(){function c(){this.j=new d.De}c.prototype.setUp=function(){var b=this;a.utils.addEventListener(document,"DOMContentLoaded",function(){a.log("M60");b.init()})};c.prototype.init=function(){if("undefined"!=typeof angular){a.log("M61");var b=this,d=angular.module("ng");d.config(["$provide",function(a){b.Qf(a);b.Pf(a)}]);d.run(["$browser",function(a){b.Of(a)}]);a.log("M62")}};c.prototype.Pf=function(b){var c=a.aop,h=this;b.decorator("$httpBackend",["$delegate",function(a){return a=c.around(a,
function(){var a=Array.prototype.slice.call(arguments);h.j.h(d.c.Pb,a);return a},function(){h.j.h(d.c.Hb)})}])};c.prototype.Qf=function(b){var c=a.aop,h=this;b.decorator("$rootScope",["$delegate",function(a){a.$digest=c.after(a.$digest,function(){h.j.h(d.c.Wb)});a.$on("$locationChangeStart",function(a,b){var c={url:b},f=a&&a.X&&a.X.$state&&a.X.$state.current;f&&(c.state=f);h.j.h(d.c.Bc,{next:c})});a.$on("$locationChangeSuccess",function(){h.j.h(d.c.gg)});a.$on("$routeChangeStart",function(a,b){var c=
{url:location.href},f=b&&b.$$route;f&&(c.g=f);h.j.h(d.c.Uc,{next:c})});a.$on("$routeChangeSuccess",function(){h.j.h(d.c.Vc)});a.$on("$stateChangeStart",function(a,b){h.j.h(d.c.bd,{next:{state:b}})});a.$on("$stateChangeSuccess",function(){h.j.h(d.c.cd)});a.$on("$viewContentLoaded",function(a){var b={url:location.href};if(a=a&&a.X&&a.X.$state&&a.X.$state.current)b.state=a;h.j.h(d.c.ld,{next:b})});a.$on("$includeContentRequested",function(){h.j.h(d.c.Jf)});a.$on("$includeContentLoaded",function(){h.j.h(d.c.If)});
return a}])};c.prototype.Of=function(b){var c=this;b.$$completeOutstandingRequest=a.aop.before(b.$$completeOutstandingRequest,function(){c.j.h(d.c.Sb)})};return c}();d.ih=f;d.ngMonitor=new f})(a.ng||(a.ng={}))})(g||(g={}));(function(a){var d=a.ng||(a.ng={});d.conf.disabled||a.monitor.Zc(d.ngMonitor)})(g||(g={}))}};})();



/*** EXPORTS FROM exports-loader ***/
module.exports = ADRUM;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "require.min_2842d0ca2a86ca59639ffe99308bdf3f.js";

/***/ }),
/* 285 */,
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

//Contains common functions related to calculator controls
window.CALC = (function(calculatorModel) {

    var changeNotificationCallback;

    MSG.subscribe("loggedin", function () {
        var freeBetPlaceHolder = jQuery("#freeBetPlaceHolder");
        if (freeBetPlaceHolder.length > 0) {
            jQuery.ajax(freeBetPlaceHolder.attr("data-getoffersbutton"))
                .done(function (data) {
                    freeBetPlaceHolder.html(data);
                    OFFERS.initOffersHelp();
                });
        }

    });

    //adjusts the flexi state.
    //Note that this is tote-specific -- it will also update the text of the bet cost button.
    function setFlexi(combinations, investment) {
        var flexiAmount = FlexiService.calculate(combinations, investment);
        calculatorModel.setFlexiText(flexiAmount);
    }

    function roundToHalf(value) {
        return 0.5 * Math.floor(value / 0.5);
    }

    // IE7 returns button content instead of value.
    // this is a fix for the calculator buttons.
    function ie7CalculatorButtonFix(value) {
        //Upgraded to jQuery 2.x so don't need this anymore - someone delete kthx
        return value;
    }
    //Sets up common calculator functionality
    function initCommonCalculator(intOnly) {

        registerUpdateNotification(function () { });

        jQuery('input.bet-value').keypress(function (e) {
            CMN.numericKeyPress(e, intOnly);
        });

        setBlurBehaviour(intOnly);

        //set the button state now in case it's populated (e.g. after a refresh)
        setCalcButtonState();
    }

    function registerUpdateNotification(callback) {
        changeNotificationCallback = callback;
    }

    // Sets the behaviour after the user enters an amount manually. 
    function setBlurBehaviour(intOnly) {
        //need to unbind since this may be called multiple times with enhanced fob
        jQuery('input.bet-value').unbind('blur').blur(function () {
            var betAmount = parseFloat(jQuery(this).val());

            if (!isNaN(betAmount)) {
                var maxAmount = jQuery(this).attr('max');
                if (maxAmount) {
                    var max = parseFloat(maxAmount);
                    if (betAmount > max) {
                        betAmount = max;
                    }
                }

                if (intOnly) {
                    jQuery(this).val(Math.floor(betAmount).toFixed(2)).change();
                } else {
                    jQuery(this).val(roundToHalf(betAmount).toFixed(2)).change();
                }
            } else {
                jQuery(this).val("0.00").change();
            }

            setCalcButtonState();
        });
    }

    //Initialises a specific calculator (required to support multiple calculators on-screen)
    function initCalculator(id) {

        registerUpdateNotification(function () {});

        jQuery("div#" + id + " button.reset").click(function (e) {
            e.preventDefault();
            jQuery("div#" + id + " input.bet-value").val("0.00").change();
            setCalcButtonState();
        });
        jQuery("div#" + id + " button").not(".reset").click(function (e) {
            e.preventDefault();
            var target = jQuery("div#" + id + " input.bet-value");
            var buttonValue = ie7CalculatorButtonFix(jQuery(this).val());
            var newVal = (parseFloat(target.val() ? target.val() : 0) + parseFloat(buttonValue));
            var maxAmount = target.attr('max');

            if (maxAmount) {
                var max = parseFloat(maxAmount);
                if (newVal > max) {
                    newVal = max;
                }
            }

            target.val(newVal.toFixed(2)).change();
            setCalcButtonState();
        });
    }

    // Updates the continue and other calculator button states based on the calculator content.
    function setCalcButtonState() {
        var totalBetAmount = 0.00;
        jQuery('input.bet-value').each(function () {
            totalBetAmount += parseFloat(jQuery(this).val() ? jQuery(this).val() : 0);
        });
        jQuery('div.calculator-buttons a, a.calculator-buttons').toggleClass('disabled', (totalBetAmount <= 0));
        setFlexi(calculatorModel.getNumberOfCombinations(), totalBetAmount);
        if (changeNotificationCallback) {
            changeNotificationCallback();
        };
    }

    return {
        initCommonCalculator: initCommonCalculator,
        initCalculator: initCalculator,
        setCalcButtonState: setCalcButtonState,
        setBlurBehaviour: setBlurBehaviour,
        registerUpdateNotification: registerUpdateNotification
    };

})(Models.Tote.Calculator);

module.exports = window.CALC;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

Models.namespace('Models.BetBuilder');
Models.BetBuilder.BetSlip = function(overridePageProvider) {
    var page = overridePageProvider || function() {
        return {
            totalBetSlipCost: jQuery('#totalBetSlipCost'),
            numberOfBets: jQuery("#numberOfBets"),
            headerHelp: jQuery("#headerHelp"),
            headerNumberIndicator: jQuery("#betWalletndicator"),
            betBuilderItems: jQuery("#bet-builder-items"),
            clearButton: jQuery("#clearBetBuliderButton"),
            placeNowButton: jQuery('#placeBetSlipNow'),
            confirmBetSlipNowButton: jQuery('#confirmBetSlipNow'),
            deleteSingleButton: jQuery("#deleteSingleBetBuliderButton"),
            placeInStoreButton: jQuery("#placeInStoreButton"),
            infoButtons: jQuery(".js-betbuilder-info-buttons"),
            betInfoPopupContainer: jQuery("#bet-information"),
            betInfoDetailWindows: jQuery("#bet-information .window>div"),
            infoPopupCloseButton: jQuery("#bet-information .window>.black-x"),
            proposeBackButton: jQuery("#backToEdit"),
            betSlipStatusContainer: jQuery('#betSlipStatusContainer'),
            accountOrCashButtonGroup: jQuery('#accOrCashBtnGroup'),
            betWithParagraph: jQuery('#betWithPara')
        };
    };
    return page;
};


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.BetSlipStore = window.BetSlipStore = function() {
    var self = this;

    var _storeKey = 'betSlip';
    var _storeKeyBackup = 'betSlip.backup';

    // give the user a separate bet slip in each tab or window
    var _store = function () {
        if (amplify.store.types.sessionStorage) {
            return amplify.store.sessionStorage;
        }
        return amplify.store.memory;
    } ();

    self.clear = function () {
        self.backup();
        _store(_storeKey, null);
    };

    self.get = function () {
        var result = {
            Bets: [],
            Tags: []
        };

        var betSlip = _store(_storeKey);

        if (betSlip && _.isObject(betSlip)) {
            result.Bets = betSlip.Bets || result.Bets;
            result.Tags = betSlip.Tags || result.Tags;
        }

        return result;
    };

    self.set = function (betSlip) {
        self.backup();
        var data = {
            Bets: betSlip.Bets,
            Tags: [cryptojs.MD5(JSON.stringify(betSlip.Bets)).toString()]
        };
        _store(_storeKey, data);
    };

    self.backup = function () {
        _store(_storeKeyBackup, _store(_storeKey));
    };

    /* restore the bet slip identified by tag - if available */
    self.restore = function (tag) {
        var backupData = _store(_storeKeyBackup);
        if (backupData && _.indexOf(backupData.Tags,tag) >= 0) {
            _store(_storeKey, backupData);
            return true;
        }
        return false;
    };

    /* add a tag to the current bet slip version */
    self.tag = function (tag) {
        var data = self.get();
        data.Tags.push(tag);
        _store(_storeKey, data);
    };

    /* return list of available betslip tags */
    self.history = function () {
        var backupData = _store(_storeKeyBackup);
        if (backupData && backupData.Tags) {
            return backupData.Tags;
        }
        return [];
    };
};




/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.BETWALLET = window.BETWALLET = (typeof (window.BETWALLET) != 'undefined') ? window.BETWALLET : new (function(betWalletService, betSlipService) {

    var self = this;
    var page = {};
    var mySwipe = {};
    self.currentCashBet = null;

    self.pageProvider = function () {
        return {
            deleteSingleButton: jQuery('a[data-name=deleteThisBetSlip]'),
            deleteAllButton: jQuery('a[data-name=deleteAllBetSlips]'),
            confirmDeletePopup: jQuery('#confirmDeletePopup'),
            slider: jQuery('#slider'),
            betSlipId: jQuery('#betSlipId').val(),
            betWalletContainer: jQuery('body'),
            betSlipUrl: jQuery('#BetSlipUrl').val()
        };
    };

    function initBetWalletPage(url, backText) {

        TT.initCommon(url, backText);
        page = self.pageProvider();

        initBetSlips(function () {

            initSliderDivs();

            page.swipenext = jQuery('a[data-name=bet-wallet-slider-next]');
            page.swipeprev = jQuery('a[data-name=bet-wallet-slider-prev]');

            page.swipenext.click(swipeNextClick);
            page.swipeprev.click(swipePrevClick);

            TT.fixBackground();
            jQuery('body').addClass('p-bet-wallet');

            mySwipe = page.slider.Swipe({ callback: updateStatusCallback }).data('Swipe');
            mySwipe.setup();
            var betSlipSeqToShow = betWalletService.getLastBetSlip();
            slideToBetSlip(betSlipSeqToShow, 1);
            setSliderPageIndicator(betSlipSeqToShow);
            //must register button events after registering swipe (swipe class will copy two extra node for only two nodes)
            bindWalletContainerElements();

            if (betWalletService.isBetWalletFull()) {
                warningForFullWallet();
            }
        });
    }

    function addEmptyBetWallet(element) {
        element.append(jQuery('#emptyBetWalletView').html());
    }

    function initBetSlips(success) {
        var betGroupCount = getBetGroupCount();
        var betWallet = jQuery(".wallet");
        page = self.pageProvider();
        if (betGroupCount) {
            var betslipseqs = [betWalletService.getLastBetSlip()];
            if (betGroupCount > 1) {
                betslipseqs.push(betWalletService.nextOrFirstBetSlip(betslipseqs[0]));
            }

            if (betGroupCount > 2) {
                betslipseqs.push(betWalletService.previousOrLastBetSlip(betslipseqs[0]));
            }

            NAV.ajaxPost(
                '/betbuilder/betbuilder/getbetslips',
                jQuery.param({ 'betslipseqs': betslipseqs }, true),
                function (data) {
                    if (data) {
                        betWallet.append(data);
                        success();
                    }
                });
        } else {
            addEmptyBetWallet(betWallet);
            success();
        }
    }

    function initSliderDivs() {
        var prevElem = jQuery('#emptyBetWalletView');
        var betGroupCount = getBetGroupCount();
        if (betGroupCount > 1) {
            prevElem = prevElem.after('<a class="previous-slide" data-name="bet-wallet-slider-prev"><span class="ui-matrix white previous">Prev</span></a>');
            prevElem = prevElem.after('<a class="next-slide" data-name="bet-wallet-slider-next"><span class="ui-matrix white next">Next</span></a>');
        }
        if (betGroupCount) {
            prevElem.after('<div class="slides">Cash Bet <span class="slide-number" slide-number="1">1</span> of <span class="total-slides">@(Model.BetSlips.Count)</span></div>');
        }
    }

    function getBetGroupCount() {
        return betWalletService.getBetWalletCount();
    }

    function deleteSingleClick(e) {
        e.preventDefault();
        self.currentCashBet = jQuery(this).attr('data-betslipid');
        MSG.publish('popup.showPopUp', {
            headerText: 'Do you want to delete this Cash Bet?',
            buttonType: POPUP.BUTTONTYPE.CONFIRMCANCEL,
            confirmCallback: confirmSingleDeleteCallback,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            isWarning: true
        });
        return false;
    }

    function confirmSingleDeleteCallback () {

        MSG.unsubscribe('popup.ConfirmClick', confirmSingleDeleteCallback);
        confirmSingleDelete(self.currentCashBet);
        MSG.publish('bet.cash.remove', { ticket: self.currentCashBet });
    }

    function confirmSingleDelete(betSlipId) {

        var betslipItem = jQuery("div.ticket-container[data-betslipseq=" + betSlipId + "]");
        if (betslipItem.length > 0) {
            var nextBetSlipToShow = betWalletService.previousOrLastBetSlip(betSlipId);
            //special logic for deleting first bet slip, will new first bet slip instead of last bet slip
            if (betSlipId == betWalletService.getFirstBetSlip()) {
                nextBetSlipToShow = betWalletService.nextOrFirstBetSlip(betSlipId);
            }

            betWalletService.deleteBetSlip(betSlipId);
            betslipItem.remove();

            if (getBetGroupCount() == 0) {
                var betWallet = jQuery(".wallet");
                var slides = jQuery(".slides");
                betWallet.empty();
                slides.hide();
                addEmptyBetWallet(betWallet);
                return;
            }

            if (getBetGroupCount() == 1) {
                jQuery(".previous-slide").hide();
                jQuery(".next-slide").hide();
                removeDuplicates();
            }

            mySwipe.kill();
            mySwipe = page.slider.Swipe({ callback: updateStatusCallback }).data('Swipe');
            mySwipe.setup(); //must do this, because two slides will need to be duplicated for smoothy swipe
            slideToBetSlip(nextBetSlipToShow, 1);
            setSliderPageIndicator(nextBetSlipToShow);

            bindWalletContainerElements();
        }
    }

    function removeDuplicates() {
        var seen = {};
        jQuery('.ticket-container').each(function () {
            var betslip = jQuery(this).attr('data-betslipseq');
            if (seen[betslip])
                jQuery(this).remove();
            else
                seen[betslip] = true;
        });
    }

    function bindWalletContainerElements() {

        page.betWalletContainer.find('a[data-name=deleteThisBetSlip]').each(function () {
            jQuery(this).off().on("touch click", deleteSingleClick);
        });

        page.betWalletContainer.find('a[data-name=deleteAllBetSlips]').each(function () {
            jQuery(this).off().on("touch click", deleteAllClick);
        });

        page.deleteSingleButton.hide();
        page.deleteAllButton.hide();
        if (getBetGroupCount() > 0) {
            page.deleteSingleButton.show();
            page.deleteAllButton.show();
        }

        page.betWalletContainer.find('a[data-name=undoAddBetSlip]').each(function () {
            jQuery(this).off().on("touch click", undoAddBetSlipClick);
            var restoreTag = 'wallet_' + jQuery(this).data('betslipseq');
            jQuery(this).toggle(betSlipService.canUndoPlaceInStore(restoreTag));
        });

        page.betWalletContainer.find('span[data-name=barCodeSequence]').each(function () {
            var elem = jQuery(this);
            var url = elem.data('src');
            var request = jQuery.get(url);
            request.done(function (data) {
                elem.html(data);
            });
        });
    }

    function setSliderPageIndicator(currBetSlipSeq) {
        var currentSlideNumber = betWalletService.searchIndex(currBetSlipSeq);
        jQuery('.slide-number').html(currentSlideNumber + 1);
        jQuery('.total-slides').html(getBetGroupCount());
    }

    function slideToBetSlip(betSlipSeq, speed) {
        var newSlidePos = parseInt(jQuery('.ticket-container[data-betslipseq=' + betSlipSeq + ']').attr('data-index'));
        var currBetSlipSeq = jQuery('.ticket-container[data-index=' + mySwipe.getPos() + ']').attr('data-betslipseq');
        if (currBetSlipSeq === betSlipSeq || isNaN(newSlidePos)) {
            return; //currently showing is the one we want to slide to.
        }
        mySwipe.slide(newSlidePos, speed ? speed : 300);
    }

    function updateStatusCallback() {

        var expectedPosition = mySwipe.getPos();  //start from 0
        // Two reasons for doing this.
        // 1. When there is only two items in the wallet the library duplicates the items to
        //      so the slide appears continuous but this has caused a bug where getPos counts
        //      the duplicates and can return 2 and 3 as positions.
        // 2. When the last item is deleted the getPos still returns the deleted items position
        //      which is out of bounds in the case of deleting the last item.
        expectedPosition = expectedPosition % mySwipe.getNumSlides();

        //currBetSlip is the one will be showing
        var currBetSlipSeq = jQuery('.ticket-container[data-index=' + expectedPosition + ']').attr('data-betslipseq');
        if (!currBetSlipSeq) return;
        slideToBetSlip(currBetSlipSeq);
        setSliderPageIndicator(currBetSlipSeq);
        loadMoreBetSlips(currBetSlipSeq);
    }

    function loadMoreBetSlips(currBetSlipSeq) {
        if (currBetSlipSeq) {
            var currBetSlipNode = jQuery('.ticket-container[data-betslipseq=' + currBetSlipSeq + ']');

            var prevBetSlipSeq = betWalletService.previousOrLastBetSlip(currBetSlipSeq);
            var prevBetSlipDom = jQuery('.ticket-container[data-betslipseq=' + prevBetSlipSeq + ']');
            if (prevBetSlipDom && prevBetSlipDom.length == 0 && prevBetSlipSeq) {
                loadSingleBetWallet(prevBetSlipSeq, currBetSlipSeq, currBetSlipNode, currBetSlipNode.before);
            }

            var nextBetSlipSeq = betWalletService.nextOrFirstBetSlip(currBetSlipSeq);
            var nextBetSlipDom = jQuery('.ticket-container[data-betslipseq=' + nextBetSlipSeq + ']');
            if (nextBetSlipDom && nextBetSlipDom.length == 0 && nextBetSlipSeq) {
                loadSingleBetWallet(nextBetSlipSeq, currBetSlipSeq, currBetSlipNode, currBetSlipNode.after);
            }
        }
    }

    function loadSingleBetWallet(betSlipSeq, currBetSlipSeq, currBetSlipNode, insertContent) {
        NAV.ajaxPost(
            '/betbuilder/betbuilder/getbetslip',
            'betslipseq=' + betSlipSeq,
            function (data) {
                if (data) {
                    insertContent.apply(currBetSlipNode, [data]);
                    removeDuplicates();
                    mySwipe.setup();
                    slideToBetSlip(currBetSlipSeq, 1);
                    bindWalletContainerElements();
                }
            });
    }

    function swipeNextClick(event) {
        event.preventDefault();
        mySwipe.next();
    }

    function swipePrevClick(event) {
        event.preventDefault();
        mySwipe.prev();
    }

    function deleteAllClick(event) {

        event.preventDefault();
        MSG.publish('popup.showPopUp', {
            headerText: 'Are you sure you want to delete all Cash Bets?',
            buttonType: POPUP.BUTTONTYPE.CONFIRMCANCEL,
            confirmCallback: function () {
                betWalletService.deleteAllbetSlips();
                NAV.refresh();
                MSG.publish('bet.cash.clear');
            },
            confirmButtonText: 'Delete',
            cancelButtonText: 'Keep',
            isWarning: true
        });
    }

    function undoAddBetSlipClick(event) {
        var betSlipSeq = jQuery(this).data('betslipseq');
        var restoreTag = 'wallet_' + betSlipSeq;

        if (betSlipService.canUndoPlaceInStore(restoreTag)) {
            if (betSlipService.undoPlaceInStore(restoreTag)) {
                confirmSingleDelete(betSlipSeq);
                return NAV.nav(page.betSlipUrl);
            }
        }
        ErrorController.showErrorPopup("The undo operation could not be completed", null);
        return false;
    }

    function warningForFullWallet() {
        MSG.publish('popup.showPopUp', {
            headerText: 'CAPACITY REACHED',
            messageText: 'You have reached the maximum capacity of ' + betWalletService.maxNumOfBets() + ' saved cash bets. In order to continue adding more bets please delete unwanted barcodes.',
            buttonType: POPUP.BUTTONTYPE.Ok,
            cancelButtonText: "OK",
            isError: true
        });
    }

    this.initBetWalletPage = initBetWalletPage;

})(new BetWalletService(), new BetSlipService(new BetSlipStore()));


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.BETWALLETINDICATOR = window.BETWALLETINDICATOR = new function() {
    var self = this;

    self.page = null;
    self.lastKnownBetCount = undefined;

    self.pageProvider = function() {
        return {
            headerNumberIndicator: jQuery("#betWalletndicator"),
            walletNotificationPopup: jQuery('#header .notification-wallet')
        };
    };

    self.init = function() {
        self.page = self.pageProvider();
        self.setHeaderBetCount(self.getBetCount());
        MSG.subscribe('betwalletindicator.update', self.updateHeaderBetCount);
        self.lastKnownBetCount = self.getBetCount();
    };

    self.betCountHasIncreased = function() {
        return self.lastKnownBetCount < self.getBetCount();
    };

    self.showNotification = function() {
        self.page.walletNotificationPopup.show(function() {
            jQuery(this).animate({
                opacity: 1,
                top: '4.5em'
            }).delay(1500).animate({
                opacity: 0,
                top: '5.5em'
            }, function() { jQuery(this).hide(); });
        });
    };

    self.setHeaderBetCount = function(betCount) {
        var isAnyBets = betCount > 0;
        self.page.headerNumberIndicator.html(isAnyBets ? betCount : "");
        self.page.headerNumberIndicator.toggle(isAnyBets);

        if (self.betCountHasIncreased()) {
            self.showNotification();
        }
        self.lastKnownBetCount = self.getBetCount();
    };

    self.getBetCount = function() {
        var betWalletService = new BetWalletService();
        return betWalletService.getBetWalletCount();
    };

    self.updateHeaderBetCount = function() {
        self.setHeaderBetCount(self.getBetCount());
    };

    return self;
}


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.BetWalletStore = window.BetWalletStore = function() {
    var self = this;

    var _storeKey = 'betbldr';

    //
    // the persistant store is shared across browser sessions and tabs per user-device
    // and has a long life-time
    //
    var _localStore = amplify.store;

    //
    // memory store is temporary and renewed each full page load
    //
    var _memoryStore = amplify.store.memory;

    //
    // allow for possible future data-migration
    //
    var _version = "1";

    // 
    // create a randomly generated guid - sufficiently unique for usage tracking
    //
    var _guid = (function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
               .toString(16)
               .substring(1);
        }
        return function () {
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
           s4() + '-' + s4() + s4() + s4();
        };
    })();


    // 
    // get bet wallet data from persistent storage, substitute in any missing attributes to 
    // ensure the data is well-formed before returning. If the key is missing then
    // initialise a new bet wallet, then write it to storage and return 
    //   
    var _readStorage = function () {
        var data = _localStore(_storeKey);
        if(!data || !jQuery.isArray(data)) {
            data = [];
            var space = new TupleSpace(data);
            space.put("Version", _version);
            space.put("VisitorTrackingId", _guid());
            _localStore(_storeKey, data);
        }
        return data;
    };

    //
    // load in-memory copy of wallet, otherwise sync with persistent store
    //
    var _readMemory = function () {
        var result = _memoryStore(_storeKey);
        if (!result) {
            result = _readStorage();
            _memoryStore(_storeKey, result);
        }
        return result;
    };

    // 
    //  update wallet, writing-through updates to in-memory and persistent-storage,
    //  which will keep data in sync without exposing the user to unexpected updates
    //
    var _updateStorage = function (operation, params) {
        var localData = _readStorage();
        var memData = _readMemory();

        localData = operation(localData, params);
        memData = operation(memData, params);

        _localStore(_storeKey, localData);
        _memoryStore(_storeKey, memData);
    };

    var _operations = {
        clear: function (data, params) {
            return null;
        },
        add: function (data, params) {
            var space = new TupleSpace(data);
            space.put("DraftBetGroup", params.betSlipSeq);
            return data;
        },
        remove: function (data, params) {
            var space = new TupleSpace(data);
            space.take_many("DraftBetGroup", params.betSlipSeq);
            return data;
        },
        remove_all: function (data, params) {
            var space = new TupleSpace(data);
            space.take_many("DraftBetGroup");
            return data;
        },
    };
    
    //
    // blast away any wallet data
    //
    self.clear = function () {
        _updateStorage(_operations.clear);
    };

    //
    // read operations
    //
    self.get_bet_groups_count = function() {
        var space = new TupleSpace(_readMemory());
        return space.count("DraftBetGroup");
    };
    
    self.get_bet_groups = function() {
        var space = new TupleSpace(_readMemory());
        return jQuery.map(space.copy_many("DraftBetGroup"), function(tuple) {
            return { BetSlipSeq: tuple[1] };
        });
    };
    
    self.get_visitor_tracking_id = function() {
        var space = new TupleSpace(_readMemory());
        var tuple = space.copy("VisitorTrackingId");
        return tuple ? tuple[1] : null;
    };

    //
    // update operations
    //
    self.add = function (betSlipSeq) {
        _updateStorage(_operations.add, { betSlipSeq: betSlipSeq });
    };
    
    self.remove = function (betSlipSeq) {
        _updateStorage(_operations.remove, { betSlipSeq: betSlipSeq });
    };

    self.remove_all = function () {
        _updateStorage(_operations.remove_all);
    };
};




/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.CASHUITOGGLER = window.CASHUITOGGLER = (function() {

    function updateCashRelatedUI() {
        //buttons in CalculatorButtons.chtml
        var preferencesServiceLocal = PreferencesService;
        var cashBettingEnabled = preferencesServiceLocal.cashBettingEnabled();
        var placeInStoreButton = jQuery('#placeInStoreButton').not('.bettype-multi-accumulator');
        jQuery('#bettingFormNext').not('.bettype-multi-accumulator').toggleClass('halfwidth', cashBettingEnabled);
        jQuery('#bettingFormNext').not('.bettype-multi-accumulator').toggleClass('fullwidth', !cashBettingEnabled);
        placeInStoreButton.toggle(cashBettingEnabled);

        //In betslip
        if (typeof BETB !== 'undefined') {
            BETB.setButtonState();
            BETB.updateWarningOrErrorMessageHead();
        }

        //Live betting message in FOB
        if (FOB != undefined) {
            FOB.updateLiveBettingForCash();
        }
    }

    function onDynamicCashBettingFeatureOn() {
        //unsubscribe first just in case if it is subscribed before. This can happen if try to publish "DynamicCashBetting.On" many places and which is happening at the moment!! 
        MSG.unsubscribe('preferences.cash', updateCashRelatedUI);
        MSG.subscribe('preferences.cash', updateCashRelatedUI);
    }

    function onDynamicCachBettingFeatureOff() {
        MSG.unsubscribe('preferences.cash', updateCashRelatedUI);
    }

    function setupDynamicCashBettingSubscription() {
        MSG.subscribe('DynamicCashBetting.Off', onDynamicCachBettingFeatureOff);
        MSG.subscribe('DynamicCashBetting.On', onDynamicCashBettingFeatureOn);
    }

    setupDynamicCashBettingSubscription();

})();



/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

window.collections = window.collections || {};

collections.set = function () {
    var self = this;

    self._members = {};

    self.count = function (value) {
        return +(self._members[value] != null);
    };

    self.insert = function (value) {
        self._members[value] = 1;
        return self;
    };

    self.erase = function (value) {
        delete self._members[value];
        return self;
    };

    self.clear = function () {
        self._members = {};
        return self;
    };
};

collections.set.withArray = function (values) {
    var self = new collections.set();
    for (var i = 0; i < values.length; ++i) {
        self.insert(values[i]);
    }
    return self;
};

collections.set.withDict = function (dict) {
    var self = new collections.set();
    for (var key in dict) {
        self.insert(key);
    }
    return self;
};

collections.multiset = function () {
    var self = this;

    self._members = {};

    self.count = function (value) {
        return self._members[value] || 0;
    };

    self.insert = function (value) {
        self._members[value] = (self._members[value] || 0)+1;
        return self;
    };

    self.erase = function (value) {
        delete self._members[value];
        return self;
    };

    self.clear = function () {
        self._members = {};
        return self;
    };
};

collections.multiset.withArray = function (values) {
    var self = new collections.multiset();
    for (var i = 0; i < values.length; ++i) {
        self.insert(values[i]);
    }
    return self;
};

collections.multiset.withDict = function (dict) {
    var self = new collections.multiset();
    for (var key in dict) {
        self.insert(key);
    }
    return self;
};



/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.ConfigurationService = window.ConfigurationService = function() {
    var self = this;

    self.MaxBetsPerCashWallet = jQuery('#MaxBetsPerCashWallet').val();
    self.MaxBetsPerBetSlip = jQuery('#MaxBetsPerBetSlip').val();
    
};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.confirmation = window.confirmation = window.confirmation || {};

confirmation.Dialog = function (jQuery,cmn) {
    var self = this;
    
    self.show = function(msg, onConfirm, onCancel) {
        var fadeOut = function() { jQuery('#confirmation-window').fadeOut('fast'); };
        jQuery('#confirmation-message-list').html('<p>' + msg + '</p>');
        jQuery('#confirmation-close').unbind('click').click(function() {
            if (onCancel) {
                onCancel();
            }
            fadeOut();
        });
        jQuery('#confirmation-cancel').unbind('click').click(function() {
            if (onCancel) {
                onCancel();
            }
            fadeOut();
        });
        jQuery('#confirmation-confirm').unbind('click').click(function() {
            onConfirm();
            fadeOut();
        });
        cmn.showPopup($('#confirmation-window'));
    };
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

Controllers.namespace('Controllers.BetBuilder');
Controllers.BetBuilder.AddBetSlip = function (betWalletService) {
    var self = this;
    self.lock = new locking.lock();

    self.bindAddToWalletButtonClickHandler = function ($button, formData, beforeRequest) {
        $button.off("click");
        $button.click(function (e) {
            e.preventDefault();
            if (jQuery(this).is('.disabled') === false) {
                if (beforeRequest && !beforeRequest()) {
                    return false;
                } else {
                    var requestCreate = function(url) {
                        var data = formData();
                        return getRequest(url, data);
                    };
                    return processBetWalletRequest(requestCreate, bindUrlConfig(this));
                }
            }
            return false;
        });
    };

    self.onAddToWalletButtonClick = function(jsonModel) {
        var requestCreate = function(url) {
            var data = jQuery.param(jsonModel, true);
            return getRequest(url, data);
        };
        processBetWalletRequest(requestCreate, {
            requestUrl: "/BetBuilder/BetBuilder/AddToteRacingBetToBetWallet",
            betWalletUrl: "/#betbuilder/betbuilder/getbetwallet"
        });
    };

    self.bindAddMultiToWalletButtonClickHandler = function ($button, continueAfterProcess) {
        if (typeof continueAfterProcess === 'undefined') {
            continueAfterProcess = false;
        }

        $button.click(function (e) {
            e.preventDefault();
            if (jQuery(this).is('.disabled') === false) {
                var requestCreate = function(url) {
                    var $legType = jQuery('#calculator-form input:radio[name=ReturnType]:checked');
                    var formData = jQuery("#betting-form, #calculator-form").serialize();
                    setupPlaceInvestment($legType);
                    return getRequest(url, formData);
                };
                var totalCost = jQuery('#TotalCost').text();
                MSG.publish('bet.cash.selected', 'multi');
                return processBetWalletRequest(requestCreate, bindUrlConfig(this), totalCost) || continueAfterProcess;
            }
        });
    };

    function getRequest(url, formData) {
        var request = jQuery.ajax({
            url: url,
            data: formData + '&' + jQuery.param({ VisitorTrackingId: betWalletService.getVisitorTrackingId() }),
            type: "POST"
        });

        return request;
    }

    function bindUrlConfig(elem) {
        return {
            requestUrl: jQuery(elem).attr('href'),
            betWalletUrl: jQuery(elem).attr('data-betwalleturl')
        };
    }

    function errorForFullWallet() {
        MSG.publish('popup.showPopUp', {
            headerText: 'CAPACITY REACHED',
            messageText: 'You have reached the maximum capacity of ' + betWalletService.maxNumOfBets() + ' saved cash bets. In order to continue adding more bets please delete unwanted barcodes.',
            buttonType: POPUP.BUTTONTYPE.Ok,
            cancelButtonText: "OK",
            isError: true
        });
    }

    function processBetWalletRequest(requestCreate, urlConfig, totalCost) {
        if (self.lock.trylock()) {

            if (betWalletService.isBetWalletFull()) {
                errorForFullWallet();
                self.lock.unlock();
                return false;
            }

            NAV.showLoading();

            var request = requestCreate(urlConfig.requestUrl);

            request.done(function (response, textStatus, http) {
                if (http.status === 201) {

                    betWalletService.addBetSlip(Number(response));
                    NAV.navChange(urlConfig.betWalletUrl);
                    MSG.publish('bet.cash.receipt', {ticket:Number(response),totalCost:totalCost});
                } else {
                    ErrorController.showGenericErrorPage();
                }
            });
            request.fail(function (http) {
                if (http.status === 400) {
                    var caughtException = jQuery.parseJSON(http.responseText);
                    ErrorController.showErrorPopup(caughtException.Message, caughtException.ExceptionMessage);
                } else {
                    NAV.ajaxError(http.status, http, false);
                }
            });
            request.always(function () {
                self.lock.unlock();
            });
        }
        return false;
    }

    function setupPlaceInvestment(legType) {
        if (legType.length > 0) {
            var $investmentPlace = jQuery("#InvestmentPlace:input[type=hidden]");
            var $investmentWin = jQuery("#Investment");
            if (legType.val() === 'EachWay' && $investmentWin.length && $investmentPlace.length) {
                $investmentPlace.val($investmentWin.val());
            } else if ($investmentPlace.length) {
                $investmentPlace.val(null);
            }
        }
    }
};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

Controllers.namespace('Controllers.BetBuilder');
Controllers.BetBuilder.BetSlip = function (betSlipModel, summaryPanelModel, betSlipService, betWalletService, preferencesService) {
    var self = this;
    var loadPage = betSlipModel;
    self.page = betSlipModel();

    function initBetSlipPage(url, backText) {
        self.page = loadPage();
        TT.initCommon(url, backText);
        setButtonState();
        var betSlipCount = betSlipService.getBetSlipCount();
        setHeaderBetCount(betSlipCount);
        attachButtonHandlers();
        updateBetSlipIndexes();
        updateWarningOrErrorMessageHead();
        
        //we need a design to convert this to MSG.publish to remove the dependence
        if (jQuery('li a.information')) {
            jQuery('li a.information').click(function (e) {
                e.preventDefault();
                jQuery('#content-container .popup#bet-information div#bet-info').html(jQuery(this).children('span').children().clone());
                CMN.showPopup(jQuery('#bet-information'));
            });
        }

        jQuery('.popup > .bet-information > .black-x').click(function () { jQuery('.popup').fadeOut('fast'); });

        NAV.scrollTo('#top');

        // Subscriptions
        MSG.subscribe('betb.update', updateHeaderBetCount);
        MSG.subscribe("lo.login", reloadBetSlips);
        MSG.subscribe("nav.nav", cleanupSubscription);
    }

    function cleanupSubscription(url) {
        MSG.unsubscribe("lo.login", reloadBetSlips);
        MSG.unsubscribe("nav.nav", cleanupSubscription);
    }

    function reloadBetSlips() {
        betSlipService.reloadBetSlips();
    }

    function updateBetSlipIndexes() {
        var betSlipItems = jQuery("li[name=BetSlipItem]");
        jQuery.each(betSlipItems, function (index, value) {
            jQuery(value).attr('data-index', index);
        });
    }

    function setButtonState() {
        var anyBets = betSlipService.getBetSlipCount() > 0;
        var cashBettingEnabled = preferencesService.cashBettingEnabled();
        var accountBettingEnabled = !betSlipService.hasLiveBettingBets();
        var halfWidth = cashBettingEnabled;
        self.page.clearButton.toggle(anyBets);

        self.page.placeInStoreButton.toggle(cashBettingEnabled && anyBets);
        self.page.placeInStoreButton.toggleClass('r-5', halfWidth);
        self.page.placeInStoreButton.toggleClass('halfwidth', halfWidth);
        self.page.placeInStoreButton.toggleClass('right', halfWidth);

        self.page.placeNowButton.toggle(anyBets);
        self.page.placeNowButton.toggleClass('l-5', halfWidth);
        self.page.placeNowButton.toggleClass('halfwidth', halfWidth);
        self.page.placeNowButton.toggleClass('disabled', !accountBettingEnabled);

        self.page.accountOrCashButtonGroup.toggleClass('pl15', halfWidth);
        self.page.accountOrCashButtonGroup.toggleClass('pr15', halfWidth);
        self.page.betWithParagraph.toggleClass('l-5', halfWidth);        
    }

    function attachButtonHandlers() {
        self.page.deleteSingleButton.click();
        self.page.clearButton.click(clearBetSlipConfirmation);
        self.page.infoPopupCloseButton.click(closePopupClickHandler);
        self.page.infoButtons.click(infoButtonClickHandler);
        self.page.placeNowButton.click(placeNowHandler);
        self.page.confirmBetSlipNowButton.click(commitNowHandler);
        self.page.placeInStoreButton.click(placeInStoreHandler);
        self.page.proposeBackButton.click(proposeBackHandler);
        jQuery("li[name=BetSlipItem] a[name=BetSlipItemRemove]").on("click", function (e) {
            removeBetSlipItem(jQuery(this));
        });
    }

    function removeBetSlipItem($element) {
        var betSlipItem = $element.closest("li[name=BetSlipItem]");
        var betSlipItemIndex = betSlipItem.attr("data-index");
        betSlipService.removeBetSlipItem(betSlipItemIndex);
        var numberOfBets = betSlipService.getBetSlipCount();
        if (numberOfBets === 0) {
            NAV.refresh();
        } else {
            betSlipService.reloadBetSlips();
        }
        MSG.publish('bet.betslip.remove');
    }

    function placeNowHandler(e) {
        e.preventDefault();
        if (!jQuery(this).hasClass('disabled')) {
            betSlipService.placeBetSlipNow(self.page.placeNowButton.attr('href'), self.page.placeNowButton.attr('data-betslipurl'));
        }
    }

    function commitNowHandler(e) {
        e.preventDefault();
        betSlipService.commitBetSlipNow(self.page.confirmBetSlipNowButton.attr('href'), self.page.confirmBetSlipNowButton.attr('data-betslipurl'));
    }

    function placeInStoreHandler(e) {
        e.preventDefault();

        if (!jQuery(this).hasClass('disabled')) {

            NAV.showLoading();
            if (betWalletService.isBetWalletFull()) {
                MSG.publish('popup.showPopUp', {
                    headerText: 'CAPACITY REACHED',
                    messageText: 'You have reached the maximum capacity of ' + betWalletService.maxNumOfBets() + ' saved cash bets. In order to continue adding more bets please delete unwanted barcodes.',
                    buttonType: POPUP.BUTTONTYPE.Ok,
                    cancelButtonText: "OK",
                    isError: true
                });
                NAV.hideLoading();
                return;
            }

            MSG.publish('bet.betslip.cash.selected', 'single');
            betSlipService.placeInStore(jQuery(this).attr('href'), jQuery(this).attr('data-betwalleturl'), betWalletService);
        }
    }

    function proposeBackHandler(e) {
        e.preventDefault();
        NAV.nav(this.href);
    }

    function closePopupClickHandler(e) {
        e.preventDefault();
        self.page.betInfoPopupContainer.hide();
    }

    function infoButtonClickHandler(e) {
        e.preventDefault();
        self.page.betInfoDetailWindows.hide();
        self.page.betInfoPopupContainer.show();
        var draftBetSeq = jQuery(this).closest(".js-draft-bet-container").find(".js-draft-bet-seq").val();
        self.page.betInfoDetailWindows.filter("#" + draftBetSeq).show();
    }

    function setHeaderBetCount(betCount) {
        var isAnyBets = betCount > 0;
        self.page.headerNumberIndicator.html(isAnyBets ? betCount : "");
        self.page.headerNumberIndicator.toggle(isAnyBets);
    }

    function updateHeaderBetCount(betCount) {
        setHeaderBetCount(betCount);
        showNotification();
    }

    function updateWarningOrErrorMessageHead() {
        var warningMsg = jQuery('div#warningMsg');
        if (warningMsg) {
            var hasWarning = betSlipService.hasBetWarning();
            if (!hasWarning) {
                warningMsg.addClass('invisible');
            } else {
                warningMsg.removeClass('invisible');
            }
        }

        var errorMsg = jQuery('div#errMsg');
        if (errorMsg) {
            var hasError = betSlipService.hasBetError();
            if (!hasError) {
                errorMsg.addClass('invisible');
            } else {
                errorMsg.removeClass('invisible');
            }
        }

        var cashBettingEnabled = preferencesService.cashBettingEnabled();

        var lbWarningMsg = jQuery('div#liveBettingWarningMsg');
        if (lbWarningMsg) {
            var liveBetting = betSlipService.hasLiveBettingBets();
            if (!liveBetting || cashBettingEnabled) {
                lbWarningMsg.addClass('invisible');
            } else {
                lbWarningMsg.removeClass('invisible');
            }
        }

        var lblCashBonusBetMsg = jQuery('div#cashBonusBetMsg');
        if (lblCashBonusBetMsg) {
            if (!cashBettingEnabled) {
                lblCashBonusBetMsg.addClass('invisible');
            } else {
                lblCashBonusBetMsg.removeClass('invisible');
            }
        }

    }

    function showNotification() {
        jQuery('#header .notification-wallet').animate({
            opacity: 1,
            top: '4.5em'
        }).delay(1500).animate({
            opacity: 0,
            top: '5.5em'
        });
    }

    function clearBetSlipConfirmation() {
        MSG.publish('popup.showPopUp', {
            headerText: 'CLEAR BET SLIP',
            messageText: 'You are about to permanently remove all the bets from the bet slip. Please Confirm?',
            buttonType: POPUP.BUTTONTYPE.CONFIRMCANCEL,
            confirmCallback: clearBetSlip,
            confirmButtonText: 'Remove All',
            cancelButtonText: 'Keep',
            isWarning: true
        });
    }

    function clearBetSlip() {
        if (betSlipService.clearAll()) {
            NAV.nav(self.page.clearButton.attr('data-betslipurl'));
            MSG.publish('bet.betslip.clear');
        }
    }

    self.initBetSlipPage = initBetSlipPage;
    self.setHeaderBetCount = setHeaderBetCount;
    self.clearBetSlip = clearBetSlip;
    self.placeInStoreButton = self.placeInStoreButton;
    self.loadBetSlips = betSlipService.loadBetSlips;
    self.setButtonState = setButtonState;
    self.updateWarningOrErrorMessageHead = updateWarningOrErrorMessageHead;
};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

Controllers.namespace('Controllers.Tote');
Controllers.Tote.Calculator = function () {
    // Force new object
    var self = this instanceof Controllers.Tote.Calculator
            ? this
            : Object.create(Controllers.Tote.Calculator.prototype);

    // Binding Prototypes
    self.activate = self.activate.bind(self);
};

// Prototype Properties
Controllers.Tote.Calculator.prototype = function (NAV, CALC, TOTESEL) {
    var activate = function () {
        var disabled = "disabled";
        var nav = jQuery('.previous-race-button, .next-race-button, .page-heading .refresh-button');
        var navInfoContainer = jQuery('#nav-info-container');
        var betconfirm = '#bet-confirm';
        var betcostbutton = jQuery('#betcost');

        jQuery('.multi-options').hide();
        nav.hide();
        navInfoContainer.show();
        jQuery("a#placeBetNow").unbind('click');
        jQuery(betconfirm).hide().html("");
        jQuery('#pool-type-container, #bet-content, .bet-amount-container, .prefill-options, .prov-divs, .sort-group, #fixed-bet-info, #int-rules, #special-info').hide();
        jQuery('#race-details, .hidden-calculator, .my-selections').show();
        //disable all starter inputs so they aren't submitted
        jQuery('div.starter-tab input[name="starter"]').prop(disabled, true);

        var isWinPlace = jQuery('#BetType').val() === 'WinPlace';
        if (isWinPlace) {
            //hide show place calc as determined by the bet type.
            var fixedSelected = (TOTESEL.getFixedToteType() === 'fixed');
            //jQuery('.offers-info').toggle(!fixedSelected);
            jQuery('div#place-calculator').toggle((fixedSelected ? (jQuery('#FixedPlacesPaying').val() > 1) : (jQuery('#IsPlaceAvailable').val() !== 'False')) && !TOTESEL.isSpecialFobPropositionSelected());
            jQuery('span#pay-tote').toggle(!fixedSelected);
            jQuery('span#pay-fixed').toggle(fixedSelected);
            //hide show 50c amount buttons
            jQuery('.calculator button[value=".5"]').toggle(!fixedSelected);
            CALC.setBlurBehaviour(fixedSelected);
        }

        betcostbutton.toggle(isWinPlace).toggleClass('block', isWinPlace);

        NAV.overrideBack(function () {
            TOTE.changeToteStarterState(TOTE.states.none);
            CALC.registerUpdateNotification(null);
            jQuery(".black-bubble .pay-wrap").show();
            return false;
        });

        if (jQuery('.odds-evens > span.selected').length > 0) {
            jQuery(".black-bubble .pay-wrap").hide();
        }
        CALC.setCalcButtonState();
    };
    return {
        activate: activate
    };
} (NAV, CALC, TOTESEL);

//Singleton
Controllers.Tote.Calculator = new Controllers.Tote.Calculator();


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.Controllers = window.Controllers = window.Controllers || {};
window.namespace(window.Controllers, "Controllers");


/***/ }),
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = downloadUrl;
/* harmony export (immutable) */ __webpack_exports__["b"] = xmlParse;
/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

// NOTE: Now in webpack as a module.  This is only used by map.js.
// Ideally refactor maps.js to not need this.

/**
 * Possible source: https://searchcode.com/codesearch/view/39114143/
 */

/**
* Returns an XMLHttp instance to use for asynchronous
* downloading. This method will never throw an exception, but will
* return NULL if the browser does not support XmlHttp for any reason.
* @return {XMLHttpRequest|Null}
*/
function createXmlHttpRequest() {
 try {
   if (typeof ActiveXObject != 'undefined') {
     return new ActiveXObject('Microsoft.XMLHTTP');
   } else if (window["XMLHttpRequest"]) {
     return new XMLHttpRequest();
   }
 } catch (e) {
   changeStatus(e);
 }
 return null;
};

/**
* This functions wraps XMLHttpRequest open/send function.
* It lets you specify a URL and will call the callback if
* it gets a status code of 200.
* @param {String} url The URL to retrieve
* @param {Function} callback The function to call once retrieved.
*/
function downloadUrl(url, callback) {
 var status = -1;
 var request = createXmlHttpRequest();
 if (!request) {
   return false;
 }

 request.onreadystatechange = function() {
   if (request.readyState == 4) {
     try {
       status = request.status;
     } catch (e) {
       // Usually indicates request timed out in FF.
     }
     if ((status == 200) || (status == 0)) {
       callback(request.responseText, request.status);
       request.onreadystatechange = function() {};
     }
   }
 }
 request.open('GET', url, true);
 try {
   request.send(null);
 } catch (e) {
   changeStatus(e);
 }
};

/**
 * Parses the given XML string and returns the parsed document in a
 * DOM data structure. This function will return an empty DOM node if
 * XML parsing is not supported in this browser.
 * @param {string} str XML string.
 * @return {Element|Document} DOM.
 */
function xmlParse(str) {
  if (typeof ActiveXObject != 'undefined' && typeof GetObject != 'undefined') {
    var doc = new ActiveXObject('Microsoft.XMLDOM');
    doc.loadXML(str);
    return doc;
  }

  if (typeof DOMParser != 'undefined') {
    return (new DOMParser()).parseFromString(str, 'text/xml');
  }

  return createElement('div', null);
}



/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.FAVNUM = window.FAVNUM = (function() {
    var costArray = [0.50, 4.00, 18.00, 60.00, 165.00, 396.00, 858.00, 1716.00, 3217.00, 5720.00];
    var selected = 'selected';
    var currentPage;

    var poolButtons;

    var continueButton;
    var navButtons;
    var easyBetNavButton, potLuckNavButton;
    var confirmationPanel;
    var selectionsPanel;

    var bodyData;
    var showAllPoolsButton;
    var refreshButton;


    function initLocalVariables() {
        poolButtons = jQuery('div.pick-dates button.poolButton').click(poolClicked);

        continueButton = jQuery('#continueButton').click(continueClick);
        navButtons = jQuery('.nav-fav-nos li');
        easyBetNavButton = jQuery('#easyBetNavButton');
        potLuckNavButton = jQuery('#potLuckNavButton');

        confirmationPanel = jQuery('#confirmationPanel').hide();
        selectionsPanel = jQuery('#selections');
        bodyData = jQuery('body').data();
        showAllPoolsButton = jQuery('#showAllPools');

        refreshButton = jQuery('.refresh-button');
    }

    function initFavNum(url, backText, isRefresh) {
        Number.prototype.formatMoney = function () {
            var n = this,
            c = 2, d = ".", t = ",",
            s = n < 0 ? "-" : "",
            i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
            j = (j = i.length) > 3 ? j % 3 : 0;
            return "$" + s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
        };

        TT.initCommon(url, backText);
        NumbersResults.init(easyBetPage, potLuckPage);
        easyBetPage.initEasyBetPage();
        potLuckPage.initPotLuckPage();

        initLocalVariables();

        currentPage = easyBetPage;
        hookUpConfirmBet();
        showAllPoolsButton.click(showAllPoolsClicked);
        easyBetNavButton.click(function (e) {
            e.preventDefault();
            clearCachedValues();
            easyBetPage.showPage();
            potLuckPage.hidePage();
            continueButton.show();
            NumbersResults.hidePage();
        });

        potLuckNavButton.click(function (e) {
            e.preventDefault();
            clearCachedValues();
            potLuckPage.showPage();
            easyBetPage.hidePage();
            continueButton.show();
            NumbersResults.hidePage();
        });

        jQuery('#confirmCancelButton').click(confirmPage.cancelConfirmClicked);

        if (isRefresh === "true") {
            refreshSelections();
        } else {
            clearSelections();
        }

        jQuery('#content').show();
    }

    function hookUpConfirmBet() {
        locationDetailsAppender = new LocationDetailsAppender();
        jQuery("a#confirmBetButton").click(function (e) {
            e.preventDefault();
            if (jQuery(this).is('.disabled') === false) {
                var features = '';

                for (var i = 0; i < bodyData.poolDateSelections.length; i++) {
                    features += '&Pools[' + i + '].PoolNumber=' + bodyData.poolNumberSelections[i];
                    features += '&Pools[' + i + '].PoolDate=' + bodyData.poolDateSelections[i];
                }

                NAV.ajaxPost(jQuery(this).attr('href'),
                                locationDetailsAppender.addToUrlEncodedData(
                                "Game1Selections=" + bodyData.game1Selections.join(',') +
                                "&Game2Selections=" + bodyData.game2Selections.join(',') +
                                    features +
                                "&PotLuckNumberSelection=" + bodyData.potLuckNumberSelection +
                                "&NumberOfBets=" + bodyData.potLuckNumberOfBets +
                                "&BetIdentifier=" + jQuery("#BetIdentifier").val()),
                                function (data) {
                                    jQuery('#content').html(data);
                                    if (jQuery('#transaction-details').length > 0) {
                                        NAV.hideBack();
                                        var singleTicket = jQuery('#transaction-details span.title:contains("Ticket")').parent().find('span.data').html();
                                        var tickets = '';
                                        if (singleTicket) {
                                            tickets = [{ ticketNumber: singleTicket }];
                                        } else {
                                            tickets = jQuery("#transaction-details h4:contains('Ticket')").map(function () { return { ticketNumber: jQuery(this).html().replace('Ticket ', '') }; }).get();
                                        }
                                        var totalCost = jQuery('#transaction-details span.title:contains("Total Cost")').parent().find('span.data').html();
                                        MSG.publish('bet.favnumbers.receipt', { tickets: tickets, totalCost: totalCost });
                                        
                                    }
                                },
                                {
                                    control: jQuery(this)
                                }
                            );
            }
        });
    }

    function clearSelections() {
        clearCachedValues();

        refreshSelections();
    }

    function clearCachedValues() {
        bodyData.game1Selections = new Array();
        bodyData.game2Selections = new Array();
        bodyData.selectedGame = 1;
        bodyData.potLuckNumberOfBets = 1;
        bodyData.poolNumberSelections = new Array();
        bodyData.poolDateSelections = new Array();
        bodyData.poolNumberSelections.push(poolButtons.first().val());
        bodyData.poolDateSelections.push(poolButtons.first().siblings('.poolDateTime').val());
        bodyData.showAllPools = false;
        bodyData.navSelected = (jQuery('#defaultToPotLuckPage').val() === "True") ? 2 : 1;
        bodyData.potLuckNumberSelection = null;
        clearGui();
    }

    function clearGui() {
        easyBetPage.setSelectedGame(1);
        easyBetPage.setNumberSelections(new Array());
        potLuckPage.setNumberOfBets(1);
        potLuckPage.setNumberSelection();
        poolButtons.removeClass(selected);
        poolButtons.first().addClass(selected);
        hidePools();
    }

    function refreshSelections() {
        easyBetPage.setSelectedGame(bodyData.selectedGame);

        var selections = (bodyData.selectedGame == 1) ? bodyData.game1Selections : bodyData.game2Selections;
        easyBetPage.setNumberSelections(selections);

        if (bodyData.navSelected == 1) {
            easyBetPage.showPage();
            potLuckPage.hidePage();
        } else if (bodyData.navSelected == 2) {
            potLuckPage.showPage();
            easyBetPage.hidePage();
        } else {
            NumbersResults.showPage();
        }

        potLuckPage.refreshButtons();

        poolButtons.each(function () {
            jQuery(this).toggleClass(selected, (jQuery.inArray(jQuery(this).val(), bodyData.poolNumberSelections) != -1));
        });

        // Only one pool selected and it is closed during a refresh.
        if (poolButtons.filter('.selected').length == 0) {
            poolButtons.first().addClass(selected);
            bodyData.poolNumberSelections = [poolButtons.first().val()];
            bodyData.poolDateSelections.push(poolButtons.first().siblings('.poolDateTime').val());
        }

        bodyData.showAllPools ? showAllPools() : hidePools();

        setDateForFirstSelectedPoolDetails();
        easyBetPage.setBetSummary();
        setBetSummaryForDatesSelected(bodyData.poolNumberSelections.length);
        potLuckPage.setBetSummary();
    }

    var confirmPage = {
        cancelConfirmClicked:
            function cancelConfirmClicked(e) {
                e.preventDefault();
                selectionsPanel.show();
                refreshButton.show();
                confirmationPanel.hide();
                navButtons.show();
                clearSelections();
            }
    };

    function continueClick(e) {
        e.preventDefault();
        NAV.overrideBack(function (url,ev) {
            NAV.resetBack('Home');

            confirmationPanel.hide();
            selectionsPanel.show();
            refreshButton.show();
            navButtons.show();
            return false;
        }, 'Back');

        if (!jQuery(this).hasClass('disabled')) {
            selectionsPanel.hide();
            refreshButton.hide();
            confirmationPanel.show();
            navButtons.hide();
            jQuery('#confirmBetType').text(easyBetPage.isVisible() ? 'Easy Bet' : 'Pot Luck');
            currentPage.setConfirmPageFields();
            MSG.publish('bet.favnumbers.selected');
            MSG.publish('bet.favnumbers.review');
        }
    }

    function buildDatesList() {
        var dates = '';
        poolButtons.filter(".selected").find('span.date').sort(function (a, b) {
            if (new Date(jQuery(a).text()).getTime() > new Date(jQuery(b).text()).getTime()) {
                return 1;
            }
            else {
                return -1;
            }
        }).each(function () {
            dates += jQuery(this).text() + "<br/>";
        });

        return dates;
    }

    function showAllPoolsClicked(e) {
        e.preventDefault();

        showAllPools();
    }

    function showAllPools() {
        poolButtons.removeClass('no-display');
        showAllPoolsButton.hide();
        bodyData.showAllPools = true;
    }

    function hidePools() {
        poolButtons.filter(':not(.jackpot-height)').addClass('no-display');
        showAllPoolsButton.show();
        bodyData.showAllPools = false;
    }

    function setBetSummaryForDatesSelected(numberOfDatesSelected) {
        jQuery('#numberOfDates').text('x ' + numberOfDatesSelected);
        jQuery('#potLuckNumberOfDates').text('x ' + numberOfDatesSelected);
        easyBetPage.setBetSummaryBetCost();
        potLuckPage.setBetSummaryBetCost();
    }

    function poolClicked(e) {
        e.preventDefault();
        var poolElement = jQuery(this);
        setPoolSelection(poolElement);

        setDateForFirstSelectedPoolDetails();
        var selectedPools = poolButtons.filter('.selected');

        bodyData.poolNumberSelections = new Array();
        bodyData.poolDateSelections = new Array();
        selectedPools.each(function () {
            bodyData.poolNumberSelections.push(jQuery(this).val());
            bodyData.poolDateSelections.push(jQuery(this).siblings('.poolDateTime').val());
        });

        setBetSummaryForDatesSelected(selectedPools.length);
    }

    function setPoolSelection(poolElement) {
        poolElement.toggleClass(selected);

        if (poolButtons.filter(".selected").length < 1) {
            poolElement.addClass(selected);
        }
    }

    function setDateForFirstSelectedPoolDetails() {
        var date;
        var closeDateDisplay;
        var updatedDateTimeDisplay;

        poolButtons.filter('.selected')
            .each(function () {
                var poolDate = new Date(jQuery(this).siblings('.poolCloseDateTime').val());

                if (!date || poolDate < date) {
                    date = poolDate;
                    closeDateDisplay = jQuery(this).siblings('.poolCloseDateTimeDisplay').val();
                    updatedDateTimeDisplay = jQuery(this).siblings('.updateAtDateTimeDisplay').val();
                }
            });

        jQuery('#poolCloseDatePlaceHolder').text(closeDateDisplay);
        jQuery('#poolUpdatedDatePlaceHolder').text(updatedDateTimeDisplay);
    }

    function setContinueButton() {
        if (currentPage.isBetValid()) {
            continueButton.removeAttr('disabled');
            continueButton.removeClass('disabled');
        } else {
            continueButton.prop('disabled', true);
            continueButton.addClass('disabled');
        }
    }


    var potLuckPage = (function () {

        var potLuckNumberButtons;
        var potLuckNumberOfBetsButtons;
        var potLuckPanels;

        function initPotLuckPage() {
            potLuckNumberButtons = jQuery('#potLuckSelectNumbersPanel button').click(potLuckNumberClicked);
            potLuckNumberOfBetsButtons = jQuery('#potLuckNumberOfBetsPanel button').click(potLuckNumberOfBetsButtonClick);
            potLuckPanels = jQuery('#potLuckSelectNumbersPanel,#potLuckBetSummaryPanel,#potLuckNumberOfBetsPanel,#confirmPotLuckSelections,#confirmPotLuckInvesment').hide();
        }

        function showPage() {
            bodyData.navSelected = 2;
            currentPage = potLuckPage;
            potLuckPanels.show();
            setContinueButton();
            navButtons.removeClass('ui-state-active');
            potLuckNavButton.parent().addClass('ui-state-active');
        }

        function hidePage() {
            potLuckPanels.hide();
            jQuery('#poolSelections').show();
        }

        function isBetValid() {
            return potLuckPanels.is(':visible') &&
                bodyData.potLuckNumberSelection;
        }

        function potLuckNumberClicked(e) {
            e.preventDefault();

            potLuckNumberButtons.removeClass(selected);
            jQuery(this).addClass(selected);
            bodyData.potLuckNumberSelection = jQuery(this).val();
            setContinueButton();
            setBetSummaryForPotLuckNumber();
            setBetSummaryForPotLuckBetCost();
        }

        function potLuckNumberOfBetsButtonClick(e) {
            e.preventDefault();
            potLuckNumberOfBetsButtons.removeClass(selected);
            jQuery(this).addClass(selected);
            bodyData.potLuckNumberOfBets = jQuery(this).val();
            setBetSummaryForNumberOfBets(bodyData.potLuckNumberOfBets);
            setBetSummaryForPotLuckBetCost();
        }

        function setConfirmPageFields() {
            var betCost = costArray[bodyData.potLuckNumberSelection - 7];
            var temp = jQuery('#confirmPotLuckNumber');
            temp.siblings(".title").html(bodyData.potLuckNumberSelection + ' Numbers');
            temp.text(betCost.formatMoney());
            jQuery('#confirmDatesPotLuckBetConfirm').html(buildDatesList());
            jQuery('#confirmNumBetsPotLuckBetConfirm').text(bodyData.potLuckNumberOfBets);
            jQuery('#confirmPotLuckBetCost').text(betCost.formatMoney());
            var numberOfBets = bodyData.potLuckNumberOfBets * bodyData.poolNumberSelections.length;
            jQuery('#confirmPotLuckTotalBets').text(numberOfBets);
            jQuery('#confirmPotLuckTotalCost,#confirmTotalBetCost').text((numberOfBets * betCost).formatMoney());
        }

        function setBetSummaryForPotLuckNumber() {
            jQuery('#potLuckNumbersTitle').text(((bodyData.potLuckNumberSelection) ? bodyData.potLuckNumberSelection : 0) + ' Numbers');
            jQuery('#potLuckNumberSummary').text((bodyData.potLuckNumberSelection ? costArray[bodyData.potLuckNumberSelection - 7] : 0).formatMoney());
        }

        function setBetSummaryForNumberOfBets(numberOfBets) {
            jQuery('#potLuckNumberOfBets').text('x ' + numberOfBets);
        }

        function setBetSummaryForPotLuckBetCost() {
            //jQuery('#potLuckBetCost').text('$' + (bodyData.potLuckNumberSelection ? (costArray[bodyData.potLuckNumberSelection - 7] * bodyData.potLuckNumberOfBets * bodyData.poolNumberSelections.length) : 0).toFixed(2));
            jQuery('#potLuckBetCost').text((bodyData.potLuckNumberSelection ? (costArray[bodyData.potLuckNumberSelection - 7] * bodyData.potLuckNumberOfBets * bodyData.poolNumberSelections.length) : 0).formatMoney());
        }

        function setBetSummary() {
            setBetSummaryForPotLuckNumber();
            setBetSummaryForNumberOfBets(bodyData.potLuckNumberOfBets);
            setBetSummaryForPotLuckBetCost();
        }

        function setNumberOfBets(numberOfBets) {
            jQuery('#potLuckNumberOfBetsPanel button').removeClass(selected);
            jQuery('#numberOfBetsButton' + numberOfBets).addClass(selected);
        }

        function setNumberSelection(numberSelection) {
            jQuery('#potLuckList button').removeClass('selected');

            if (numberSelection) {
                jQuery('#potLuckNumberButton' + numberSelection).addClass('selected');
            }
        }

        function refreshButtons() {
            potLuckNumberButtons
            .removeClass(selected)
            .filter('#potLuckNumberButton' + bodyData.potLuckNumberSelection).addClass(selected);
            potLuckNumberOfBetsButtons
                .removeClass(selected)
                .filter('#numberOfBetsButton' + bodyData.potLuckNumberOfBets).addClass(selected);
        }

        return {
            showPage: showPage,
            hidePage: hidePage,
            isBetValid: isBetValid,
            initPotLuckPage: initPotLuckPage,
            refreshButtons: refreshButtons,
            setBetSummary: setBetSummary,
            setBetSummaryBetCost: setBetSummaryForPotLuckBetCost,
            setConfirmPageFields: setConfirmPageFields,
            setNumberSelection: setNumberSelection,
            setNumberOfBets: setNumberOfBets
        };
    })();

    var easyBetPage = (function () {
        var game1Button;
        var easyBetPanels;
        var easyBetNumberButtons;
        var gameButtons;
        var confirmSelectionGame1, confirmSelectionGame2;
        var confirmGame1InvestmentDetails, confirmGame2InvestmentDetails;

        function initEasyBetPage() {
            game1Button = jQuery('#game1button');
            easyBetPanels = jQuery('#easyBetSelectNumbersPanel,#easyBetSummaryPanel,#confirmEasyBetSelections,#confirmEasyBetInvesment');
            easyBetNumberButtons = jQuery('#easyBetNumbers button').on("click", easyBetNumberClick);
            gameButtons = jQuery('div.select-games button').click(gameSelected);
            confirmSelectionGame1 = jQuery('#confirmEasyBetGame1Sel');
            confirmSelectionGame2 = jQuery('#confirmEasyBetGame2Sel');
            confirmGame1InvestmentDetails = jQuery('#confirmEasyBetGame1Cost');
            confirmGame2InvestmentDetails = jQuery('#confirmEasyBetGame2Cost');
        }

        function easyBetNumberClick(e) {
            e.preventDefault();
            jQuery(this).toggleClass(selected);
            var selectedButtons = easyBetNumberButtons.filter('.selected');

            var temp = new Array();
            selectedButtons.each(function () {
                temp.push(jQuery(this).val());
            });

            var selectedGame;

            if (game1Button.hasClass(selected)) {
                selectedGame = 1;
                bodyData.game1Selections = temp;
            } else {
                selectedGame = 2;
                bodyData.game2Selections = temp;
            }

            var numbersSelected = Math.min(selectedButtons.length, 16);
            setBetSummaryForGame(selectedGame, numbersSelected);
            setContinueButton();
        }

        function gameSelected(e) {
            e.preventDefault();
            if (!jQuery(this).hasClass(selected)) {
                clearGames();
                jQuery(this).addClass(selected);

                easyBetNumberButtons.removeClass(selected);
                var selectedNumbers = (jQuery(this).val() == 1) ? bodyData.game1Selections : bodyData.game2Selections;

                jQuery(selectedNumbers).each(function () {
                    jQuery('#numberButton' + this).addClass(selected);
                });
            }

            bodyData.selectedGame = jQuery(this).val();
        }

        function showPage() {
            bodyData.navSelected = 1;
            currentPage = easyBetPage;
            easyBetPanels.show();
            setContinueButton();
            navButtons.removeClass('ui-state-active');
            easyBetNavButton.parent().addClass('ui-state-active');
        }

        function hidePage() {
            easyBetPanels.hide();
            jQuery('#poolSelections').show();
        }

        function setConfirmSelectionForGame(selectionElement, investmentDetailElement, cost, selections) {
            if (selections.length > 0) {
                selectionElement.html(selections.join('.&#8203;'));

                investmentDetailElement.parent().removeClass('no-display');
                selectionElement.parent().removeClass('no-display');
                investmentDetailElement.text(cost.formatMoney());
            } else {
                investmentDetailElement.parent().addClass('no-display');
                selectionElement.parent().addClass('no-display');
            }
        }

        function setConfirmPageFields() {
            var game1Cost = bodyData.game1Selections.length == 0 ? 0 : costArray[bodyData.game1Selections.length - 7];
            var game2Cost = bodyData.game2Selections.length == 0 ? 0 : costArray[bodyData.game2Selections.length - 7];
            setConfirmSelectionForGame(confirmSelectionGame1, confirmGame1InvestmentDetails, game1Cost, bodyData.game1Selections);
            setConfirmSelectionForGame(confirmSelectionGame2, confirmGame2InvestmentDetails, game2Cost, bodyData.game2Selections);

            jQuery('#confirmEasyBetDates').html(buildDatesList());
            jQuery('#confirmEasyBetNoBets').text('x ' + bodyData.poolNumberSelections.length);
            jQuery('#confirmationEasyBetTotalCost,#confirmTotalBetCost').text(((game1Cost + game2Cost) * bodyData.poolNumberSelections.length).formatMoney());

            resetAltClass(jQuery('#confirmEasyBetSelections'));
            resetAltClass(jQuery('#confirmEasyBetInvesment'));
        }

        function resetAltClass(ul) {
            var visibleItems = ul.children('li:not(.no-display)');
            visibleItems.removeClass('alt');
            visibleItems.filter(':even').addClass('alt');
        }

        function isBetValid() {
            return easyBetPage.isVisible() &&
                (isGameSelectionValid(bodyData.game1Selections.length) || bodyData.game1Selections.length == 0) &&
                (isGameSelectionValid(bodyData.game2Selections.length) || bodyData.game2Selections.length == 0) &&
                (isGameSelectionValid(bodyData.game1Selections.length) || isGameSelectionValid(bodyData.game2Selections.length));
        }

        function isGameSelectionValid(numberOfSelections) {
            return (numberOfSelections >= 7 && numberOfSelections <= 16);
        }

        function setBetSummaryForGame(selectedGame, numberOfNumberSelections) {
            jQuery('#numbersTitleGame' + selectedGame).text('Game ' + selectedGame + ' - ' + numberOfNumberSelections + ' numbers');
            var prefix = '';
            if (selectedGame == 2) {
                prefix = '+ ';
            }
            var cost = 0;
            if (numberOfNumberSelections >= 7) {
                cost = costArray[numberOfNumberSelections - 7];
            }
            jQuery('#costGame' + selectedGame).text(prefix + cost.formatMoney());

            setBetSummaryBetCost();
        }

        function setBetSummaryBetCost() {
            var numberOfSelGame1 = bodyData.game1Selections.length;
            var game1Cost = 0, game2Cost = 0;
            if (numberOfSelGame1 >= 7) {
                game1Cost = costArray[Math.min(numberOfSelGame1, 16) - 7];
            }

            var numberOfSelGame2 = bodyData.game2Selections.length;
            if (numberOfSelGame2 >= 7) {
                game2Cost = costArray[Math.min(numberOfSelGame2, 16) - 7];
            }

            jQuery('#betCost').text(((game1Cost + game2Cost) * bodyData.poolNumberSelections.length).formatMoney());
        }

        function setBetSummary() {
            setBetSummaryForGame(1, bodyData.game1Selections.length);
            setBetSummaryForGame(2, bodyData.game2Selections.length);
            setBetSummaryBetCost();
        }

        function clearGames() {
            gameButtons.removeClass(selected);
        }

        function setSelectedGame(selectedGame) {
            clearGames();
            gameButtons.filter('#game' + selectedGame + 'button').addClass(selected);
        }

        function isVisible() {
            return easyBetPanels.is(":visible");
        }

        function setNumberSelections(selections) {
            easyBetNumberButtons.each(function () {
                jQuery(this).toggleClass(selected, (jQuery.inArray(jQuery(this).val(), selections) != -1));
            });
        }

        return {
            setNumberSelections: setNumberSelections,
            isVisible: isVisible,
            showPage: showPage,
            hidePage: hidePage,
            setConfirmPageFields: setConfirmPageFields,
            isBetValid: isBetValid,
            setBetSummary: setBetSummary,
            setBetSummaryBetCost: setBetSummaryBetCost,
            initEasyBetPage: initEasyBetPage,
            setSelectedGame: setSelectedGame
        };
    })();

    function handleBetError(e) {
        e.preventDefault();
        NAV.hideErrorPopup();
        confirmationPanel.hide();
        selectionsPanel.show();
        refreshButton.show();
        navButtons.show();
    }

    return {
        initFavNum: initFavNum,
        easyBetPage: easyBetPage,
        clearCachedValues: clearCachedValues,
        handleBetError: handleBetError
    };
})();


window.NumbersResults = (function () {

    var easyBetPage, potLuckPage, resultsNavButton;
    var panel;
    var page, bodyData;
    function init(eBetPage, plPage) {
        bodyData = jQuery('body').data();
        easyBetPage = eBetPage;
        potLuckPage = plPage;
        resultsNavButton = jQuery('#noResultsNavButton').click(navButtonClick);
        jQuery('#prevPool').click(prevButtonClick);
        jQuery('#nextPool').click(nextButtonClick);
        panel = jQuery('#numbersAndResultsPanel').hide();

        page = {
            poolDateElement: jQuery('#poolDateResults'),
            currentPoolDate:jQuery('#currentPoolDate'),
            poolTotal: jQuery('#poolInfoResults').find('.jsPoolTotal'),
            poolCloseDate: jQuery('#poolInfoResults').find('.jsPoolClose'),
            poolCloseDateTitle: jQuery('#poolInfoResults').find('.jsPoolClosesTitle'),
            poolJackpotIcon: jQuery('#poolInfoResults').find('.jackpot'),
            poolJackpot: jQuery('#poolInfoResults').find('.jsJackpotAmount'),
            nextPoolButton: jQuery('#nextPool'),
            prevPoolButton: jQuery('#prevPool'),
            notAllocated: jQuery('#notAllocated'),
            resultsLegend: jQuery('#results-legend'),
            carryover: jQuery('#carryover'),
            winningEntries: jQuery('#winningEntries'),
            dividendPayable: jQuery('#dividendPayable')
        };

        jQuery('#favnumberResultList').on("click", "button", function (e) {
            e.preventDefault();
        });
    }

    function nextButtonClick(e) {
        e.preventDefault();
        if (!jQuery(this).hasClass('disabled')) {
            getPool(jQuery(this).attr('href'));
        }
    }

    function prevButtonClick(e) {
        e.preventDefault();
        if (!jQuery(this).hasClass('disabled')) {
            getPool(jQuery(this).attr('href'));
        }
    }

    function getPool(url) {
        NAV.ajaxPost(url,
            "fromDate=" + page.currentPoolDate.val(),
            function (data) { loadPool(data); },
            {
                control: jQuery(this)
            }
        );
    }

    function navButtonClick(e) {
        e.preventDefault();
        showPage();
    }

    function showPage() {
        NAV.ajaxPost(resultsNavButton.attr('href'),
                                null,
                                function (data) {
                                    loadPool(data);
                                    CMN.setDisableState(resultsNavButton, true);
                                    panel.show();
                                    easyBetPage.hidePage();
                                    potLuckPage.hidePage();
                                    jQuery('#poolSelections').hide();
                                    FAVNUM.clearCachedValues();
                                    bodyData.navSelected = 3;
                                    jQuery('#continueButton').hide();
                                    jQuery('#easyBetNavButton').parent().removeClass('ui-state-active');
                                    jQuery('#potLuckNavButton').parent().removeClass('ui-state-active');
                                    resultsNavButton.parent().addClass('ui-state-active');
                                },
                                {
                                    control: resultsNavButton
                                }
                            );
    }

    function loadPool(pool) {
        page.nextPoolButton.toggleClass('disabled', !pool.isNextAvailable);
        page.prevPoolButton.toggleClass('disabled', !pool.isPreviousAvailable);
        page.poolDateElement.html(pool.poolDate);
        page.currentPoolDate.val(pool.poolDate);
        page.poolTotal.html(pool.poolTotal);
        page.poolCloseDate.html(pool.poolResultDispalyDate);
        page.poolCloseDateTitle.html(pool.poolResultDisplayDateTitle);
        page.poolJackpot.html(pool.jackpotAmount);
        if (pool.jackpotAmount && pool.jackpotAmount.length > 0) {
            page.poolJackpotIcon.removeClass('no-display');
        } else {
            page.poolJackpotIcon.addClass('no-display');
        }

        var legHtml = '';
        if (pool.legs) {
            for (var j = 0; j < 30; j++) {
                var leg = pool.legs[j];
                var favNum = j + 1;
                var subText = leg.isSub ? " (SUB)" : "";
                var cssClass = leg.isLive ? '' : leg.isWinner ? 'result-won' : 'result-lost';
                legHtml += "<li><button id='resultsButton";
                legHtml += favNum + "' class='disabled " + cssClass + "' value='" + favNum + "'>";
                legHtml += favNum + "<span class='code'>" + leg.race + "<br/> " + subText + "</span></button></li>";
            }

            page.notAllocated.addClass('no-display');
            page.resultsLegend.removeClass('no-display');
        } else {
            page.notAllocated.removeClass('no-display');
            page.resultsLegend.addClass('no-display');
        }

        jQuery('#favnumberResultList').html(legHtml);

        if (pool.dividendPayable && pool.dividendPayable.length > 0 && pool.numbersRequired) {
            jQuery('#dividendPayable').html(pool.numbersRequired + " numbers required for a dividend of " + pool.dividendPayable + '.');

            if (pool.winningEntries == 0) {
                page.winningEntries.html("There are no winning entries.");
            } else if (pool.winningEntries == 1) {
                page.winningEntries.html("There is 1 winning entry.");
            } else {
                page.winningEntries.html('There are ' + pool.winningEntries + ' winning entries.');
            }

            page.dividendPayable.removeClass('no-display');
            page.winningEntries.removeClass('no-display');
        } else {
            page.dividendPayable.addClass('no-display');
            page.winningEntries.addClass('no-display');
        }

        page.carryover.toggleClass('no-display', !pool.carryover);

        if (pool.carryover) {
            page.carryover.html('There is a carryover of ' + pool.carryover + '.');
        }
    }

    function hidePage() {
        panel.hide();
    }

    return {
        init: init,
        loadPool: loadPool,
        hidePage: hidePage,
        showPage: showPage
    };
})();



/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

window.rwwaFeatureDetection = window.rwwaFeatureDetection || {};

window.rwwaFeatureDetection.Service = new function() {
    var self = this;

    self.isCookiesEnabled = function() {
        // Quick test if browser has cookieEnabled host property
        if (navigator.cookieEnabled) return true;
        // Create cookie
        document.cookie = "cookietest=1";
        var ret = document.cookie.indexOf("cookietest=") !== -1;
        // Delete cookie
        document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT";
        return ret;
    };
};


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.FlexiService = window.FlexiService = (function() {
    var //
        truncate = function (number) {
            //The toFixed is to handle floating point issues 
            // e.g. 0.29 * 100 = 28.999999 in javascript, so we need to round it off before truncating it.
            return Math.floor((number * 100).toFixed(3)) / 100;
        },
        calculate = function (combinations, investment) {
            if (combinations === 0 || investment === 0) {
                return 0;
            }
            return truncate((investment * 100.0) / combinations);
        };
    
        return {
            calculate: calculate
        };
})();



/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.FOB = window.FOB = (function(addBetSlipController, betSlipService, preferencesService, locationDetailsAppender) {
    var sel;
    var activeClass = "ui-state-active";

    function initPropositions(url, backText) {
        TT.initCommon(url, backText);
        updateButtonState();
        CMN.initSlideToggleHandlers();

        sel = '';
        var props = jQuery('ul.proposition-list');
        var radio = props.find('input[type=radio]');

        props.find('li input:radio').click(function (e) {
            setRadioState(jQuery(this));
            e.stopPropagation();
        });

        //Code so clicking anywhere on the li element will select/unselect the radio button.
        props.find('li').click(function () {
            var input = jQuery(this).children('input:radio');
            if (!input.is(':disabled')) {
                setRadioState(input);
            }
        });

        initPost(jQuery('.calc-single'),
                 jQuery('form#propositions-form'),
            function() {
                NAV.navChange('#fob/single/calc');
                MSG.publish('bet.single.selected', { type: 'fobsports' });
            },
                 false
        );

        //don't use initPost for following post 
        //directly post to server, no need to unbind('click') in initPost
        jQuery('a.add-to-multi').click(function (e) {
            e.preventDefault();
            if (jQuery('#choose-win-place-leg-popup').length > 0 && props.find('input:checked').length > 0) {
                CMN.showPopup(jQuery('#choose-win-place-leg-popup'));
            }
            else {
                formPost(jQuery('a.add-to-multi'),
                    jQuery('form#propositions-form'),
                    processRedirectResponse,
                    false);
            }
            return false;
        });

        jQuery('a.add-win-to-multi').click(function (e) {
            e.preventDefault();
            jQuery('#legType').val('win');
            return formPost(jQuery('a.add-win-to-multi'),
                    jQuery('form#propositions-form'),
                    processRedirectResponse,
                    false);
        });

        jQuery('a.add-place-to-multi').click(function (e) {s
            e.preventDefault();
            jQuery('#legType').val('place');
            return formPost(jQuery('a.add-place-to-multi'),
                    jQuery('form#propositions-form'),
                    processRedirectResponse,
                    false);
        });

        jQuery('a.confirm-win-leg').click(function (e) {
            e.preventDefault();
            jQuery('#legType').val('win');
            return formPost(jQuery('a.confirm-win-leg'),
                    jQuery('form#propositions-form'),
                    processRedirectResponse,
                    false);
        });

        jQuery('a.confirm-place-leg').click(function (e) {
            e.preventDefault();
            jQuery('#legType').val('place');
            return formPost(jQuery('a.confirm-place-leg'),
                    jQuery('form#propositions-form'),
                    processRedirectResponse,
                    false);
        });

        var popup = jQuery('.popup > .win-place-confirm > .black-x');
        popup.click(function () {
            jQuery('.popup').fadeOut('fast');
        });

        jQuery('div.black-bubble a.information').click(function (e) {
            e.preventDefault();
            //setting duration to 0 if there are more than 30 props to avoid weird visual issue on some phones.
            CMN.scrollTo(jQuery(jQuery(this).attr('href')), (jQuery('#propslist').children().length > 30 ? 0 : 'slow'));
        });

        //set button texts (Start Multi) for preselected prop
        if (props.find('input:checked').length > 0) {
            setWiPlacePopupDisplayValue();
        }

        NAV.overrideRefresh(function () {
            if (jQuery('input:radio').is(':checked')) {
                formPost(jQuery('#hidden-refresh'), jQuery('form#propositions-form'), NAV.showContent);
            }
            else {
                NAV.refresh();
            }
            return false;
        });

        updateLiveBettingForCash();
    }

    function updateLiveBettingForCash() {
        var cashBettingEnabled = preferencesService.cashBettingEnabled();
        var liveBettingDivs = jQuery('div .liveBettingButtonGroup');
        if (liveBettingDivs.length > 0) {
            liveBettingDivs.each(function () {
                jQuery(this).toggle(cashBettingEnabled);
            });

            if (cashBettingEnabled) {
                jQuery('div#data-infobox h5').text('Live betting is only available via TABtouch with Cash or telephone betting due to Federal legislation.');
            } else {
                jQuery('div#data-infobox h5').text('Live betting is not available online due to Federal legislation.');
            }

            jQuery('#propositions-form input:radio[name=sportsBetNumber]')
                .each(function () {
                    jQuery(this).prop('disabled', !cashBettingEnabled);
                });
        }
    }

    function processRedirectResponse(data) {
        if (data && data.RedirectUrl) {
            NAV.navChange(data.RedirectUrl);
            MSG.publish('bet.multi.add');
        }
    }

    function setRadioState(input) {
        input.prop('checked', input.val() == sel ? false : true);
        sel = input.val() == sel ? '' : input.val();
        updateButtonState();
        setWiPlacePopupDisplayValue();
    }

    function setWiPlacePopupDisplayValue() {

        if (jQuery('#choose-win-place-leg-popup').length > 0) {

            var description = jQuery('#bet-content .display-list').find('input:checked').attr('description');
            var runnerno = jQuery('#bet-content .display-list').find('input:checked').attr('runnerno');

            var winReturnDisplay = jQuery('#bet-content .display-list').find('input:checked').attr('win');
            jQuery('#choose-win-place-leg-popup .confirm-win-leg').html('win<br/>' + winReturnDisplay);

            var placeReturnDisplay = jQuery('#bet-content .display-list').find('input:checked').attr('place');
            if (placeReturnDisplay) {
                jQuery('#choose-win-place-leg-popup a.confirm-place-leg').html('place<br/>' + placeReturnDisplay);
                jQuery('a.confirm-place-leg').removeClass('disabled');
            }
            else {
                jQuery('#choose-win-place-leg-popup a.confirm-place-leg').html('place<br/><br/>');
                jQuery('a.confirm-place-leg').addClass('disabled');
            }

            if (runnerno) {
                jQuery('#choose-win-place-leg-popup .display-no').show();
                jQuery('#choose-win-place-leg-popup .display-no').text(runnerno);
            } else {
                jQuery('#choose-win-place-leg-popup .display-no').hide();
            }

        }
    }

    function setupPlaceInvestment(legType) {
        if (legType.length > 0) {
            var $investmentPlace = jQuery("#InvestmentPlace:input[type=hidden]");
            var $investmentWin = jQuery("#Investment");
            if (legType.val() === 'EachWay' && $investmentWin.length && $investmentPlace.length) {
                $investmentPlace.val($investmentWin.val());
            } else if ($investmentPlace.length) {
                $investmentPlace.val(null);
            }
        }
    }

    function initSingleCalculator(url, backText) {
        TT.initCommon(url, backText);
        OFFERS.initOffersHelp();
        bindLabelForRadioButtons();
        initCalculator();

        updateSelectionState();
        jQuery('ul.win-or-place-selector input').click(updateSelectionState);
        initPost(jQuery('.propose-single'), jQuery('form#calculator-form'), function(data) {
            NAV.showContent(data);
            MSG.publish('bet.single.review');
        });
    

        betSlipService.addBetSlipClickHandler(jQuery('#addToBetSlip'), function () {
            setupPlaceInvestment(jQuery('#calculator-form input:radio[name=ReturnType]:checked'));
            return jQuery("form#calculator-form, form#betting-form").serialize();
        });

        updateBetWithButtonsForCash();

    }

    function updateBetWithButtonsForCash() {     
        var cashBettingEnabled = preferencesService.cashBettingEnabled();

        var accountBetButton = jQuery('#bettingFormNext');
        if (accountBetButton) {
            accountBetButton.toggleClass('halfwidth', cashBettingEnabled);
            accountBetButton.toggleClass('fullwidth', !cashBettingEnabled);
        }

        var placeInStoreButton = jQuery('#placeInStoreButton');
        addBetSlipController.bindAddToWalletButtonClickHandler(placeInStoreButton, function () {
            var $legType = jQuery('#calculator-form input:radio[name=ReturnType]:checked');
            setupPlaceInvestment($legType);
            MSG.publish('bet.cash.selected', 'single');
            return jQuery("form#calculator-form, form#betting-form").serialize();
        });
        placeInStoreButton.toggle(cashBettingEnabled);
        
        var isLiveBetting = jQuery('#betting-form input:hidden[name=IsLiveBetting][value=True]');
        if (isLiveBetting.length > 0 && !accountBetButton.length) {
            placeInStoreButton.toggleClass('halfwidth', !cashBettingEnabled);
            placeInStoreButton.toggleClass('fullwidth', cashBettingEnabled);
            placeInStoreButton.toggleClass('left', !cashBettingEnabled);
            placeInStoreButton.toggleClass('right', !cashBettingEnabled);
            placeInStoreButton.toggleClass('l-5', cashBettingEnabled);
        }
        CALC.registerUpdateNotification(function () {
            if (isLiveBetting.length > 0) {
                accountBetButton.toggleClass('disabled', true);
            }
        });
    }

    function initSportsProposeSingle(url, backText) {
        TT.initCommon(url, backText);
        initProposeSingle();
    }

    function initProposeSingle() {

        OFFERS.initOffersHelp();

        NAV.overrideBack(function (backUrl) {
            // note: use ajaxPost direct, so as not to disable the back button (could possibly be improved)
            NAV.ajaxPost(backUrl,
                        null,
                        NAV.showContent
                        );
            return false;
        });

        initButton(jQuery('.place-bet'), function (data) {
            noback(data);
            MSG.publish('bet.single.receipt', {
                betType: 'fobsports',
                ticket: jQuery('ul').find(':contains("Ticket")').find('span.data').html(),
                fobWinValue: jQuery('ul').find(':contains("Win Bet Amount")').find('span.data').html(),
                fobPlaceValue: jQuery('ul').find(':contains("Place Bet Amount")').find('span.data').html()
            });
        });

        initPost(jQuery('.place-foo-bet'), jQuery('form#betting-form'), function (data) {
            TOTE.changeToteStarterState(TOTE.states.receipt, data);
            MSG.publish('bet.single.receipt', {
                betType: 'fobracing',
                ticket: jQuery('ul').find(':contains("Ticket")').find('span.data').html(),
                fobWinValue: jQuery('ul').find(':contains("Win Bet Amount")').find('span.data').html(),
                fobPlaceValue: jQuery('ul').find(':contains("Place Bet Amount")').find('span.data').html()
            });
        });
    }

    function initMultiCalculator(url, backText) {
        TT.initCommon(url, backText);
        bindLabelForRadioButtons();
        initCalculator();
        initMultiLegDetail();

        NAV.overrideBack(function (backUrl) {
            // note: use ajaxPost direct, so as not to disable the back button (could possibly be improved)
            NAV.ajaxPost('fob/multi/back',
                        jQuery('form#calculator-form').serialize(),
                        function () { NAV.navChange(backUrl); return false; },
                        {
                            hideOverlay: false
                        }
                        );
            return false;
        });

        initPost(jQuery('.propose-multi'), jQuery('form#calculator-form'), NAV.showContent);
        addBetSlipController.bindAddMultiToWalletButtonClickHandler(jQuery('#addFobBetToBetWallet'));
    }

    function initProposeMulti(url, backText) {
        TT.initCommon(url, backText);
        initMultiLegDetail();
        initButton(jQuery('.place-bet'), noback);
    }

    function initMultiView(url, backText) {
        TT.initCommon(url, backText);
        var legs = jQuery('#multi-bet-list');
        var href = '/fob/multi/mod';
        legs.find('input').change(function () {
            NAV.ajaxContent(href + '?sbno=' + jQuery(this).val());
        }).click(function (e) { e.stopPropagation(); });

        legs.find('label').click(function () {
            var input = jQuery(this).children('input');
            if (!input.is(':disabled')) {
                input.prop('checked', true);
                input.change();
            }
            return false;
        });
    }

    function initMultiLeg(url, backText) {
        TT.initCommon(url, backText);
    }

    //handles clicking on a race code tab on the meeting list page
    function selectorTabSelect(a, listItem, override) {
        var li = a.parent("li");

        if (override || !li.hasClass(activeClass)) {
            NAV.ajaxGet(a.attr('href'), function (data) {
                CMN.initDisplayListStyle(jQuery(listItem).html(data));
            });

            //change tab highlight
            jQuery("div.nav-info li").removeClass(activeClass);
            li.addClass(activeClass);
        }
    }

    function confirm(confDiv, subDiv, url) {
        jQuery('.sub-div').hide();
        jQuery(subDiv + ' .confirm-yes').attr('href', url);
        CMN.setDisableState(jQuery(subDiv + ' .confirm-yes'), true);
        jQuery(subDiv).show();
        CMN.showPopup(jQuery(confDiv));
    }

    // ajax get followed by a redirect to another view via navigation url
    // * u: get action link url
    // * s: url to navigate to upon success
    // * b: element to optionally disable
    // * h: optionally suppress hiding the loading overlay (false)
    function redirect(u, s, b, h) {
        b = jQuery(b);
        if (b.is('.disabled') === false) {
            CMN.setDisableState(b, false);
            NAV.ajaxGet(
                u,
                function () {
                    NAV.navChange(s);
                    return false;
                },
                { hideOverlay: (h === undefined) ? true : h }
            );
        }
        return false;
    }

    // register a click event to perform an ajax post of a form
    // * b: element that is clicked, has href to post to, will be disabled and re-enabled upon error
    // * f: form element to serialise
    // * s: success function, e.g. nav/navChange or showContent
    // * h: optionally do not hide the progress indicator (to prevent some flicker)
    function initPost(b, f, s, h) {
        b.unbind('click').click(function () {
            formPost(b, f, s, h);
            return false;
        });
    }

    // ajax post followed by a specific success action (e.g. redirect to another view)
    // synopsis: see initPost()
    function formPost(b, f, s, h) {
        if (b.is('.disabled') === false) {
            NAV.ajaxPost(
                    b.attr('href'),
                    locationDetailsAppender.addToUrlEncodedData(f.serialize()),
                    s,
                    {
                        control: b,
                        hideOverlay: (h === undefined) ? true : h
                    }
            );
        }
        return false;
    }

    function initProposeFobAccumulator(url, backText) {
        TT.initCommon(url, backText);
        OFFERS.initOffersHelp();
        jQuery('.bet-amount').click(
		    function () {
		        placeAccumulator();
		        return false;
		    }
	    );

		NAV.overrideBack(function (backUrl) {
		    NAV.ajaxPost(backUrl,null,NAV.showContent);
            return false;
        }
	    );
    }

    function confirmAccumCancelMulti() {

        if (jQuery('#hidden-currentMulti').length > 0) {
            FOB.confirm('#confirm-cancel-multi', '#ccm', '');
        }
        else {
            addAccumulator();
        }

        return false;
    }

    function initAccumulatorList(url, backText) {
        TT.initCommon(url, backText);
        initAccumulatorSelections();
        CMN.initSlideToggleHandlers();

        jQuery('a.cancel').click(function (e) {
            if (jQuery(this).is('.disabled') === false) {
                clearAccumulatorSelections();
            }
            return false;
        });

        jQuery('a.bet-amount').click(function (e) {
            if (jQuery(this).is('.disabled') === false) {
                confirmAccumCancelMulti();
            }
            return false;
        });

        NAV.overrideRefresh(function () {

            NAV.ajaxPost(jQuery('#hidden-refresh').attr('href'),
                 jQuery('form#betting-form').serialize(),
                 NAV.showContent);

            return false;
        });

        jQuery('div.black-bubble a.information').click(function (e) {
            e.preventDefault();
            CMN.scrollTo(jQuery(jQuery(this).attr('href')), 'slow');
        });
    }

    function placeAccumulator() {
        NAV.ajaxPost(jQuery('.bet-amount').attr('href'),
                    locationDetailsAppender.addToUrlEncodedData(jQuery('form#betting-form').serialize()),
                    function (data) {
                        noback(data);

                        MSG.publish('bet.accumulator.receipt', {
                            betType: 'fobsports',
                            ticket: jQuery('ul').find(':contains("Ticket")').find('span.data').html(),
                            cost: jQuery('ul').find(':contains("Bet Amount")').find('span.data').html()
                        });
                        
        });
        return false;
    }

    function addAccumulator() {
        NAV.ajaxPost(jQuery('.bet-amount').attr('href'),
                     jQuery('form#betting-form').serialize(),
                    function () {
                        NAV.navChange('#fob/accumulator/calc');
                        MSG.publish('bet.accumulator.selected');
                        return false;
                    });
        return false;
    }

    function clearAccumulatorSelections() {
        jQuery('#content .display-list').find('input:checked').attr("checked", false);
        updateAccumulatorButtonState();
        updateLegCounter();
        updateSelectedStyle();
    }

    function initAccumulatorCalculator(url, backText) {
        TT.initCommon(url, backText);
        initCalculator();
        OFFERS.initOffersHelp();

        jQuery('.bet-continue').click(
		    function () {
		        if (jQuery(this).is('.disabled') === false) {
		            proposeAccumulator();
		        }
		        return false;
		    });

        NAV.overrideBack(function (backUrl) {
            NAV.ajaxPost(jQuery('#hidden-back').attr('href'),
                     jQuery('form#accum-calculator-form').serialize(),
                     function () { NAV.navChange(backUrl); return false; });

            return false;
        });
    }

    function proposeAccumulator() {
        NAV.ajaxPost(jQuery('.bet-continue').attr('href'),
                     jQuery('form#accum-calculator-form').serialize(),
                     function(data) {
                         MSG.publish('bet.accumulator.review');
                         NAV.showContent(data);
                     });

        return false;
    }

    function initAccumulatorSelections() {
        var accums = jQuery('ul.accumulator-list');
        accums.find('input[type=radio]').change(function () {
            updateAccumulatorButtonState();
            updateLegCounter();
            updateSelectedStyle();
        }).click(function (e) { e.stopPropagation(); });

        updateAccumulatorButtonState();
        updateLegCounter();
        updateSelectedStyle();

        //Code so clicking anywhere on the li element will select/unselect the checkbox.
        accums.find('label').click(function () {
            var input = jQuery(this).children('input[type=radio]');
            if (!input.is(':disabled')) {
                input.prop('checked', true);
                input.change();
            }
        });
    }

    function updateSelectedStyle() {

        jQuery('#content .display-list').find('input').not('checked').parent().removeClass('selected');
        jQuery('#content .display-list').find('input:checked').parent().addClass('selected');
    }

    function updateLegCounter() {
        var length = 0;
        var total = 0;
        length = jQuery('#content .display-list').find('input:checked').length;
        jQuery('.number-of-legs').html(length + ' leg' + (length !== 1 ? 's' : ''));

        if (length > 0) {
            total = 1;
            jQuery('#content .display-list').find('input:checked').siblings('input[name="Return"]').each(
                function () {
                    total *= parseFloat(jQuery(this).val());
                });
        }

        jQuery('.multi-price').html(total.toFixed(2));
    }

    function updateAccumulatorButtonState() {
        var length = 0;

        length = jQuery('#content .display-list').find('input:checked').length;

        CMN.setDisableState(jQuery('a.bet-amount'), length > 1);
        CMN.setDisableState(jQuery('a.cancel'), length > 0);
    }

    function initCalculator() {
        CALC.initCommonCalculator(true);
        CALC.registerUpdateNotification(null);
        CALC.initCalculator('calculator1');
        CALC.initCalculator('calculator2');
        CALC.setCalcButtonState();
    }

    function initMultiLegDetail() {
        var items = jQuery('ul.multi-selections a');
        items.click(function () {
            NAV.ajaxGet(
                jQuery(this).attr('href'),
                processMultiLegDetail);
            return false;
        });
    }

    function processMultiLegDetail(data) {
        jQuery('#multi-leg-window #transaction-details').html(data);
        CMN.initDisplayListStyle(jQuery('#multi-leg-window ul.display-list'));
        jQuery('.popup').click(function () { jQuery('#multi-leg-window').fadeOut('fast'); });
        CMN.showPopup(jQuery('#multi-leg-window'));
    }

    function initButton(b, s) {
        b.unbind('click').click(function () {
            NAV.ajaxPost(
                b.attr('href'),
                locationDetailsAppender.addToUrlEncodedData(null),
                s);
            return false;
        });
    }

    // If a proposition radio button is currently checked, enable the relevant buttons
    function updateButtonState() {

        var enabled = false;
        enabled = jQuery('#bet-content .display-list').find('input:checked').length;

        CMN.setDisableState(jQuery('.calc-single'), enabled);
        CMN.setDisableState(jQuery('.add-to-multi'), enabled);
        CMN.setDisableState(jQuery('.add-win-to-multi'), enabled);

        var placeEnabled = enabled && jQuery('#bet-content .display-list').find('input:checked').attr('place');
        CMN.setDisableState(jQuery('.add-place-to-multi'), placeEnabled);

        if (enabled) {
            jQuery('.calc-multi,.to-single').hide();
        }
        else {
            jQuery('.calc-multi,.to-single').show();
        }
    }

    // Displays the return value corresponding to the currently selected Win/Place/Win&Place radio button
    function updateSelectionState() {
        var value = jQuery('ul.win-or-place-selector input:checked').val();
        jQuery('div.my-selections li.win-return').toggle(value != 'Place');
        jQuery('div.my-selections li.place-return').toggle(value != 'Win');
    }


    // display content but suppress the back button
    function noback(data) {
        NAV.hideBack();
        NAV.showContent(data);
    };

    function bindLabelForRadioButtons() {
        jQuery('label[for],input[type="radio"]').bind('click', function (e) { e.stopPropagation(); });
    }

    // function for handling session errors on refresh. Will just do a standard refresh instead of a post.
    function handleSessionError() {
        NAV.hideErrorPopup();
        NAV.refresh();
        return false;
    }

    return {
        initSingleCalculator: initSingleCalculator,
        initPropositions: initPropositions,
        initProposeSingle: initSportsProposeSingle,
        initMultiCalculator: initMultiCalculator,
        initMultiView: initMultiView,
        initMultiLeg: initMultiLeg,
        initProposeMulti: initProposeMulti,
        initAccumulatorList: initAccumulatorList,
        initAccumulatorCalculator: initAccumulatorCalculator,
        initProposeFobAccumulator: initProposeFobAccumulator,
        addAccumulator: addAccumulator,
        confirm: confirm,
        redirect: redirect,
        initButton: initButton,
        confirmAccumCancelMulti: confirmAccumCancelMulti,
        handleSessionError: handleSessionError,
        initRacingProposedSingle: initProposeSingle,
        setupPlaceInvestment: setupPlaceInvestment,
        updateLiveBettingForCash: updateLiveBettingForCash,
        updateBetWithButtonsForCash: updateBetWithButtonsForCash,
        initPost: initPost
    };
})(new Controllers.BetBuilder.AddBetSlip(new BetWalletService(Models.BetBuilder.BetWallet)), new BetSlipService(new BetSlipStore()), PreferencesService, new LocationDetailsAppender());


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.fobRacingCalculator = window.fobRacingCalculator = (function() {
    function initCalculator() {
        
    }

    return {
        initCalculator: initCalculator
    };
})();


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.FOBR = window.FOBR = (function() {
    var betSlipService = new BetSlipService(new BetSlipStore());
    var preferencesService = PreferencesService;
    var addBetSlipController = new Controllers.BetBuilder.AddBetSlip(new BetWalletService(Models.BetBuilder.BetWallet));
    var locationDetailsAppender = new LocationDetailsAppender();

    function preSelectProposition(propositionNumber) {
        jQuery('#' + propositionNumber).trigger("click");
    }

    function initFobRacingEventsPage(url, backText) {
        TT.initCommon(url, backText);
        jQuery(document).off('click', '.js-event-item')
            .on('click', '.js-event-item', function (e) {
                e.preventDefault();
                NAV.navChange(this.href);
            });
    }

    // ajax post followed by a specific success action (e.g. redirect to another view)
    // synopsis: see initPost()
    var formPost = function (button, form, success, hideProgressIndicator) {
        if (button.is('.disabled') === false) {
            NAV.ajaxPost(
                button.attr('href'),
                locationDetailsAppender.addToUrlEncodedData(form.serialize()),
                success,
                {
                    control: button,
                    hideOverlay: (hideProgressIndicator === undefined) ? true : hideProgressIndicator
                }
            );
        }
        return false;
    };

    var initCalculatorMarketSelection = function () {
        jQuery('ul.win-or-place-selector input').click(function () {
            var market = getMarket();
            jQuery("#BetType").val(market);
        });
    };

    var initProposeBet = function () {
        jQuery("a#bettingFormNext").click(function () {
            var $investmentPlace = jQuery("#InvestmentPlace:input[type=hidden]");
            var $investmentWin = jQuery("#Investment");
            if (isEachWay() && $investmentWin.length && $investmentPlace.length) {
                $investmentPlace.val($investmentWin.val());
            } else if ($investmentPlace.length) {
                $investmentPlace.val(null);
            }
            TOTE.createBetProposal(this);
            return false;
        });

    };
    var getMarket = function () {
        var market = jQuery('ul.win-or-place-selector input:checked').val();
        return market;
    };
    var isEachWay = function () {
        var market = getMarket();
        return market === 'EachWay';
    };

    var initFobRacingStartersPage = function (url, backText) {
        TT.initCommon(url, backText);

        CALC.registerUpdateNotification(null);

        TOTE.initButtons(false);
        initCalculatorMarketSelection();
        CALC.initCommonCalculator(false);
        CALC.initCalculator('calculator1');
        CALC.initCalculator('calculator2');
        TOTE.initBetCostPopup();
        initProposeBet();
        TOTE.initMySelectionsSection();
        TOTE.initFixedOddsSelectionButton();
        CMN.initSlideToggleHandlers();
        TOTE.initErrorWindow();
        jQuery(".hidden-calculator").hide();
        OFFERS.initOffersHelp();

        var $addToBetSlip = jQuery('#addToBetSlip');
        betSlipService.addBetSlipClickHandler(
            $addToBetSlip,
            function () {
                FOB.setupPlaceInvestment(jQuery('#betting-form input:radio[name=ReturnType]:checked'));
                return jQuery("form#betting-form").serialize();
            },
            false,
            function () {
                if (jQuery("#PyosSelectedSpecial\\.SpecialSeq").val()) {
                    ErrorController.showErrorPopup("SuperPick is not available for Bet Slip.", null);
                    return false;
                }
                return true;
            });

        var cashBettingEnabled = preferencesService.cashBettingEnabled();
        var placeInStoreButton = jQuery('#placeInStoreButton');
        addBetSlipController.bindAddToWalletButtonClickHandler(
            placeInStoreButton,
            function () {
                FOB.setupPlaceInvestment(jQuery('#betting-form input:radio[name=ReturnType]:checked'));
                MSG.publish('bet.cash.selected', 'single');
                return jQuery("form#betting-form").serialize();
            },
            function () {
                if (jQuery("#PyosSelectedSpecial\\.SpecialSeq").val()) {
                    ErrorController.showErrorPopup("SuperPick is not available for Cash Betting.", null);
                    return false;
                }
                return true;
           });
        jQuery('#bettingFormNext').toggleClass('halfwidth', cashBettingEnabled);
        jQuery('#bettingFormNext').toggleClass('fullwidth', !cashBettingEnabled);        
        placeInStoreButton.toggle(cashBettingEnabled);
    };

    return {
        initFobRacingEventsPage: initFobRacingEventsPage,
        initFobRacingStartersPage: initFobRacingStartersPage,
        isEachWay: isEachWay,
        preSelectProposition: preSelectProposition
    };
})();


/***/ }),
/* 307 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__downloadXml_legacy__ = __webpack_require__(300);
/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);



legacyReturn.GOG = window.GOG = (function() {
    var startLocationMarkerImageUrl = '../Images/Icons/blue-dot.png';

    var introNotification;
    var canCentreScreen;

    var map = null;
    var googleTabmarkers = [];
    var googleMarkerIcons = [];

    var directionsInfoWindowClassName = '.gm-iw';
    var geocoder;
    var directionsService;
    var directionsDisplay;
    var noViewBoundsChangeDirectionRenderer;
    var distanceMatrixService;
    var currentGeoLocation;
    var currentDestination;
    var infowindow;
    var iconShadow;
    var sl1CategoryCode = "SL1";
    var sl2CategoryCode = "SL2";
    var sl3CategoryCode = "SL3";
    var currentLocationMarker;
    var currentDestinationCategoryType;

    var markerIconSize;
    var markerAnchor;
    var markerOrigin;

    var nearbyTabsListLength = 10;
    var domReadyListener;

    var usersGeoLocation;
    var defaultLocation = {
        coords: {
            latitude: -31.9554,
            longitude: 115.85859
        }
    };
    var mapsReady;

    function addButton() {
        var control = jQuery('#mapfullscreen');
        control.click(function () {
            var maximiseButton = jQuery('#mapfullscreen');
            maximiseButton.toggleClass('goFullscreen');
            maximiseButton.toggleClass('goMinimise');

            var mapCanvas = jQuery("#map_container, #map_canvas");
            mapCanvas.toggleClass('fullscreen');
            resizeGoogleMap();
        });
    }

    function getCurrentLocation() {
        return currentGeoLocation;
    }

    function setUsersGeoLocation(geoLocation) {
        usersGeoLocation = geoLocation;
    }

    function initialize() {
        markerIconSize = new google.maps.Size(15, 30);
        markerAnchor = new google.maps.Point(9, 30);
        markerOrigin = new google.maps.Point(0, 0);
        canCentreScreen = false;
        CMN.addWaterMark('address', 'Other Location');
        currentDestination = null;
        var position = defaultLocation;
        if (usersGeoLocation) {
            position = usersGeoLocation;
        }
        setCurrentLocation(position);
        addToRadFunctionToNumber();
        loadMarkerImages();
        introNotification = NOTE.initTabLocatorNotification(GOG.pastInitialPopUp);

        initGoogleMapObjects();
        createGoogleMap();
        initiateDirectionServices();
        currentLocationMarker = createUsersLocationMarker();

        getLocationsFromFile("../Content/tab-location.xml");

        addButton();

        var latlng = new google.maps.LatLng(currentGeoLocation.latitude, currentGeoLocation.longitude);
        map.setCenter(latlng);
    }

    function setCurrentLocation(position) {
        if (position.coords) {
            currentGeoLocation = position.coords;
        } else if (position.lat) {
            currentGeoLocation = {
                latitude: position.lat(),
                longitude: position.lng()
            };
        } else {
            currentGeoLocation = position;
        }

    }

    function loadMarkerImages() {
        googleMarkerIcons[sl1CategoryCode] = getMarkerImage(getCssClassForCategory(sl1CategoryCode));
        googleMarkerIcons[sl2CategoryCode] = getMarkerImage(getCssClassForCategory(sl2CategoryCode));
        googleMarkerIcons[sl3CategoryCode] = getMarkerImage(getCssClassForCategory(sl3CategoryCode));
    }

    function addToRadFunctionToNumber() {
        if (!Number.prototype.toRad) {
            Number.prototype.toRad = function () {
                return this * Math.PI / 180;
            };
        }
    }

    function createGoogleMap() {
        var myOptions = {
            panControl: false,
            zoom: 12,
            minZoom: 5,
            maxZoom: 18,
            center: new google.maps.LatLng(currentGeoLocation.latitude, currentGeoLocation.longitude),
            mapTypeControl: false,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
            },
            streetViewControl: false,
            navigationControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            zoomControl: true,
            styles: [{ featureType: "poi", elementType: "labels", stylers: [{ visibility: "off"}]}] 
        };

        var mapCanvas = jQuery("#map_canvas");
        map = new google.maps.Map(mapCanvas[0], myOptions);

        google.maps.event.addListener(map, 'click', function () {
            infowindow.close();
        });

        google.maps.event.addListenerOnce(map, 'tilesloaded', function () {
            centreScreenOnMap();
            introNotification.show();
        });
    }

    function initiateDirectionServices() {
        distanceMatrixService = new google.maps.DistanceMatrixService();
        directionsService = new google.maps.DirectionsService();
        noViewBoundsChangeDirectionRenderer = directionsDisplay = new google.maps.DirectionsRenderer({
            suppressMarkers: true,
            preserveViewport: true
        });
        directionsDisplay = new google.maps.DirectionsRenderer({
            suppressMarkers: true,
            preserveViewport: false
        });

        directionsDisplay.setPanel(jQuery('#directions')[0]);
        noViewBoundsChangeDirectionRenderer.setPanel(jQuery('#directions')[0]);
    }

    function createUsersLocationMarker() {
        return new google.maps.Marker({
            position: new google.maps.LatLng(currentGeoLocation.latitude, currentGeoLocation.longitude),
            icon: {
                url: startLocationMarkerImageUrl,
                anchor: new google.maps.Point(25, 25)
            },
            map: map,
            title: name,
            zIndex: 999900000
        });
    }

    function getLocationsFromFile(file) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__downloadXml_legacy__["a" /* downloadUrl */])(file, parseXmlFlieForLocations);
    }

    function parseXmlFlieForLocations(doc) {
        var xmlDoc = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__downloadXml_legacy__["b" /* xmlParse */])(doc);
        var markers = xmlDoc.documentElement.getElementsByTagName("marker");

        googleTabmarkers = [];
        for (var i = 0; i < markers.length; i++) {
            var category = markers[i].getAttribute("category");

            var html = createTabLocationInfoHtml(markers[i]);

            var lat = markers[i].getAttribute("lat");
            var lng = markers[i].getAttribute("lng");
            var point = new google.maps.LatLng(lat, lng);

            googleTabmarkers.push(createMarker(point, markers[i].getAttribute("name"), html, category));
        }

        showAllMarkers();

        var orderedMarkers = orderedLocationsByDistance();
        generateMarkerList(orderedMarkers, nearbyTabsListLength);

        mapsReady = true;
        jQuery('#viewList').show();
    }

    function createTabLocationInfoHtml(marker) {
        var address = "<div style='width:200px;'>" + marker.getAttribute("address") + "</div>";
        var name = "<div style='width:220px;'><strong><span class='left'>" + marker.getAttribute("name") + "</span></strong></div><div style='line-height:1.5em'><span id='infoWindowDistance' class='dist loadingDistance'></span></div>";
        var currentLocation = "<div class='ur_location'><input class='go_button button' type='button'  onclick='GOG.getDirectionsFromLocation(" + marker.getAttribute("lat") + "," + marker.getAttribute("lng") + ", \"" + marker.getAttribute("category") + "\", GOG.drawDirections)' value='Get Directions!'></div>";
        return "<div id='infoWindowContent'>" + name + address + currentLocation + "</div>";
    }

    function showAllMarkers() {
        showMarkerForCategory(sl1CategoryCode);
        showMarkerForCategory(sl2CategoryCode);
        showMarkerForCategory(sl3CategoryCode);
    }

    function getMarkerImage(iconColor) {
        if (!iconColor) {
            iconColor = "default";
        }
        if (!googleMarkerIcons[iconColor]) {
            googleMarkerIcons[iconColor] = new google.maps.MarkerImage("images/icons/" + iconColor + ".png",
                markerIconSize,
                markerOrigin,
                markerAnchor);
        }
        return googleMarkerIcons[iconColor];
    }

    function getCssClassForCategory(category) {
        switch (category) {
            case sl2CategoryCode:
                return "sl2-yellow";
            case sl3CategoryCode:
                return "sl3-red";
            default:
                return "sl1-purple";
        }
    }

    function createMarker(latlng, name, html, category) {
        var contentString = html;
        var marker = new google.maps.Marker({
            position: latlng,
            icon: googleMarkerIcons[category],
            shadow: iconShadow,
            map: map,
            title: name,
            zIndex: getZindexForMarkerByLatitude(latlng.lat())
        });
        marker.mycategory = category;
        marker.myname = name;

        google.maps.event.addListener(marker, 'click', function () {
            infowindow.close();
            infowindow.setContent(contentString);
            infowindow.open(map, marker);

            if (jQuery(directionsInfoWindowClassName).length > 0) {
                noViewBoundsChangeDirectionRenderer.setMap(noViewBoundsChangeDirectionRenderer.getMap());
                directionsDisplay.setMap(directionsDisplay.getMap());
            }


            google.maps.event.removeListener(domReadyListener);
            domReadyListener = google.maps.event.addListener(infowindow, 'domready', function () {
                getDirectionsFromLocation(latlng.lat(), latlng.lng(), category, function (response) {
                    var legs = response.routes[0].legs;
                    var distanceMetres = 0;
                    for (var j = 0; j < legs.length; j++) {
                        distanceMetres += legs[j].distance.value;
                    }

                    var distance = Math.round(distanceMetres / 100) / 10;

                    var span = jQuery('#infoWindowDistance');
                    span.html('(' + distance + ' kms)');
                    span.removeClass('loadingDistance');
                    jQuery('#infoWindowContent br').remove();
                });
            });
        });

        return marker;
    }

    function getDirectionsFromLocation(slat, slong, tabType, callback) {
        var lat = parseFloat(slat);
        var lng = parseFloat(slong);
        var destination = new google.maps.LatLng(lat, lng);
        destination.category = tabType;
        var origin = currentGeoLocation.latitude + ',' + currentGeoLocation.longitude;

        var request = {
            origin: origin,
            destination: destination,
            travelMode: google.maps.TravelMode['DRIVING']
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                callback(response, tabType, destination);
            }
        });
    }

    function drawDirections(response, tabType, destination, directionRenderService) {
        clearDirections();
        if (jQuery('#map_container').is(":visible")) {
            jQuery('#viewDirectionButton').show();
        }
        if (!directionRenderService) {
            directionRenderService = directionsDisplay;
            infowindow.close();
        }
        directionRenderService.setMap(map);
        directionRenderService.setDirections(response);

        setTimeout(function () {
            jQuery('#directions img:first').attr('src', startLocationMarkerImageUrl).css("width", "3em").css("height", "3em");
            jQuery('#directions img:last').attr('src', "images/icons/" + getCssClassForCategory(tabType) + ".png").css("width", "1.5em").css("height", "3em");
        }, 500);



        currentDestinationCategoryType = tabType;
        currentDestination = destination;
    }

    function geocode(query) {
        infowindow.close();
        geocoder = new google.maps.Geocoder;
        if (jQuery.trim(query).length > 0) {
            var address = query + ", Western Australia, Australia";

            geocoder.geocode({
                'address': address,
                'partialmatch': true
            }, processGeocodeResult);
        }
    }

    function processGeocodeResult(results, status) {
        if (status == 'OK' && results.length > 0) {
            updateLocationOnMap(results[0].geometry.location);
        }
    }

    function updateFromCurrentLocation(position, dontGoToMap, supressTabListUpdate) {
        updateLocationOnMap(new google.maps.LatLng(position.coords.latitude, position.coords.longitude), dontGoToMap, supressTabListUpdate);
    }

    function updateLocationOnMap(latlng, dontGoToMap, supressTabListUpdate) {
        setCurrentLocation(latlng);

        currentLocationMarker.setPosition(latlng);

        if (!supressTabListUpdate) {
            generateMarkerList(orderedLocationsByDistance(), nearbyTabsListLength);
        }

        if (!dontGoToMap) {
            clearDirections();
            viewMap();
            map.setCenter(latlng);
        }
        else if (currentDestination && (directionsDisplay.getMap() || noViewBoundsChangeDirectionRenderer.getMap()) && jQuery('#map_container').is(':visible') && jQuery(directionsInfoWindowClassName).length < 1) {
            getDirectionsFromLocation(currentDestination.lat(), currentDestination.lng(), currentDestination.category, function (response, tabType, destination) {
                drawDirections(response, tabType, destination, noViewBoundsChangeDirectionRenderer);
                directionsDisplay.setMap(null);
            });
        }
    }

    function getZindexForMarkerByLatitude(lat) {
        return Math.round(lat * -100000) << 5;
    }

    function viewMap(dontCentreOnMap) {
        jQuery('#map_container, #tabTypeSelectionContainer').show();
        jQuery('#directions, #viewMapButton').hide();
        jQuery('#location_list').hide();
        if (jQuery.trim(jQuery('#directions').html()).length > 0) {
            jQuery('#viewDirectionButton').show();
        }

        resizeGoogleMap();
        if (!dontCentreOnMap) {
            centreScreenOnMap();
        }
    }

    function centreScreenOnMap(complete) {
        if (canCentreScreen) {
            jQuery('html:not(:animated),body:not(:animated)').animate({ scrollTop: jQuery('#anchor').offset().top }, 'fast', null, complete);
        }
    }

    function resizeGoogleMap() {
        if (map) {
            google.maps.event.trigger(map, 'resize');
        }
    }

    function toggleVisible(category) {
        var isVisible = false;

        for (var i = 0; i < googleTabmarkers.length; i++) {
            if (googleTabmarkers[i].mycategory === category) {
                isVisible = (googleTabmarkers[i].getVisible()) === false;
                googleTabmarkers[i].setVisible(isVisible);
            }
        }

        if (!isVisible) {
            if (jQuery('#map_container').is(':visible')) {
                var mapContainer = jQuery('#map_container').hide();
            }

            setTimeout(function () {
                if (mapContainer) {
                    mapContainer.show();
                }
                centreScreenOnMap();
            }, 100);
        }

        setCategoryCheckBox(category, isVisible);

        return isVisible;
    }

    function showMarkerForCategory(category) {
        for (var i = 0; i < googleTabmarkers.length; i++) {
            if (googleTabmarkers[i].mycategory === category) {
                googleTabmarkers[i].setVisible(true);
            }
        }

        setCategoryCheckBox(category, true);
    }

    function setCategoryCheckBox(category, isChecked) {
        jQuery('#' + category + 'box').prop('checked', isChecked);
    }

    function boxclick(category) {
        if (!toggleVisible(category) && currentDestinationCategoryType === category) {
            clearDirections();
        }

        infowindow.close();
        generateMarkerList(orderedLocationsByDistance(), nearbyTabsListLength);
    }

    function loadLocationInfoBox(i) {
        viewMap();
        google.maps.event.trigger(googleTabmarkers[i], "click");
    }

    var googleMatrixDestinationCount = 0;

    function canUpdateLocation() {
        return googleMatrixDestinationCount < 80;
    }

    function generateMarkerList(orderedMarkers) {
        if (orderedMarkers.length > 0) {

            var elementCount = Math.min(nearbyTabsListLength + 10, orderedMarkers.length);

            var destinations = new Array();
            for (var i = 0; i < elementCount; i++) {
                destinations.push(orderedMarkers[i].marker.getPosition());
            }

            var origins = new Array();
            origins.push(new google.maps.LatLng(currentGeoLocation.latitude, currentGeoLocation.longitude));

            googleMatrixDestinationCount += elementCount;

            distanceMatrixService.getDistanceMatrix({
                destinations: destinations,
                origins: origins,
                travelMode: google.maps.TravelMode['DRIVING']
            },
                function (response) {
                    if (response) {
                        setTimeout(function () {
                            googleMatrixDestinationCount -= elementCount;
                        }, 10000);

                        var distances = response.rows[0].elements;
                        var travellingDistanceOrder = new Array();
                        for (var j = 0; j < distances.length; j++) {
                            if (distances[j].status !== 'ZERO_RESULTS') {
                                orderedMarkers[j].dist = Math.round(distances[j].distance.value / 100) / 10;
                                addMarkerToOrderedList(travellingDistanceOrder, orderedMarkers[j]);
                            }
                        }

                        populateList(travellingDistanceOrder);
                    }
                });
        } else {
            jQuery("#tab_list").html('');
        }
    }

    function populateList(markers) {
        var elementCount = Math.min(nearbyTabsListLength, markers.length);
        var tabList = jQuery("#tab_list");
        tabList.html('');
        for (var i = 0; i < elementCount; i++) {
            var cat = markers[i].marker.mycategory;
            var cssClass = getCssClassForCategory(cat);


            tabList.append('<a href="javascript:GOG.loadLocationInfoBox(' + markers[i].idx + ')"><span class="' + cssClass + '"><\/span>' + markers[i].marker.myname + ' <span style="float:right" >' + markers[i].dist + ' kms<\/span><\/a><br>');
        }
    }

    function orderedLocationsByDistance() {
        var showTabTypes = new Array();
        jQuery('#tabTypeSelectionContainer input:checked').each(function () {
            showTabTypes.push(jQuery(this).attr('id').substr(0, 3));
        });

        var orderedMarkers = new Array();
        for (var i = 0; i < googleTabmarkers.length; i++) {
            if (jQuery.inArray(googleTabmarkers[i].mycategory, showTabTypes) > -1) {
                var markerLat = parseFloat(googleTabmarkers[i].getPosition().lat());
                var markerLng = parseFloat(googleTabmarkers[i].getPosition().lng());

                var dist = getDistanceBetweenGeoLocations(markerLat, markerLng, currentGeoLocation.latitude, currentGeoLocation.longitude);
                var currentMarker = {
                    dist: dist,
                    marker: googleTabmarkers[i],
                    idx: i
                };

                addMarkerToOrderedList(orderedMarkers, currentMarker);
            }
        }

        return orderedMarkers;
    }

    function addMarkerToOrderedList(orderedMarkers, newMarker) {
        var j = 0;
        while (true) {
            if (orderedMarkers[j] == undefined) {
                orderedMarkers[j] = newMarker;
                break;
            } else if (orderedMarkers[j].dist > newMarker.dist) {
                var temp = orderedMarkers[j];
                orderedMarkers[j] = newMarker;
                newMarker = temp;
            }

            j++;
        }

        return orderedMarkers;
    }

    function getDistanceBetweenGeoLocations(startLat, startLong, endLat, endLong) {
        var radiusOfEarth = 6371; /* km */
        var dLat = (endLat - startLat).toRad();
        var dLon = (endLong - startLong).toRad();
        startLat = startLat.toRad();
        endLat = endLat.toRad();

        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(startLat) * Math.cos(endLat);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return Math.floor(radiusOfEarth * c * 100) / 100;
    }

    function clearDirections() {
        noViewBoundsChangeDirectionRenderer.setMap(null);
        directionsDisplay.setMap(null);
        jQuery('#directions').html('');
        jQuery('#viewDirectionButton').hide();
    }

    function initGoogleMapObjects() {
        infowindow = new google.maps.InfoWindow({
            maxWidth: 300
        });

        google.maps.event.addListener(infowindow, 'clickclose', function () {
            infowindow.close();
        });

        googleMarkerIcons["default"] = new google.maps.MarkerImage("images/icons/sl1-purple.png",
                        markerIconSize,
                        markerOrigin,
                        markerAnchor);
        /* Marker sizes are expressed as a Size of X,Y
        where the origin of the image (0,0) is located
        in the top left of the image.

        Origins, anchor positions and coordinates of the marker
        increase in the X direction to the right and in
        the Y direction down.*/

        iconShadow = new google.maps.MarkerImage('images/icons/pin-shadow.png',
        /* The shadow image is larger in the horizontal dimension
        while the position and offset are the same as for the main image. */
        new google.maps.Size(15, 20),
        new google.maps.Point(0, 0),
        new google.maps.Point(1, 15));
        /* Shapes define the clickable region of the icon.
        The type defines an HTML &lt;area&gt; element 'poly' which
        traces out a polygon as a series of X,Y points. The final
        coordinate closes the poly by connecting to the first
        coordinate. */
    }

    function closeInfoWindow() {
        infowindow.close();
    }

    function pastInitialPopUp() {
        canCentreScreen = true;
        centreScreenOnMap();
    }

    return {
        setUsersGeoLocation: setUsersGeoLocation,
        geocode: geocode,
        boxclick: boxclick,
        loadLocationInfoBox: loadLocationInfoBox,
        initialise: initialize,
        getDirectionsFromLocation: getDirectionsFromLocation,
        viewMap: viewMap,
        updateFromCurrentLocation: updateFromCurrentLocation,
        drawDirections: drawDirections,
        canUpdateLocation: canUpdateLocation,
        getCurrentLocation: getCurrentLocation,
        resizeGoogleMap: resizeGoogleMap,
        getDistanceBetweenGeoLocations: getDistanceBetweenGeoLocations,
        closeInfoWindow: closeInfoWindow,
        pastInitialPopUp: pastInitialPopUp
    };
} ());


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

var requireExternal = __webpack_require__(37);
var defineExternal = __webpack_require__(68);

__webpack_require__.e/* require.ensure */(1).then((function() {
    defineExternal('rx', function() { return __webpack_require__(54); });
    defineExternal('react', function() { return __webpack_require__(91); });
    defineExternal('react-dom', function() { return __webpack_require__(90); });
    defineExternal('rwwa-knockout', function() { return __webpack_require__(406); });
    defineExternal('rwwa-native-interop', function() { return __webpack_require__(402); });
    defineExternal('rwwa-rx-state-machine', function() { return __webpack_require__(50); });
    defineExternal('rwwa-rest', function() { return __webpack_require__(93); });
    defineExternal('rwwa-host-signals', function() { return __webpack_require__(401); });
    defineExternal('rwwa-analytics', function() { return __webpack_require__(188); });
}).bind(null, __webpack_require__)).catch(__webpack_require__.oe);

defineExternal('moment', function() { return __webpack_require__(39); });
defineExternal('immutable', function() { return __webpack_require__(49); });

function promiseRequire(url) {
    return new Promise(function(resolve, reject) {
        requireExternal([url], resolve, function(err) {  
                requireExternal.undef(err.requireModules[0]);
                reject(err);
            }
        );
    });
}

legacyReturn.ModalService = window.ModalService = {
    deposit: function () {
        var modal = __webpack_require__(48);

        var factory = function() {
            return promiseRequire("/$_/accountDeposit/content/index.js")
                .then(function (module) {
                    return function (el) {
                        return module.run(el, {host: "/$_/accountDeposit/"});
                    }
                });
        }

        modal.open("Deposit", { name: "tt-remote", params: { factory: factory }  });
    },

    accountActivity: function() {
        var modal = __webpack_require__(48);
        modal.open();
    },

    raceForm: function (raceKey) {
        var modal = __webpack_require__(48);
        var factory = function() {
            return promiseRequire("/$_/racingform/content/index.js")
                .then(function(module) { return module.raceLevel(raceKey) });
        }
        modal.open("Giddy-Up", { name: "tt-remote", params: { factory: factory } });
    },

    giddyUpGoodThings: function (date) {
        var modal = __webpack_require__(48);
        var factory = function() {
            return promiseRequire("/$_/racingform/content/index.js")
                .then(function(module) { return module.goodThings(date) });
        }
        modal.open("Giddy-Up Good Things", { name: "tt-remote", params: { factory: factory } });
    }
};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.Models = window.Models = window.Models || {};
window.namespace(window.Models, "Models");


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

window.namespace = function (obj, parentName) {
    var addNamespace = function (namespaceName) {
        var parts = namespaceName.split('.'),
        parent = obj,
        iterator;

        // strip redundant leading global
        if (parts[0] === parentName) {
            parts = parts.slice(1);
        }

        for (iterator = 0; iterator < parts.length; iterator += 1) {
            // create a property if it doesn't exist
            if (typeof parent[parts[iterator]] === "undefined") {
                parent[parts[iterator]] = {};
            }
            parent = parent[parts[iterator]];
        }
        return parent;
    };
    obj.namespace = addNamespace;
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.OFFERS = window.OFFERS = (function() {
    function initOffersHelp() {
        var buttonClass = ".js-offers-button";
        var offersPopup = jQuery('.js-offers-popup');
        jQuery(document).off("click", buttonClass)
                    .on("click", buttonClass, function (e) {
            e.preventDefault();
            CMN.showPopup(offersPopup);
        });

        offersPopup.click(function ()
        {
            offersPopup.fadeOut('fast');
        });
    }

    return { initOffersHelp: initOffersHelp };
})();


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.POPUP = window.POPUP = new (function() {
    var self = this;

    var popupConfirmMsg = 'popup.ConfirmClick';
    var popupCancelMsg = 'popup.CancelClick';
    self.BUTTONTYPE = {
        CONFIRMCANCEL: "confirmCancel",
        Ok: "ok",
        NONE: "none"
    };

    self.pageProvider = function() {
        return {
            popUpWindow: jQuery('#popup-window'),
            confirmCancelButtonGroup: jQuery('#confirm-cancel-button-group'),
            OkButtonGroup: jQuery('#okButtonGroup'),
            closeButton: jQuery('#popup-window .close'),
            confirmButton: jQuery('#confirmCancelButtonGroup').find('#popup-confirm-button'),
            cancelButton: jQuery('#confirmCancelButtonGroup').find('#popup-cancel-button'),
            confirmOkButton: jQuery('#okButtonGroup .close'),
            popupHeaderElement: jQuery('#popup-header-text'),
            popupMessageElement: jQuery('#popup-message-text'),
            popupIconErrorElement: jQuery('#popup-icon-error'),
            popupIconWarningElement: jQuery('#popup-icon-warning'),
            buttonGroups: jQuery('.popup-button-group'),
            messageContainer: jQuery('#messageContainer')
        };
    };

    self.init = function() {
        var page = self.pageProvider();
        page.closeButton.click(function() {
            page.popUpWindow.fadeOut('fast');
            page.buttonGroups.hide();
        });

        page.confirmButton.click(function(e) {
            e.preventDefault();
            MSG.publish(popupConfirmMsg);
            page.OkButtonGroup.hide();
            page.confirmCancelButtonGroup.hide();
        });

        page.cancelButton.click(function() {
            MSG.publish(popupCancelMsg);
            page.OkButtonGroup.hide();
            page.confirmCancelButtonGroup.hide();
        });
    };

    MSG.subscribe('popup.showPopUp', function(data) {
        if (data) {
            show(data);
        }
    });

    function show(data) {
        var page = self.pageProvider();
        page.buttonGroups.hide();
        page.popupIconErrorElement.hide();
        page.popupIconWarningElement.hide();

        data.confirmButtonText && page.confirmButton.html(data.confirmButtonText);
        data.cancelButtonText && page.cancelButton.html(data.cancelButtonText);

        page.popupHeaderElement.html(data.headerText || '');
        page.popupMessageElement.html(data.messageText || '');
        (data.isError === true) && page.popupIconErrorElement.show();
        (data.isWarning === true) && page.popupIconWarningElement.show();

        if (data.buttonType !== self.BUTTONTYPE.NONE) {
            jQuery('#' + data.buttonType + 'ButtonGroup').show();
        }

        CMN.showPopup(page.popUpWindow);

        data.confirmCallback && MSG.subscribe(popupConfirmMsg, data.confirmCallback);
    }
});


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

/**
 * Dependencies:
 *      ["jQuery", "Nav", "Router", "LocationDetailsAppender"]
 */
legacyReturn.SPECIALS = window.SPECIALS = (function(locationDetailsAppender) {
    var sel = '';
    var activeClass = "ui-state-active";

    var narrowScreenMode = false;

    function scrollToElement(element, scrollOffset) {
        var elementOffset = element.offset().top;
        var scrollTo = elementOffset + scrollOffset;
        jQuery('html,body').animate({ scrollTop: scrollTo }, 500);

        return false;
    }

    function getWidth() {
        if (self.innerWidth) {
            return self.innerWidth;
        }

        if (document.documentElement && document.documentElement.clientWidth) {
            return document.documentElement.clientWidth;
        }

        if (document.body) {
            return document.body.clientWidth;
        }
    }

    function isNarrowScreen() {
        var windowWidth = getWidth();
        return windowWidth < 768;
    }

    function hideAllDetails() {
        // Hide all offer details.
        jQuery('.special-offer .terms').hide();
        jQuery('.offer-details').hide();
    }

    // ajax post followed by a specific success action (e.g. redirect to another view)
    // synopsis: see initPost()
    function formPost(b, f, s, h) {
        if (b.is('.disabled') === false) {
            NAV.ajaxPost(
                    b.attr('href'),
                    locationDetailsAppender.addToUrlEncodedData(f.serialize()),
                    s,
                    {
                        control: b,
                        hideOverlay: (h === undefined) ? true : h
                    }
            );
        }
        return false;
    }

    function processRedirectResponse(data) {
        if (data && data.RedirectUrl) {
            window.location.hash = data.RedirectUrl.replace("/#", "#");
        }
    }

    //handles clicking on a race code tab on the meeting list page
    function selectorTabSelect(a, listItem, override) {
        var li = a.parent("li");

        if (override || !li.hasClass(activeClass)) {
            NAV.ajaxGet(a.attr('href'), function (data) {
                CMN.initDisplayListStyle(jQuery(listItem).html(data));
            });

            //change tab highlight
            jQuery("div.nav-info li").removeClass(activeClass);
            li.addClass(activeClass);
        }
    }

    function matchHeightsOfOffersOnRow() {
        var $offerRow = jQuery('.special-offer-row');
        $offerRow.each(function () {
            var $this = jQuery(this),
                maxH4Height = -1,
                maxPHeight = -1,
                maxIconHeight = -1;

            $this.find('.special-offer h4').each(function(i) {
                var $this = jQuery(this);
                if (maxH4Height < $this.height()) {
                    maxH4Height = $this.height();
                }
            });
            $this.find('.special-offer h4').height(maxH4Height);

            $this.find('.special-offer > p').each(function (i) {
                var $this = jQuery(this);
                if (maxPHeight < $this.height()) {
                    maxPHeight = $this.height();
                }
            });
            $this.find('.special-offer > p').height(maxPHeight);

            $this.find('.special-offer .offer-icon').each(function (i) {
                var $this = jQuery(this);
                if (maxIconHeight < $this.height()) {
                    maxIconHeight = $this.height();
                }
            });
            $this.find('.special-offer .offer-icon').height(maxIconHeight);
        });
    }

    function autoHeightOffersOnRow() {
        jQuery('.special-offer h4').height('auto');
        jQuery('.special-offer > p').height('auto');
        jQuery('.special-offer .offer-icon').height('auto');
    }

    function initNextSpecials(url, backText) {
        var listItem = 'div#next-specials-list';
        var sel = "#nextspecials-class-tabs li.ui-state-active a";
        TT.initCommon(url, backText);

        jQuery("#nextspecials-class-tabs a").click(function (e) {
            NAV.navChange(jQuery(this).data('hash-url'));
            return false;
        });

        jQuery('a.special-bet-now').click(function (e) {
            e.preventDefault();
            return formPost(jQuery('a.special-bet-now'),
                    jQuery('form#next-specials-form'),
                    processRedirectResponse,
                    false);
        });

        selectorTabSelect(jQuery(sel), listItem, true);
    }

    function initSpecialsList(url, backText) {
        narrowScreenMode = isNarrowScreen();
        hideAllDetails();

        if (narrowScreenMode === true) {
            autoHeightOffersOnRow();
        } else {
            matchHeightsOfOffersOnRow();
        }

        jQuery('a.special-bet-now').click(function (e) {
            e.preventDefault();

            jQuery('#bet-now-sequence').val(jQuery(this).data('special-seq'));

            formPost(jQuery('a.special-bet-now'),
                    jQuery('form#next-specials-form'),
                    processRedirectResponse,
                    false);
            return false;
        });

        jQuery('.special-offer').on('click', '.button.ghost.white', function (e) {

            if (this.id === "powerplay-terms-button") {
                //don't do anything for SuperPick
                return;
            }
            e.preventDefault();

            var $this = jQuery(this);
            var scrollOffset = 0;
            var openingOfferDetails = false;

            // Are we narrow screen?
            if (narrowScreenMode === true) {
                // Yes. Get the relevent offer terms.
                var $offerTerms = $this.closest('.list-options').next('.terms');

                // Set the opening flag.
                openingOfferDetails = !$offerTerms.is(':visible');

                // Toggle the terms.
                $offerTerms.slideToggle();
            } else {
                // No. Get the relevent offer.
                var $clickedOfferDetails = jQuery('#offerid-' + $this.data('offerid'));

                // Are there any visible siblings?
                var $visibleSiblings = $clickedOfferDetails.siblings(':visible');
                if ($visibleSiblings.length > 0) {
                    // Yes, hide them and show this one.
                    $visibleSiblings.hide();
                    $clickedOfferDetails.show();
                } else {
                    // No. Are we opening this one?
                    openingOfferDetails = !$clickedOfferDetails.is(':visible');
                    if (openingOfferDetails === true) {
                        // Yes. Get the top of next special divider.
                        var $nextVisibleTop = $clickedOfferDetails.parent().next('.special-divider').offset().top;

                        // Iterate through all the open terms (there should be zero or one, but this will rectify any errors)
                        jQuery('.offer-details:visible').each(function () {
                            var $element = jQuery(this);

                            // If this open term is higher on page than the one we're opening, store its offset so we scroll to the correct position.
                            if ($element.offset().top < $nextVisibleTop) {
                                scrollOffset -= $element.height();
                            }
                            $element.slideUp();
                        });
                    }

                    // Toggle the selected details.
                    $clickedOfferDetails.slideToggle();
                }
            }

            // Are we opening?
            if (openingOfferDetails === true) {
                // Yes. Scroll to the special offer.
                var $specialOffer = $this.closest('.special-offer');
                scrollToElement($specialOffer, scrollOffset);
            }
        });
    }

    jQuery(window).resize(function () {
        var isNarrow = isNarrowScreen();
        if (isNarrow === true && narrowScreenMode === false) {
            hideAllDetails();
            autoHeightOffersOnRow();
            narrowScreenMode = true;
        } else if (isNarrow === false && narrowScreenMode === true) {
            matchHeightsOfOffersOnRow();
            narrowScreenMode = false;
        }
    });

    return {
        initNextSpecials: initNextSpecials,
        initSpecialsList: initSpecialsList
    };
})(new LocationDetailsAppender());


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

Models.namespace('Models.BetSlip');
Models.BetSlip.SummaryPanel = (function () {
    "use strict";
    //Selectors
    var numberOfBetsSelector = '#numberOfBets',
        totalCostSelector = '#totalBetSlipCost';

    //Accessors
    var setNumberOfBets = function(numberOfBets) {
        jQuery(numberOfBetsSelector).text(numberOfBets + " Bet" + (numberOfBets == 1 ? "" : "s"));
    },

    setTotalCost = function (totalCost) {
        if (_.isNumber(totalCost)) {
            jQuery(totalCostSelector).text('$' + totalCost.toFixed(2));
        }
    };

    return {
        setNumberOfBets: setNumberOfBets,
        setTotalCost: setTotalCost
    };
})();


/***/ }),
/* 315 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_requireExternal__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_requireExternal___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_requireExternal__);
/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);



legacyReturn.TOTE = window.TOTE = (function(requireExternal, addBetSlipController, calculatorModel, errorController, toteBettingService, calculatorController, betSlipService, preferencesService, locationDetailsAppender) {

    var states = { none: "", allup: "allup", calc: "calc", confirm: "confirm", receipt: "receipt" };

    //common strings
    var disabled = "disabled", selected = "selected", checked = "checked", activeClass = "ui-state-active", startersFormValueExpanded = "";

    var showClosedMeetings = true;
    var selectorClosedMeetings = '#meetings-list .finished';

    function getTotePyos() {
        return new Promise(function(resolve) {
            __webpack_require__.e/* require */(3).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(404)]; (function(viewModel) {
                resolve(viewModel);
            }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);
        });
    }

    function initToteMeetings(url, backText) {
        var listItem = 'div#meetings-list';
        var sel = "#race-class-tabs li.ui-state-active a";
        TT.initCommon(url, backText);

        jQuery("#meetings-list").on("click", ".meetings-list li", function (e) {
            e.preventDefault();
            NAV.navChange(jQuery(this).children("a.meeting-info").attr("href"));
        });

        jQuery("#race-class-tabs a").click(function(e) {
            NAV.navChange(jQuery(this).data('hash-url'));
            return false;
        });

        jQuery("div.date-selector a").click(function() {
            NAV.navChange(jQuery(this).attr('href'));
            return false;
        });

        updateShowHideMeetings();
        jQuery('.button-group a.button.hide-closed')
            .click(function(e) {
                e.preventDefault();
                if (jQuery(this).is('.disabled') === false) {
                    showClosedMeetings = !showClosedMeetings;
                    updateShowHideMeetings();
                    if (showClosedMeetings) {
                        jQuery(selectorClosedMeetings).slideDown();
                    } else {
                        jQuery(selectorClosedMeetings).slideUp();
                    }
                }
            });

        selectorTabSelect(jQuery(sel), listItem, true);
    }

    function updateShowHideMeetings() {
        CMN.setDisableState(jQuery(".button-group a.button.hide-closed#show-closed"), !showClosedMeetings);
        CMN.setDisableState(jQuery(".button-group a.button.hide-closed#hide-closed"), showClosedMeetings);
    }

    function initNextEvents(url, backText) {
        var listItem = 'ul#next-events-list';
        var sel = "#nextevents-class-tabs li.ui-state-active a";
        TT.initCommon(url, backText);

        jQuery("#nextevents-class-tabs a").click(function(e) {
            e.preventDefault();
            selectorTabSelect(jQuery(this), listItem);
            return false;
        });

        selectorTabSelect(jQuery(sel), listItem, true);
    }

    function refreshToteStarterList(url, backText, isQuinella) {
        initToteStarterList(url, backText, isQuinella, false, true);
    }

    function initToteStarterList(url, backText, isQuinella, isAllUp, isRefresh) {
        if (!isRefresh) {
            TT.initCommon(url, backText);
        }
        initPoolSelector();
        initPoolSelection();
        initBetTypeChange(isQuinella, isAllUp);
        OFFERS.initOffersHelp();
        initDrawerOption();
        showborder();
        CMN.initSlideToggleHandlers();
        initErrorWindow();
    }

    function initErrorWindow() {
        jQuery('#error-window').on('click', '.refresh-starters', {}, function(e) {
            e.preventDefault();
            refreshStarters();
        });
    }

    function initShortformToggle() {
        jQuery(".form-button").click(onClickSilk);
        jQuery(".form-button").each(function() {
            if (jQuery(this).siblings(".shortform").children().length > 0) {
                jQuery(this).css('cursor', 'pointer');
            } else {
                jQuery(this).removeClass('form-button');
            }
        });

        jQuery('.form-long .formlist').hide();
        jQuery('.form-long h6').click(function() {
            jQuery(this).toggleClass('expanded');
            jQuery(this).next('.formlist').slideToggle();
        });
    }

    function onClickSilk(e) {
        e.stopPropagation();
        if (jQuery(this).siblings(".shortform").children().length > 0) {
            jQuery(this).siblings(".shortform").slideToggle(400, showborder);
            if (jQuery(this).is(':visible')) {
                CMN.redrawFix(jQuery(this));
            }
            closeDrawer();
        }
    }

    function initDrawerOption() {
        jQuery('body').click(function() {
            closeDrawer();
        });
        jQuery('.drawer-options li:last').addClass('last');


        jQuery('a.drawer').click(function(e) {
            e.preventDefault();

            if (jQuery(this).is(":hidden")) {
                return;
            }

            jQuery(this).toggleClass('open');

            if (jQuery(this).hasClass('open')) {
                jQuery(".drawer-options").slideDown('fast');
            } else {
                jQuery(".drawer-options").slideUp('fast');
            }

            e.stopPropagation();

            var p = jQuery(".pools");
            if (p.is(":visible")) {
                p.slideUp('fast');
            }
        });

        jQuery('a.drawer-button').click(function(e) {
            e.preventDefault();
            jQuery(".drawer-options").delay(1500).slideUp(300);
            jQuery('a.drawer').toggleClass('open');
        });

        jQuery('a.drawer-button.quaddie-prov-divs').click(function(e) {
            e.preventDefault();
            jQuery('a.drawer-button.quaddie-prov-divs').toggleClass('active-option');
        });

        jQuery('a.drawer-button.double-prov-divs').click(function(e) {
            e.preventDefault();
            jQuery('a.drawer-button.double-prov-divs').toggleClass('active-option');
        });

        jQuery('a.drawer-button.all-form').click(function(e) {
            e.preventDefault();
            jQuery('a.drawer-button.all-form').toggleClass('active-option');
        });

        jQuery(function() {
            jQuery(".all-form").click(function(e) {
                e.preventDefault();
                var button = jQuery(this);
                starterSlideToggle('.shortform', button);
            });

            jQuery(".double-prov-divs").click(function(e) {
                e.preventDefault();
                var button = jQuery(this);
                starterSlideToggle('.provisional-dividends-double', button);
            });

            jQuery(".quaddie-prov-divs").click(function(e) {
                e.preventDefault();
                var button = jQuery(this);
                starterSlideToggle('.provisional-dividends-quaddie', button);
            });
        });

    }

    function starterSlideToggle(slideClass, button) {
        if (button.hasClass('active-option')) {
            jQuery(slideClass).show();
            if (button.hasClass('bottom')) {
                jQuery('html:not(:animated),body:not(:animated)').animate({ scrollTop: 50000 }, 2, null);
            }

        } else {
            jQuery(slideClass).hide();
        }

        jQuery(slideClass).each(function() { showborder(jQuery(this)); });
    }

    function setAllForm() {
        if ((jQuery(".shortform:visible").length < jQuery(".shortform").length) || (jQuery(".shortform").length == 0)) {
            jQuery('a.drawer-button.all-form').removeClass("active-option");
        } else {
            jQuery('a.drawer-button.all-form').addClass("active-option");
        }
    }

    function showborder(shortform) {
        if (!shortform) {
            shortform = jQuery(this);
        }

        if (shortform.is(':visible')) {
            CMN.redrawFix(shortform);
        }

        setAllForm();

        shortform.parent().children('.bottom-border').removeClass('visible');
        shortform.parent().children(".ex-option").each(function() {
            if (jQuery(this).parent().children(".ex-option").is(":visible")) {
                jQuery(this).parent().children('.bottom-border').addClass('visible');
            }
        });

    };

    function closeDrawer() {
        jQuery(".drawer-options").slideUp('fast');
        jQuery("a.drawer").removeClass('open');
    }

    function initToteMystery(url, backText, isForCustomise) {
        TT.initCommon(url, backText);
        initMysteryCalculator();
        OFFERS.initOffersHelp();
        jQuery(".calculator-buttons").removeAttr("style");
        jQuery("a#bettingFormNext").click(function(e) {
            e.preventDefault();
            if (jQuery(this).is('.disabled') === false) {
                NAV.ajaxPost(jQuery(this).attr('href'),
                    jQuery('form#mystery').serialize(),
                    processMysteryResponse,
                    {
                        control: jQuery('#mystery-bet')
                    }
                );
            }
            return false;
        });


        jQuery("#addToBetSlip").click(function(e) {
            e.preventDefault();
            if (jQuery(this).is('.disabled') === false) {
                var numberOfBets;
                if (isForCustomise == undefined || isForCustomise === false) {
                    numberOfBets = jQuery("#NumberOfBets").val();
                } else {
                    numberOfBets = jQuery("#numberOfBets").val();
                }
                var $addToBetSlip = jQuery('#addToBetSlip');
                betSlipService.addBatchBetsToBetSlip(numberOfBets, $addToBetSlip.attr('href'), jQuery("form#mystery").serialize(), $addToBetSlip.attr('data-betslipurl'));
            }
        });

        updateBetWithButtonsForCash();
    }

    function updateBetWithButtonsForCash() {
        var cashBettingEnabled = preferencesService.cashBettingEnabled();
        var placeInStoreButton = jQuery('#placeInStoreButton');
        addBetSlipController.bindAddToWalletButtonClickHandler(placeInStoreButton, function() {
            MSG.publish('bet.cash.selected', 'single');
            return jQuery("form#mystery").serialize();
        });
        jQuery('#bettingFormNext').toggleClass('halfwidth', cashBettingEnabled);
        jQuery('#bettingFormNext').toggleClass('fullwidth', !cashBettingEnabled);
        placeInStoreButton.toggle(cashBettingEnabled);
    }

    //handles clicking on a race code tab on the meeting list page
    function selectorTabSelect(a, listItem, override) {
        var li = a.parent("li");

        if (override || !li.hasClass(activeClass)) {
            NAV.ajaxGet(a.attr('href'), function(data) {
                CMN.initDisplayListStyle(jQuery(listItem).html(data));
            });

            //change tab highlight
            jQuery("div.nav-info li").removeClass(activeClass);
            li.addClass(activeClass);
        }
    }

    function changeToteStarterState(newState, data) {
        var nav = jQuery('.previous-race-button, .next-race-button, .page-heading .refresh-button');
        var navInfoContainer = jQuery('#nav-info-container');
        var betconfirm = '#bet-confirm';

        switch (newState) {
        case states.calc:
            var operation = getTotePyos()
                .then(function (pyos) {
                    return pyos.initBetSelection();
                }).then(function() {
                    calculatorController.activate();
                    jQuery(window).scrollTop(0);
                });
            NAV.pushLoadingFor(operation);
            break;

        case states.confirm:
            jQuery('.multi-options').hide();
            nav.hide();
            jQuery('#race-details, form#betting-form > div').hide();
            jQuery(betconfirm).html(data).show();

            OFFERS.initOffersHelp();
            initPlaceBetNow();

            NAV.overrideBack(function() {
                changeToteStarterState(states.calc);
                return false;
            });
            navInfoContainer.hide();
            if (jQuery('#specialOffersFaultMessage').length) {
                getTotePyos().then(function (pyos) {
                    pyos.clearErrorMessage();
                });
            }
            jQuery(window).scrollTop(0);
            break;

        case states.receipt:
            jQuery('.multi-options').hide();
            nav.hide();
            jQuery(betconfirm).html(data).show();
            CMN.initDisplayListStyle(jQuery('#bet-confirm ul.display-list'));
            NAV.hideBack();
            navInfoContainer.hide();
            getTotePyos().then(function (pyos) {
                pyos.clear();
            });
            jQuery(window).scrollTop(0);
            break;

        case states.allup:
            nav.hide();
            jQuery('#race-details, form#betting-form > div, .bet-amount-container, .sort-group').hide();
            jQuery('#pool-type-container').html(data);
            getTotePyos().then(function (pyos) {
                pyos.clear();
            });
            jQuery(window).scrollTop(0);
            break;

        case states.none:
            jQuery('.multi-options').show();
            nav.show();
            navInfoContainer.show();
            jQuery('.hidden-calculator').hide();
            jQuery('#race-details, #pool-type-container, #bet-content, .my-selections, .bet-amount-container, .prefill-options, .prov-divs, .sort-group, #fixed-bet-info, span#pay-tote, span#pay-fixed, #int-rules, #special-info').show();
            jQuery(betconfirm).hide().html("");
            TOTESEL.changeToTab(jQuery("input#SelectedTab").val());
            NAV.resetBack("Back");
            getTotePyos().then(function (pyos) {
                pyos.clear();
            });
            jQuery(window).scrollTop(0);
            break;

        default:
            break;
        }
    }

    //Returns the bet to a new state after an error has occurred
    //only supported states are none and calculator (which don't require data).
    function handleBetError(newState, refresh) {
        NAV.hideErrorPopup();
        if (refresh) {
            refreshStarters(null, newState, true);
        } else {
            changeToteStarterState(newState);
        }
        return false;
    }

    function changeToteMysteryState(newState, data) {
        var title = '.page-heading .refresh-button',
            confirm = '#mystery-confirm';

        switch (newState) {
        case states.confirm:
            jQuery(title).hide();
            jQuery('#mystery-selections').hide();
            jQuery(confirm).html(data).show();
            CMN.initDisplayListStyle(jQuery('#mystery-confirm ul.display-list'));
            OFFERS.initOffersHelp();
            NAV.overrideBack(function() {
                changeToteMysteryState(states.none);
                return false;
            });
            break;

        case states.receipt:
            jQuery(title).hide();
            jQuery(confirm).hide();
            jQuery('#mystery-receipt').html(data).show();
            CMN.initDisplayListStyle(jQuery('#mystery-receipt ul.display-list'));
            NAV.hideBack();
            break;

        default:
            jQuery(title).show();
            jQuery(confirm).hide();
            jQuery('#mystery-receipt').hide();
            jQuery('#mystery-selections').show();
            NAV.resetBack("Tote");
            updateMysteryCalculator();
            break;
        }

        //always scroll back to the top on a screen change.
        jQuery(window).scrollTop(0);
    }

    //Returns to the start of the mystery bet after an error has occurred
    function handleMysteryError() {
        NAV.hideErrorPopup();
        changeToteMysteryState(states.none);
        return false;
    }

    /* ---------------------
    Betting Start
    --------------------- */

    function initProposeBet() {
        jQuery("a#bettingFormNext").click(function() {
            createBetProposal(this);
            return false;
        });
    }

    function createBetProposal(element) {
        if (jQuery(element).is('.disabled') === false) {
            getTotePyos().then(function(pyos) {
                return pyos.validate();
            }).then(function () {
                NAV.ajaxPost(jQuery(element).attr('href'),
                    jQuery('form#betting-form').serialize(),
                    processProposeBetResponse);
            }).catch(function () {
                NAV.scrollTo('#content');
            });
        }
    }

    function setFobMarketConditionsRules() {
        if (TOTESEL.isSpecialFobPropositionSelected()) {
            var bettingConditions = '';
            var bettingRules = '';
            if (TOTESEL.isInsideOutsideSelected()) {
                bettingConditions = jQuery('p#inside-outside-bet-conditions').clone().children().remove().end().text();
                bettingRules = jQuery('p#inside-outside-bet-rules').clone().children().remove().end().text();
            } else if (TOTESEL.isOddsEvensSelected()) {
                bettingConditions = jQuery('p#odds-evens-bet-conditions').clone().children().remove().end().text();
                bettingRules = jQuery('p#odds-evens-bet-rules').clone().children().remove().end().text();
            }
            jQuery('#FixedMarketConditions').val(bettingConditions);
            jQuery('#FixedMarketRules').val(bettingRules);
        }
    }

    function initAddToteRacingToBetSlip() {
        var $addToBetSlip = jQuery('#addToBetSlip');
        betSlipService.addBetSlipClickHandler(
            $addToBetSlip,
            function() {
                setFobMarketConditionsRules();
                return jQuery("form#betting-form").serialize();
            },
            false,
            function() {
                if (jQuery("#PyosSelectedSpecial\\.SpecialSeq").val()) {
                    errorController.showErrorPopup("SuperPick is not available for Bet Slip.", null);
                    return false;
                }
                return true;
            });
        var cashBettingEnabled = preferencesService.cashBettingEnabled();
        var placeInStoreButton = jQuery('#placeInStoreButton');
        addBetSlipController.bindAddToWalletButtonClickHandler(placeInStoreButton, function() {
            MSG.publish('bet.cash.selected', 'single');
            return jQuery("form#betting-form").serialize();
        }, function() {
            if (jQuery("#PyosSelectedSpecial\\.SpecialSeq").val()) {
                errorController.showErrorPopup("SuperPick is not available for Cash Betting.", null);
                return false;
            }
            return true;
        });
        jQuery('#bettingFormNext').toggleClass('halfwidth', cashBettingEnabled);
        jQuery('#bettingFormNext').toggleClass('fullwidth', !cashBettingEnabled);
        placeInStoreButton.toggle(cashBettingEnabled);
    }

    function processProposeBetResponse(data) {
        changeToteStarterState(states.confirm, data);
        MSG.publish('bet.single.review');
        //update the display of selections, unless the server has written something
        if (jQuery('ul.proposed-selections li').length == 0) {
            jQuery('ul.proposed-selections').empty().append(TOTESEL.getAllSelections());
        }

        //copy the updated fixed odds places paying data over, if it exists
        if (jQuery('#EnquiryPlacesPaying').length) {
            jQuery('#FixedPlacesPaying').val(jQuery('#EnquiryPlacesPaying').val());

            //and also copy the betting conditions etc over.
            var refreshedBetInfo = jQuery("#fixed-odds-info-refresh").html();
            if (!refreshedBetInfo) {
                refreshedBetInfo = jQuery('#fixed-bet-info-prop .bet-info').html();
            }
            jQuery('#fixed-win-bet-info .bet-info').html(refreshedBetInfo);
        }

        CMN.initDisplayListStyle(jQuery('#bet-confirm ul.display-list'));
    }

    function initPlaceBetNow() {
        jQuery("a#placeBetNow").click(function() {
            if (jQuery(this).is('.disabled') === false) {
                NAV.ajaxPost(jQuery(this).attr('href'),
                    locationDetailsAppender.addToUrlEncodedData(jQuery('form#betting-form').serialize()),
                    processBetPlacedResponse,
                    {
                        control: jQuery(this)
                    }
                );
            }
            return false;
        });
    }

    function processBetPlacedResponse(data) {
        changeToteStarterState(states.receipt, data);

        var ticket = jQuery('ul').find(':contains("Ticket")').find('span.data').html();
        var toteBetValue = jQuery('ul').find(':contains("Total Cost")').find('span.data').html();
        var fobWinValue = jQuery('ul').find(':contains("Win Bet Amount")').find('span.data').html();
        var fobPlaceValue = jQuery('ul').find(':contains("Place Bet Amount")').find('span.data').html();
        var specialOffer = jQuery('[data-key="special-offer-title"]').html();
        var betType = (toteBetValue) ? 'toteracing' : 'fobracing';

        MSG.publish('bet.single.receipt', {
            betType: betType,
            ticket: ticket,
            toteBetValue: toteBetValue,
            fobWinValue: fobWinValue,
            fobPlaceValue: fobPlaceValue,
            specialOffer: jQuery.trim(specialOffer)
        });
    }

    /* ---------------------
    Betting Finish
    --------------------- */

    function initAllUpRaceSelectionPopup() {
        jQuery("a.edit-box").click(function() {
            if (jQuery(this).is('.disabled') === false) {

                NAV.ajaxPost(jQuery(this).attr('href'),
                    jQuery('form#betting-form').serialize(),
                    processAllUpRaceSelectionResponse,
                    {
                        control: jQuery(this)
                    }
                );
            }

            return false;
        });
    }

    function processAllUpRaceSelectionResponse(data) {
        CMN.showPopup(jQuery('#allup-window').html(data));

        jQuery('#allup-window a.black-x').click(function() {
            jQuery('#allup-window').fadeOut('fast');
            CMN.setDisableState(jQuery("a.edit-box"), true);
            return false;
        });

        jQuery('#allup-window a.allup-cancel').click(function() {
            jQuery('#allup-window').fadeOut('fast');
            CMN.setDisableState(jQuery("a.edit-box"), true);
            return false;
        });

        jQuery('div#allup-window span').click(function() {
            var numSel = jQuery('div#allup-window span.selected').length;
            if (jQuery(this).hasClass(selected)) {
                numSel--;
                jQuery(this).removeClass(selected);
            } else {
                if (numSel < 6) {
                    numSel++;
                    jQuery(this).addClass(selected);
                }
            }

            CMN.setDisableState(jQuery('a.allup-ok'), (numSel > 1));
            return false;
        });

        jQuery('div#allup-window a.allup-ok').click(function() {
            refreshAllUpRaces();
            return false;
        });
    }

    function refreshAllUpRaces() {
        var selRaces = jQuery('div#allup-window  span.selected');
        var numSel = selRaces.length;
        var newRaceSelection = -1;
        var prevRaceIndex = jQuery("input#SelectedTab").val();
        var currentRaceIndex = -1;

        if (numSel > 1 && numSel < 7) {
            var selectedRaces = [];
            var i = 0;

            selRaces.each(function() {
                selectedRaces[i++] = jQuery(this).text().replace('R', '');
            });

            var currentRaces = jQuery("#RaceSelections").val().split(',');

            var tab = TOTESEL.getRaceTabByIndex(jQuery("input#SelectedTab").val());

            var currentTabExist = false;

            for (i = 0; i < selectedRaces.length; i++) {

                if (selectedRaces[i] == tab.getRaceNumber()) {
                    currentTabExist = true;
                    currentRaceIndex = i;
                }

                var raceExists = false;

                for (var j = 0; j < currentRaces.length; j++) {

                    if (selectedRaces[i] == currentRaces[j]) {
                        raceExists = true;
                        break;
                    }
                }

                //Must be a new race, exist on the first one found
                if (raceExists == false) {
                    newRaceSelection = i;
                    break;
                }
            }

            //no new race and current selected race is gone     :     select next race
            //races the same or some removed but current selected race present:     status quo
            //new races selected, select first of those new races.
            if (newRaceSelection == -1) {
                if (currentTabExist == false) {
                    if (prevRaceIndex > selectedRaces.length - 1) {
                        newRaceSelection = selectedRaces.length - 1;
                    } else {
                        newRaceSelection = prevRaceIndex;
                    }

                } else {
                    newRaceSelection = currentRaceIndex;
                }
            }

            //Override selected tabs
            jQuery("#RaceSelections").val(selectedRaces.join());

            TOTESEL.saveSelections();

            //Select new/old tab based on rules above
            jQuery("input#SelectedTab").val(newRaceSelection);

            resyncAllUpRaceTabs();

            refreshStarters(null, null, false);
        }
    }

    function resyncAllUpRaceTabs() {
        var selRaces = jQuery('div#allup-window  span.selected');
        var newTabSelectionsArray = [];

        for (var i = 0; i < selRaces.length; i++) {

            var race = selRaces[i];

            var title = race.textContent;

            if (selRaces.length <= 3) {
                title = race.textContent.replace('R', 'Race ');
            }

            var tab = TOTESEL.getRaceTabByRaceNumber(race.textContent.replace('R', ''));

            if (tab == null) {
                tab = TOTESEL.createRaceTab(race.textContent.replace('R', ''), false, 0, false, title, false);
            }

            newTabSelectionsArray.push(tab);
        }

        TOTESEL.replaceRaceTabs(newTabSelectionsArray);
    }

    /* ---------------------
    Calculator Start
    --------------------- */
    function initBetCostPopup() {
        jQuery("a#betcost").click(function() {
            if (jQuery(this).is('.disabled') === false) {

                NAV.ajaxPost(jQuery(this).attr('href'),
                    jQuery('form#betting-form').serialize(),
                    processBetCostResponse,
                    {
                        control: jQuery(this)
                    }
                );
            }

            return false;
        });
    }

    function processBetCostResponse(data) {
        CMN.showPopup(jQuery('#how-much').html(data));

        jQuery('#how-much').click(function() {
            jQuery(this).fadeOut('fast', function() {
                CMN.setDisableState(jQuery("a#betcost"), true);
            });
        });
    }

    function initMysteryCalculator() {
        jQuery('#mystery-confirm').hide();
        jQuery('#mystery-receipt').hide();

        jQuery("button#reset").click(function() {
            jQuery("span.mystery-bet-quantity").text("0");
            jQuery('div.calculator ul li button').removeClass(selected);
            updateMysteryCalculator();
        });
        jQuery("form#mystery ul.mystery-bets li a").click(function() {
            if (!jQuery(this).parent('li').hasClass(disabled)) {
                jQuery("form#mystery ul.mystery-bets li").removeClass(selected);
                jQuery(this).parent("li").addClass(selected);
                jQuery("input#MysteryKey").val(jQuery(this).children("input.key").val());
                jQuery("span.mystery-bet-cost").text(jQuery(this).children("input.cost").val());
                updateMysteryCalculator();
            }
        });
        jQuery("div.calculator ul li button").not("#reset").click(function() {
            jQuery("span.mystery-bet-quantity").text(jQuery(this).val());
            jQuery('div.calculator ul li button').removeClass(selected);
            jQuery(this).addClass(selected);
            updateMysteryCalculator();
        });
    }

    function processMysteryResponse(data) {
        changeToteMysteryState(states.confirm, data);

        MSG.publish('bet.mystery.selected');
        MSG.publish('bet.mystery.review');
        jQuery('#commit-mystery').click(function() {
            NAV.ajaxPost(jQuery('form#mystery-confirm').attr('action'),
                locationDetailsAppender.addToUrlEncodedData(jQuery('form#mystery-confirm').serialize()),
                processMysteryCommit,
                {
                    control: jQuery("#commit-mystery")
                }
            );
            return false;
        });
    }

    function processMysteryCommit(data) {
        changeToteMysteryState(states.receipt, data);
        var singleTicket = jQuery('#mystery-receipt span.title:contains("Ticket")').parent().find('span.data').html();
        var tickets = '';
        if (singleTicket) {
            tickets = [{ ticketNumber: singleTicket }];
        } else {
            tickets = jQuery("#mystery-receipt h4:contains('Ticket')").map(function() { return { ticketNumber: jQuery(this).html().replace('Ticket ', '') }; }).get();
        }
        var totalCost = jQuery('#mystery-receipt span.title:contains("Total Cost")').parent().find('span.data').html();
        MSG.publish('bet.mystery.receipt', { tickets: tickets, totalCost: totalCost });
    }

    function updateMysteryCalculator() {
        var quantity = jQuery("span.mystery-bet-quantity").text();
        jQuery("input#NumberOfBets").val(quantity);
        var cost = parseInt(jQuery("span.mystery-bet-cost").text()) * parseInt(quantity);
        jQuery("span.mystery-bet-total").text(cost);
        if (isNaN(cost) || cost <= 0) { //if customise mystery then above cost will not be there!!! I know what you mean! ToDo: remove this when we have bet buttons as component.
            cost = parseFloat(jQuery("span.customise-mystery-bet-total").text().replace('$', ''));
        }
        var enabledButtons = (cost > 0);
        CMN.setDisableState(jQuery('div.calculator-buttons a'), enabledButtons);
        CMN.setDisableState(jQuery('#mystery-bet'), enabledButtons);
    }

    /* ---------------------
    Calculator Finish
    --------------------- */

    /* ---------------------
    Starters Start
    --------------------- */

    function initPoolSelector() {
        jQuery(".pool-type-selector .selector").click(function(e) {
            jQuery(".pools").slideToggle('fast');

            e.stopPropagation();

            //to close the drawer button - called here because of stopPropagation
            closeDrawer();
        });

        jQuery('body').click(function() {
            var p = jQuery(".pools");
            if (p.is(":visible")) {
                p.slideUp('fast');
            }
        });
        jQuery('.pools li:last').addClass('last');
    }

    function restoreFormExpansion(formExpansionPattern) {
        if (formExpansionPattern == "")
            return true;

        var starters = formExpansionPattern.split('/');

        jQuery(".shortform").each(function() {
            var sNo = jQuery(this).siblings('span.starter-runner-number').children('span.number').html();
            var shortFormElement = jQuery(this).siblings('span.starter-runner-number');
            jQuery.each(starters, function(key, starter) {
                var parts = starter.split('-');
                if (sNo == parts[0]) {
                    if (parts[1] == "1") {
                        shortFormElement.click();
                    }
                    return false;
                }
            });
        });
    }

    // When the user selects a new option in the bet type select on the race detail page
    function initBetTypeChange(isQuinella, isAllUp) {

        CALC.registerUpdateNotification(null);

        initButtons(isAllUp);

        CALC.initCommonCalculator(false);
        CALC.initCalculator('calculator1');
        CALC.initCalculator('calculator2');
        initFieldButton();
        initOddsEvens();
        initRovingBankerButton();
        initBetCostPopup();
        initAllUpRaceSelectionPopup();
        initProposeBet();
        initAddToteRacingToBetSlip();
        initSelections();
        initAllUpBetType();
        initSButtons();
        initProvDivButtons();
        if (isQuinella == true) {
            LEGIN.InitQuinellaLegIn();
        }
    }

    function initButtons(isAllUp) {
        initSingleBetButton(isAllUp);
        initSortButtons();
        initMultiBetButtons();
    }

    function allBetLinesAreAllways(betLineCostCollection) {
        var isAllways = true;
        betLineCostCollection.forEach(function(betLineCost) {
            if (betLineCost.IsAllways === false) {
                isAllways = false;
            }
        });
        return isAllways;
    }

    function initSingleBetButton(isAllUp) {
        jQuery('.bet-amount, .place-single').click(
            function() {
                if (!!jQuery("#race-replay-video").length && !!jQuery("#race-replay-video")[0].pause) {
                    jQuery("#race-replay-video")[0].pause();
                }

                TOTESEL.saveSelections();

                getTotePyos().then(function(pyos) {
                    pyos.clear();
                });

                if (isAllUp) {
                    NAV.ajaxPost(jQuery(this).attr('href'),
                        jQuery('form#betting-form').serialize(),
                        processAllUpProposeBetResponse);
                } else {

                    calculatorModel.setHasInvestment(false);

                    if (TOTESEL.isFixedOddsRacing() || TOTESEL.isValidFixedoddsBet()) {
                        changeToteStarterState(states.calc);
                        MSG.publish('bet.single.selected', { type: 'fobracing' });
                    } else {
                        var operation = toteBettingService.enquiry().done(function(response) {
                                calculatorModel.setNumberOfCombinations(response.TotalCombinations);
                                calculatorModel.setHasInvestment(true);
                                if (response.BetLineCostCollection != null && response.BetLineCostCollection.length > 0) {
                                    calculatorModel.setIsAllways(allBetLinesAreAllways(response.BetLineCostCollection));
                                }
                                changeToteStarterState(states.calc);
                                MSG.publish('bet.single.selected', { type: 'toteracing' });
                            })
                            .fail(function(http) {
                                if (http.status === 400) {
                                    var caughtException = jQuery.parseJSON(http.responseText);

                                    MSG.publish('popup.showPopUp', {
                                        headerText: caughtException.Message,
                                        messageText: caughtException.ExceptionMessage,
                                        buttonType: POPUP.BUTTONTYPE.Ok,
                                        cancelButtonText: "OK",
                                        isError: true
                                    });

                                } else {
                                    errorController.showGenericErrorPage();
                                }
                            });

                        NAV.pushLoading(function (hide) {
                            operation.always(function() {
                                    hide();
                                });
                        });
                    }
                }
            }
        );
    }

    function initSortButtons() {
        jQuery('.sort:not(.disabled)').click(
            function(e) {

                startersFormValueExpanded = "";

                jQuery(".shortform").each(function() {

                    var sNo = jQuery(this).siblings('span.starter-runner-number').children('span.number').html();
                    startersFormValueExpanded += sNo + "-";
                    if (jQuery(this).is(":visible")) {
                        startersFormValueExpanded += "1/";
                    } else {
                        startersFormValueExpanded += "0/";
                    }
                });
                var sortOrder = 'Number';
                e.stopPropagation();

                closeDrawer();

                if (jQuery(this).hasClass('name')) {
                    sortOrder = 'Name';
                } else if (jQuery(this).hasClass('fixed')) {
                    sortOrder = 'FixedPrice';
                } else if (jQuery(this).hasClass('tote') || jQuery(this).hasClass('right')) {
                    sortOrder = 'Price';
                }
                refreshStarters(sortOrder, null, true);
            }
        );
    }

    function initMultiBetButtons() {
        jQuery('a.start-multi').click(
            function(e) {
                e.preventDefault();
                setFobRacingSelectedProposition();
                if (!jQuery(this).hasClass('disabled')) {
                    TOTESEL.saveSelections();

                    if (jQuery('#choose-win-place-leg-popup').length > 0 && jQuery('.odds-evens span.selected').length === 0) {
                        setWinPlacePopupDisplayValue();

                        var popup = jQuery('.popup > .win-place-confirm > .black-x');
                        popup.click(function() {
                            jQuery('.popup').fadeOut('fast');
                        });

                        CMN.showPopup(jQuery('#choose-win-place-leg-popup'));
                    } else {
                        NAV.ajaxPost(jQuery(this).attr('href'),
                            jQuery('form#betting-form').serialize(),
                            function(data) {
                                if (data && data.RedirectUrl) {
                                    NAV.navChange(data.RedirectUrl);
                                }
                            },
                            {
                                hideOverlay: false
                            }
                        );
                    }
                }
            }
        );

        jQuery('a.add-to-multi').click(function(e) {
            e.preventDefault();
            setFobRacingSelectedProposition();
            if (jQuery('#choose-win-place-leg-popup').length > 0 && props.find('input:checked').length > 0) {
                CMN.showPopup(jQuery('#choose-win-place-leg-popup'));
            } else {
                formPost(jQuery('a.add-to-multi'),
                    jQuery('form#betting-form'),
                    processRedirectResponse,
                    false);
            }
            return false;
        });

        jQuery('a.add-win-to-multi').click(function(e) {
            e.preventDefault();
            setFobRacingSelectedProposition();
            jQuery('#legType').val('win');
            return formPost(jQuery('a.add-win-to-multi'),
                jQuery('form#betting-form'),
                processRedirectResponse,
                false);
        });

        jQuery('a.add-place-to-multi').click(function(e) {
            e.preventDefault();
            setFobRacingSelectedProposition();
            jQuery('#legType').val('place');
            return formPost(jQuery('a.add-place-to-multi'),
                jQuery('form#betting-form'),
                processRedirectResponse,
                false);
        });

        jQuery('a.confirm-win-leg').click(function(e) {
            e.preventDefault();
            setFobRacingSelectedProposition();
            jQuery('#legType').val('win');
            return formPost(jQuery('a.confirm-win-leg'),
                jQuery('form#betting-form'),
                processRedirectResponse,
                false);
        });

        jQuery('a.confirm-place-leg').click(function(e) {
            e.preventDefault();
            setFobRacingSelectedProposition();
            jQuery('#legType').val('place');
            return formPost(jQuery('a.confirm-place-leg'),
                jQuery('form#betting-form'),
                processRedirectResponse,
                false);
        });
    }

    function setFobRacingSelectedProposition() {
        if (jQuery('#isFobRacing').length) {
            var selectedStarter = jQuery('ul.runners-list a.fixed.selected');
            var selectedPropNumber = selectedStarter.children('input[name="prop-num"]').val();

            jQuery('#sportsBetNumber').val(selectedPropNumber);
        }
    }

    function setWinPlacePopupDisplayValue() {

        if (jQuery('#choose-win-place-leg-popup').length > 0) {

            var selectedDivs = jQuery('#bet-content .display-list').find('a.selected');

            var selectedli = jQuery('#bet-content .display-list').find('a.selected').parent().parent();

            var selectionInfo = jQuery('#bet-content .display-list').find('a.selected').parent().parent().children('.selection-info').children();

            var description = selectionInfo.filter('span.selection-name').text();
            var runnerno = selectedli.children('span.runner-number').children('span.number').text();
            var selectedStarterNumber = jQuery("#selectedStarterNumber").val();
            var winReturnDisplay = selectedDivs.children('input[name="fixed-win"]').val();
            jQuery('#choose-win-place-leg-popup .confirm-win-leg').html('win<br/>' + winReturnDisplay);

            var placeReturnDisplay = selectedDivs.children('input[name="fixed-place"]').val();
            if (placeReturnDisplay) {
                jQuery('#choose-win-place-leg-popup a.confirm-place-leg').html('place<br/>' + placeReturnDisplay);
                jQuery('a.confirm-place-leg').removeClass('disabled');
            } else {
                jQuery('#choose-win-place-leg-popup a.confirm-place-leg').html('place<br/><br/>');
                jQuery('a.confirm-place-leg').addClass('disabled');
            }
            if (runnerno) {
                jQuery('#choose-win-place-leg-popup .display-no').show();
                jQuery('#choose-win-place-leg-popup .display-no').text(runnerno);
            } else if (selectedStarterNumber) {
                jQuery('#choose-win-place-leg-popup .display-no').show();
                jQuery('#choose-win-place-leg-popup .display-no').text(selectedStarterNumber);
            } else {
                jQuery('#choose-win-place-leg-popup .display-no').hide();
            }
            jQuery('#choose-win-place-leg-popup .display-text').text(description);
        }
    }

    function processRedirectResponse(data) {
        if (data && data.RedirectUrl) {
            NAV.navChange(data.RedirectUrl);
            MSG.publish('bet.multi.add');
        }
    }

    function formPost(b, f, s, h) {
        if (b.is('.disabled') === false) {
            NAV.ajaxPost(
                b.attr('href'),
                f.serialize(),
                s,
                {
                    control: b,
                    hideOverlay: (h === undefined) ? true : h
                }
            );
        }
        return false;
    }

    function processAllUpProposeBetResponse(data) {

        jQuery('.allup-formula').html(data);
        jQuery('.allup-formula li').children('button').children('span.combination').hide();

        jQuery('.allup-formula li').click(function() {
            jQuery(this).children('button').toggleClass('selected').children('span.combination').toggle();
            //This will in turn give us a call back.
            CALC.setCalcButtonState();
        });

        jQuery('h3.toggle').click(function() {
            jQuery('.hidden-calculator div.info-expand').slideToggle();
            jQuery('h3.toggle').toggleClass('open');
            jQuery('#FormulaExpanded').val(jQuery('h3.toggle').hasClass('open'));
        });

        var prevFormula = TOTESEL.getAllUpFormula();
        var defaultFormula = TOTESEL.getDefaultFormula();

        if (prevFormula) {

            var currentFormula = prevFormula.split(',');

            for (var i = 0; i < currentFormula.length; i++) {

                if (currentFormula[i] != defaultFormula) {
                    jQuery('.allup-formula li button[value=' + currentFormula[i] + ']').toggleClass('selected').children('span.combination').toggle();
                }
            }

            if (defaultFormula && !jQuery('.allup-formula li button').last().hasClass('selected')) {
                jQuery('.allup-formula li button').last().toggleClass('selected').children('span.combination').toggle();
            }

            if (Boolean(jQuery('#FormulaExpanded').val() == 'true')) {
                jQuery('.hidden-calculator div.info-expand').show();
            } else {
                jQuery('.hidden-calculator div.info-expand').hide();
            }

        } else {
            jQuery('.allup-formula li button').last().toggleClass('selected').children('span.combination').toggle();
            jQuery('.hidden-calculator div.info-expand').hide();
        }

        updateAllupDetails();

        CALC.registerUpdateNotification(function() {
            updateAllupDetails();
        });

        changeToteStarterState(states.calc);
        MSG.publish('bet.single.selected', { type: 'toteracing' });
    }

    function initPoolSelection() {
        jQuery("ul.pools li").not(".abandoned").click(function() {
            var betType = jQuery(this).children("input[name='bet-type']").val();
            if (betType === "Mystery") {
                NAV.navChange(jQuery(this).children("input#mystery-href").val());
            } else if (betType === "AllUp") {
                NAV.ajaxGet(jQuery(this).children("input#all-up-href").val(), processAllUpSelection);
            } else {
                var href = jQuery("#change-bet-href").val();
                href = href + ((href.indexOf("?") > 0) ? "&" : "?");
                NAV.ajaxContent(href + "betType=" + betType);
            }
            initDrawerDisplay('visibility');
        });
    }

    function initProvDivButtons() {
        jQuery('.toggle-quaddie-prov-divs, .toggle-double-prov-divs').click(function() { jQuery(this).toggleClass('selected'); });
        jQuery('.toggle-quaddie-prov-divs').click(function() { jQuery('.prov-div-qd').toggle(); });
        jQuery('.toggle-double-prov-divs').click(function() { jQuery('.prov-div-d').toggle(); });
    }

    function processAllUpSelection(data) {
        changeToteStarterState(states.allup, data);
        initPoolSelector();
        initPoolSelection();
        initDrawerDisplay('visibility');
    }

    function initAllUpRaces() {
        jQuery('a.next').click(function(e) {
            e.preventDefault();
            var selRaces = jQuery('div#all-up-race-selector span.selected');
            var numSel = selRaces.length;
            if (numSel > 1 && numSel < 7) {
                var selectedRaces = [];
                var i = 0;
                selRaces.each(function() {
                    selectedRaces[i++] = jQuery(this).text().replace('R', '');
                });
                jQuery("#RaceSelections").val(selectedRaces.join());
                NAV.ajaxPost(jQuery('form#all-up-race-form').attr('action'),
                    jQuery('form#all-up-race-form').serialize(),
                    function(data) { jQuery('#main-container').html(data); });

            }
            return false;
        });
        jQuery('div#all-up-race-selector span').click(function() {
            var numSel = jQuery('div#all-up-race-selector span.selected').length;
            if (jQuery(this).hasClass(selected)) {
                numSel--;
                jQuery(this).removeClass(selected);
            } else {
                if (numSel < 6) {
                    numSel++;
                    jQuery(this).addClass(selected);
                }
            }

            CMN.setDisableState(jQuery('a.next'), (numSel > 1));
        });
    }

    function initDrawerDisplay(selector) {

        if (selector === 'visibility') {
            var isForms = jQuery(".form-button").is(':visible').length > 0;
            var isDouble = jQuery(".prov-div-d").is(':visible').length > 0;
            var isQuaddie = jQuery(".prov-div-qd").is(':visible').length > 0;
        } else {
            var isForms = jQuery(".form-button").length > 0;
            var isDouble = jQuery(".prov-div-d").length > 0;
            var isQuaddie = jQuery(".prov-div-qd").length > 0;
        }

        if (!isForms) {
            jQuery('a.drawer-button.all-form').hide();
        } else {
            jQuery('a.drawer-button.all-form').show();
            setAllForm();
        }

        if (!isQuaddie) {
            jQuery('a.drawer-button.quaddie-prov-divs').hide();
        } else {
            jQuery('a.drawer-button.quaddie-prov-divs').show();
        }

        if (!isDouble) {
            jQuery('a.drawer-button.double-prov-divs').hide();
        } else {
            jQuery('a.drawer-button.double-prov-divs').show();
        }

        //if ((jQuery('div.drawer-options a.drawer-button').length > 1) || (isForms)) {
        if (isForms || isDouble || isQuaddie) {
            //jQuery('a.drawer').removeClass('drawer-disabled');
            jQuery('a.drawer').show();
            jQuery('.pool-type-selector .selector').addClass('withDrawer');
            jQuery('.pool-type-selector .pools').addClass('withDrawer');
            jQuery('div.bottom-allforms.prov-divs').show();
        } else {
            //jQuery('a.drawer').addClass('drawer-disabled');
            jQuery('a.drawer').hide();
            jQuery('.pool-type-selector .selector').removeClass('withDrawer');
            jQuery('.pool-type-selector .pools').removeClass('withDrawer');
            jQuery('div.bottom-allforms.prov-divs').hide();
        }
    }

    function initSelections() {

        initShortformToggle();
        raceReplay.initRaceReplayLinks();
        initBlackbookAddEntry();
        initDrawerDisplay();

        initMySelectionsSection();

        //handling for win/place tote.
        jQuery('ul.runners-list a.tote').click(function(e) {
            e.stopPropagation();

            //to close the drawer button - called here because of stopPropagation
            closeDrawer();

            //to close the pool drop down - called here because of stopPropagation
            var p = jQuery(".pools");
            if (p.is(":visible")) {
                p.slideUp('fast');
            }

            if (!jQuery(this).hasClass(disabled)) {
                var input = jQuery(this).children('input');
                var newValue = !input.prop('checked');
                //toggle the hidden input field.
                input.prop('checked', newValue);
                jQuery(this).toggleClass(selected, newValue);

                //clear all current FOB selections
                clearFobSelections();

                //force the change event so standard behaviour occurs
                input.change();
            }
        });

        initFixedOddsSelectionButton();

        //Code so clicking anywhere on the li element will select/unselect the checkbox.
        //Doesn't apply to win/place bets with tote/fixed stuff.
        if (jQuery('#BetType').val() !== 'WinPlace') {

            jQuery('.runners-list li').click(function(e) {
                var input = jQuery(this).children('input:enabled');

                if (input.length > 0) {
                    if (input.is(':checked')) {
                        input.removeAttr(checked);
                    } else {
                        input.prop(checked, true);
                    }
                    input.change();
                }
            });
        }
    }

    function initMySelectionsSection() {
        // update 'my selections' and bet amount button state on any change of checkbox state
        jQuery('ul.runners-list input').change(function() {
            if (!jQuery(this).hasClass('leginselection') || jQuery(this).is(':visible')) {
                //Make sure field is off if we unselect any checkboxes
                if (!jQuery(this).is(':checked')) {
                    jQuery('.totebet-field-button').removeClass(selected);
                }

                updateStartersState(true);
            }
        }).click(function(e) {
            e.stopPropagation();
            closeDrawer();
        });
    }

    function initFixedOddsSelectionButton() {
        //handling for win/place fixed.
        jQuery('ul.runners-list a.fixed').click(function(e) {
            e.stopPropagation();
            closeDrawer();

            if (!jQuery(this).hasClass(disabled)) {
                var newValue = !jQuery(this).hasClass(selected);
                //clear all current FOB selections
                clearFobSelections();

                jQuery(this).toggleClass(selected, newValue);

                //clear all tote selections
                clearToteSelections();

                updateStartersState(true);
            }
        });
    }

    function clearToteSelections() {
        jQuery('ul.runners-list a.tote').removeClass(selected);
        jQuery('.totebet-field-button').removeClass(selected);
        jQuery('ul.runners-list input[name="starter"]').removeAttr(checked);
    }

    function clearFobSelections() {
        jQuery('ul.runners-list a.fixed').removeClass(selected);
        jQuery('div.odds-evens span').removeClass(selected);
    }

    function initFieldButton() {
        jQuery('.totebet-field-button').click(function() {
            if (!jQuery(this).hasClass(disabled)) {
                var sel = !jQuery(this).hasClass(selected);
                jQuery(this).toggleClass(selected);

                if (sel) {
                    jQuery('span.s-button').removeClass(selected); //unselect all sbuttons.

                    //Dont clear disabled fields for RB or Leg-In
                    if (!jQuery('.rb-box').hasClass(selected) && !jQuery('.legin-box').hasClass(selected)) {
                        jQuery("ul.runners-list input:disabled").removeAttr(disabled);
                    }
                    jQuery('div.starter-tab input').prop(checked, true);
                    jQuery('ul.runners-list a.tote').addClass(selected);
                } else {
                    jQuery('div.starter-tab input:enabled').removeAttr(checked);
                    jQuery('ul.runners-list a.tote').removeClass(selected);
                }
                //clear all current FOB selections
                jQuery('ul.runners-list a.fixed').removeClass(selected);
                jQuery('div.odds-evens span').removeClass(selected);

                updateStartersState(true);
            }
        });
    }

    function initOddsEvens() {
        jQuery('span.inside,span.outside,span.odds,span.evens').click(function() {
            if (!jQuery(this).hasClass(disabled)) {
                var newValue = !jQuery(this).hasClass(selected);
                clearToteSelections();
                clearFobSelections();
                jQuery(this).toggleClass(selected, newValue);
                updateStartersState(true);
            }
        });
    }

    function initRovingBankerButton() {
        jQuery('.rb-box').click(function() {
            if (!jQuery(this).hasClass(disabled)) {
                var sel = !jQuery(this).hasClass(selected);
                jQuery(this).toggleClass(selected);
                jQuery('.rb-box em').text(sel ? 'ON' : 'OFF');
                updateRaceTabs(sel);
                TOTESEL.setSelectedTab(0);
                //clear all current selections
                jQuery('ul.runners-list a.fixed').removeClass(selected);

                updateStartersState(true);
            }
        });
    }

    function initSButtons() {
        jQuery('div.prefill-options span.s-button').click(function() {
            jQuery(this).toggleClass(selected);
            var filter, sclass = [];

            //remove the field class, if it's present
            if (jQuery(this).hasClass(selected)) {
                jQuery('.totebet-field-button').removeClass(selected);
            }

            //make selector for all selected S buttons (including recursive ones)
            jQuery('span.s-button.selected').each(function() { sclass.push(jQuery(this).text()); });
            filter = TOTESEL.getFullSClasses(sclass);

            //need to disable any enabled input that is now in the selection list
            jQuery("ul.runners-list input:enabled").filter(filter).prop(disabled, true).prop(checked, true);

            //need to enable any disabled input that is not in the selection list
            jQuery("ul.runners-list input:disabled:not(.leginselection)").not(filter).removeAttr(disabled).removeAttr(checked);

            updateStartersState(true);
        });
    }

    function toggleRovingBankerTabs(rbOn, selectedTabIdx) {
        var toptabs = jQuery('#race-tabs ul.top li');
        var bottomtabs = jQuery('#race-tabs ul.bottom li');

        if (!selectedTabIdx) {
            selectedTabIdx = 0;
        }

        var rbButton = jQuery('.rb-box');
        if (rbOn) {
            rbButton.addClass(selected);
            jQuery('.rb-box em').text('ON');

            toptabs.filter('.rb').children('a').show().end().eq(selectedTabIdx).addClass('ui-state-active');
            toptabs.not('.rb').children('a').hide().end().removeClass('ui-state-active');

            bottomtabs.filter('.rb').children('a').show().end().eq(selectedTabIdx).addClass('ui-state-active');
            bottomtabs.not('.rb').children('a').hide().end().removeClass('ui-state-active');
        } else {
            rbButton.removeClass(selected);
            jQuery('.rb-box em').text('OFF');

            toptabs.filter('.rb').children('a').hide().end().removeClass('ui-state-active');
            toptabs.not('.rb').children('a').show().end().eq(selectedTabIdx).addClass('ui-state-active');

            bottomtabs.filter('.rb').children('a').hide().end().removeClass('ui-state-active');
            bottomtabs.not('.rb').children('a').show().end().eq(selectedTabIdx).addClass('ui-state-active');
        }
    }

    function updateRaceTabs(rbOn) {
        toggleRovingBankerTabs(rbOn);

        TOTESEL.clearAllSelections();
        TOTESEL.changeToTab(0);
    }

    // displays the current selections and toggles the bet amount button
    function updateStartersState(save) {
        if (save) {
            TOTESEL.saveSelections();
        }

        var selectionsHtml = TOTESEL.getAllSelections();
        jQuery('div.my-selections ul.display-list').empty().append(selectionsHtml);

        //extra stuff we need to do for enhanced FOB
        if (jQuery('#BetType').val() === 'WinPlace') {

            updateWinPlaceButtonState();

            var product = TOTESEL.getFixedToteType();
            var selectionTitle = "My Selections";

            if (product === 'fixed') {
                var subHeader = TOTESEL.getSubProductTypeHeaderText();


                if (subHeader.length > 0) {
                    //jQuery('.hidden-calculator > h3').html(subHeader);
                    selectionTitle += " - " + subHeader;
                } else {
                    // jQuery('.hidden-calculator > h3').html("WIN");
                }

                selectionTitle += " - FIXED";
            }

            if (product === 'tote') {
                selectionTitle += " - Tote";
            }

            jQuery('div.my-selections h3').html(selectionTitle);
        } else {
            CMN.setDisableState(jQuery('button.bet-amount'), TOTESEL.isValidBet());
        }
    }

    function updateWinPlaceButtonState() {
        var singleLineText = jQuery(".js-single-line");
        var twoLineTextAddMulti = jQuery(".js-two-lines");
        var addPlaceToMultiButton = jQuery('a.add-place-to-multi');

        if (jQuery('div.multi-options').length) {
            addPlaceToMultiButton.hide();
            singleLineText.hide();
            twoLineTextAddMulti.hide();
            if (TOTESEL.isValidFixedoddsBet() || TOTESEL.isFixedOddsRacing()) {
                jQuery('button.bet-amount').hide();

                if (jQuery('.odds-evens span.selected').length > 0) {
                    singleLineText.show();
                } else {
                    addPlaceToMultiButton.show();
                    twoLineTextAddMulti.show();
                }

                jQuery('a.add-win-to-multi').show();
                jQuery('a.add-to-multi').show();

            } else {
                jQuery('button.bet-amount').show();
                jQuery('a.add-win-to-multi').hide();
                jQuery('a.add-to-multi').hide();
            }
        } else {
            if (TOTESEL.isValidFixedoddsBet() || TOTESEL.isFixedOddsRacing()) {
                jQuery('button.bet-amount').hide();
                jQuery('button.place-single').show();
                jQuery('a.start-multi').show();
            } else {
                jQuery('button.bet-amount').show();
                jQuery('button.place-single').hide();
                jQuery('a.start-multi').hide();
            }
        }

        CMN.setDisableState(jQuery('button.bet-amount'), TOTESEL.isValidBet());
        CMN.setDisableState(jQuery('a.start-multi'), TOTESEL.isValidFixedoddsBet());
        CMN.setDisableState(jQuery('a.add-win-to-multi'), TOTESEL.isValidFixedoddsBet());
        CMN.setDisableState(addPlaceToMultiButton, TOTESEL.isValidFixedoddsBet());
        CMN.setDisableState(jQuery('a.add-to-multi'), TOTESEL.isValidFixedoddsBet());
        CMN.setDisableState(jQuery('button.place-single'), TOTESEL.isValidFixedoddsBet());
    }

    function refreshStarters(newSortMode, newState, saveState) {
        // Clearing the login-form so that on the off chance that a user changes from 3G to bunbury wifi or vice versa
        // They get or don't get the buttons in the right circumstances.
        jQuery('form#login-form').remove();

        if (saveState) {
            TOTESEL.saveSelections();
        }

        TOTESEL.clearCache();

        //update the sort mode if it's passed in
        if (newSortMode) {
            jQuery('input#SortOrder').val(newSortMode);
        }

        //disable all starter inputs so they aren't submitted
        jQuery('div.starter-tab input').prop(disabled, true);

        var refreshoverride = jQuery('#refresh-override-href').val();

        var refreshhref = jQuery('.refresh-button').attr('href');

        if (refreshoverride) {
            refreshhref = refreshoverride;
        }

        NAV.ajaxPost(refreshhref,
            jQuery('form#betting-form').serialize(),
            function(data) {
                jQuery('#main-container').html(data);

                //test for existence of input#SelectedTab -- it won't be there if the race has jumped.
                if (jQuery("input#SelectedTab").length) {
                    TOTESEL.changeToTab(jQuery("input#SelectedTab").val(), null, function () { startersRefreshed(); });

                    if (newSortMode != undefined) {
                        restoreFormExpansion(startersFormValueExpanded);
                    } else {
                        startersFormValueExpanded = "";
                    }

                    if (newState && newState === states.calc && TOTESEL.isValidBet()) {
                        changeToteStarterState(newState);
                    }
                }
            });
    }

    function startersRefreshed() {
        //need to resave starters here so any scratching gets picked up.
        updateStartersState(true);
        TOTESEL.refreshHiddenFields();
    }

    function rovingBankerTabSelect() {

        jQuery("ul.tabs.top li.ui-state-active").removeClass('ui-state-active');
        jQuery("ul.tabs.top li.roving-banker-tab").addClass('ui-state-active');

        jQuery("ul.tabs.bottom li.ui-state-active").removeClass('ui-state-active');
        jQuery("ul.tabs.bottom li.roving-banker-tab").addClass('ui-state-active');

        TOTESEL.changeToTab(0);

        jQuery("input#SelectedTab").val(0);

        return false;
    }

    function rovingBankerWithSelect() {

        jQuery("ul.tabs.top li.ui-state-active").removeClass('ui-state-active');
        jQuery("ul.tabs.top li.roving-banker-with").addClass('ui-state-active');

        jQuery("ul.tabs.bottom li.ui-state-active").removeClass('ui-state-active');
        jQuery("ul.tabs.bottom li.roving-banker-with").addClass('ui-state-active');

        TOTESEL.changeToTab(1);

        jQuery("input#SelectedTab").val(1);

        return false;
    }

    //'a' parameter is obsolete and should be removed in a future release (keeping it in for now to not cause errors on initial update).
    function starterTabSelect(a, newIndex) {

        var li = jQuery("ul.tabs.top li").eq(newIndex);

        if (!li.hasClass(activeClass)) {
            //save selections from this tab
            TOTESEL.saveSelections();

            //load starters for new tab (if necessary)
            TOTESEL.changeToTab(newIndex, li.children("a").attr("href"));

            jQuery("input#SelectedTab").val(newIndex);

            //change tab highlight - first remove it from all classes
            jQuery("ul.tabs li").removeClass(activeClass);
            li.addClass(activeClass);
            jQuery("ul.tabs.bottom li").eq(newIndex).addClass(activeClass); //add to bottom bar
        }

        return false;
    }

    /* ---------------------
    Starters Finish
    --------------------- */

    /* ---------------------
    Starter Results Start
    --------------------- */
    function initStarterResults(url, backText) {
        TT.initCommon(url, backText);
        raceReplay.initRaceReplayLinks();

        CMN.initSlideToggleHandlers();

        initShortformToggle();
        initBlackbookAddEntry();
    }

    /* ---------------------
    Starter Results Finish
    --------------------- */

    function initToteMeetingsList() {
        jQuery('ul.meetings-list a.meeting-race').click(function (e) {
            e.stopPropagation();
            closeDrawer();
        });

        jQuery(selectorClosedMeetings).toggle(showClosedMeetings);
    }

    function initNextEventsList() {
        jQuery('ul.next-to-jump-list a.clearfix').click(function (e) {
            e.stopPropagation();
            closeDrawer();
        });

        jQuery(selectorClosedMeetings).toggle(showClosedMeetings);
    }

    function resetMeetingFilters() {
        showClosedMeetings = true;
    }

    function initAllUpBetType() {
        jQuery('.allup-group li').click(function () {
            jQuery(this).children('input').prop('checked', true);
            updateStartersState(true);
        });
    }

    function updateAllupDetails() {

        var selectedFormula = []; var i = 0;

        var $allUpFormulas = jQuery('#AllUpFormulas').html('');

        jQuery('.allup-formula li button.selected').each(function (i) {
            var $button = jQuery(this);

            selectedFormula[i] = $button.val();

            jQuery('<input/>', {
                name: 'AllUpFormulas[' + i + '].Number',
                type: 'hidden',
                value: $button.val()
            }).appendTo($allUpFormulas);

            jQuery('<input/>', {
                name: 'AllUpFormulas[' + i + '].Combinations',
                type: 'hidden',
                value: $button.attr('data-combinations')
            }).appendTo($allUpFormulas);
        });

        TOTESEL.setAllUpFormula(selectedFormula.join());

        if (jQuery('.allup-formula li button').last().hasClass('selected')) {
            TOTESEL.setDefaultFormula(jQuery('.allup-formula li button').last().val());
        } else {
            TOTESEL.setDefaultFormula('');
        }

        var combinations = calculateCombinations();

        jQuery('#allup-combinations').html('Combinations: ' + combinations);
        jQuery('#calculator-allup-combinations').html(combinations);

        var investment = parseFloat(jQuery('#Investment1').val());

        jQuery('#calculator-allup-totalcost').html(numeral(investment * combinations).format('$0,0.00'));

        if (jQuery('.allup-formula li button.selected').length == 0) {
            jQuery('div.calculator-buttons a, a.calculator-buttons').toggleClass('disabled', true);
        }
    }

    function calculateCombinations() {

        var totalcombinations = 0;

        if (jQuery('.allup-formula li button[value=1]').hasClass('selected')) {
            totalcombinations += Number(jQuery('#SingleCombinations').val());
        }
        if (jQuery('.allup-formula li button[value=2]').hasClass('selected')) {
            totalcombinations += Number(jQuery('#DoubleCombinations').val());
        }
        if (jQuery('.allup-formula li button[value=3]').hasClass('selected')) {
            totalcombinations += Number(jQuery('#TrebleCombinations').val());
        }
        if (jQuery('.allup-formula li button[value=4]').hasClass('selected')) {
            totalcombinations += Number(jQuery('#FoursCombinations').val());
        }
        if (jQuery('.allup-formula li button[value=5]').hasClass('selected')) {
            totalcombinations += Number(jQuery('#FivesCombinations').val());
        }
        if (jQuery('.allup-formula li button[value=6]').hasClass('selected')) {
            totalcombinations += Number(jQuery('#SixCombinations').val());
        }

        return totalcombinations;
    }

    function initBlackbookAddEntry() {
        var viewController = new blackbookAddViewController();
        blackbookAddViewBinding.bind(viewController, document.getElementById("main-container"));
        viewController.init();
    }

    //Preselect is called if there are preselections when first loading the starter page.
    function preselect(newState) {
        updateStartersState(false);

        if (newState) {
            changeToteStarterState(newState);
        }
    }

    //handles clicking on a race code tab on the meeting list page
    function getFobMeetings(url, listItem) {
        NAV.ajaxGet(url, function (data) {
            CMN.initDisplayListStyle(jQuery(listItem).html(data));
        });
    }

    return {
        states: states,
        initToteMeetings: initToteMeetings,
        initNextEvents: initNextEvents,
        initToteStarterList: initToteStarterList,
        refreshToteStarterList: refreshToteStarterList,
        initToteMystery: initToteMystery,
        handleBetError: handleBetError,
        handleMysteryError: handleMysteryError,
        initAllUpRaces: initAllUpRaces,
        refreshStarters: refreshStarters,
        initSelections: initSelections,
        starterTabSelect: starterTabSelect,
        initStarterResults: initStarterResults,
        initToteMeetingsList: initToteMeetingsList,
        initNextEventsList: initNextEventsList,
        rovingBankerTabSelect: rovingBankerTabSelect,
        rovingBankerWithSelect: rovingBankerWithSelect,
        updateStartersState: updateStartersState,
        toggleRovingBankerTabs: toggleRovingBankerTabs,
        resetMeetingFilters: resetMeetingFilters,
        preselect: preselect,
        initButtons: initButtons,
        initBetCostPopup: initBetCostPopup,
        initProposeBet: initProposeBet,
        initFixedOddsSelectionButton: initFixedOddsSelectionButton,
        initMySelectionsSection: initMySelectionsSection,
        initErrorWindow: initErrorWindow,
        changeToteStarterState: changeToteStarterState,
        createBetProposal: createBetProposal,
        initAddToteRacingToBetSlip: initAddToteRacingToBetSlip,
        updateBetWithButtonsForCash: updateBetWithButtonsForCash,
        processBetCostResponse: processBetCostResponse
};

})(__WEBPACK_IMPORTED_MODULE_0_requireExternal__,new Controllers.BetBuilder.AddBetSlip(new BetWalletService(Models.BetBuilder.BetWallet)), Models.Tote.Calculator, ErrorController, ToteBettingService, Controllers.Tote.Calculator, new BetSlipService(new BetSlipStore()), PreferencesService, new LocationDetailsAppender(null));



/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

legacyReturn.ToteBettingService = window.ToteBettingService = (function() {
    var enquiry = function (data) {
        data = data || jQuery('form#betting-form').serialize();
        var request = jQuery.ajax({
            url: '/api/totebet/betcost',
            data: data,
            type: "POST"
        });
        return request;
    };

    return {
        enquiry: enquiry
    };
})();


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

Models.namespace('Models.Tote');
Models.Tote.Calculator = (function () {
    "use strict";
    //Selectors
    var numberOfCombinationsSelector = '#NumberOfCombinations';
    var flexiTextSelector = '.flexi-box em';
    var hasInvestmentSelector = '#HasInvestment';
    var isAlwaysSelector = '#IsAllWays';

    //Accessors
    var getNumberOfCombinations = function() {
        return jQuery(numberOfCombinationsSelector).val();
    };
    var setNumberOfCombinations = function (combinations) {
        jQuery(numberOfCombinationsSelector).val(combinations);
    };
    var setFlexiText = function (flexiAmount) {
        jQuery(flexiTextSelector).text(flexiAmount + '%');
    };
    var setHasInvestment = function (hasInvestment) {
        jQuery(hasInvestmentSelector).val(hasInvestment);
    };
    var setIsAllways = function (isAllways) {
        jQuery(isAlwaysSelector).val(isAllways);
    };
    return {
        getNumberOfCombinations: getNumberOfCombinations,
        setNumberOfCombinations: setNumberOfCombinations,
        setFlexiText: setFlexiText,
        setHasInvestment: setHasInvestment,
        setIsAllways: setIsAllways,
    };
})();


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var jQuery = __webpack_require__(0);
var _ = __webpack_require__(2);
var legacyReturn = {};
var amplify = __webpack_require__(6);
var cryptojsm5d = __webpack_require__(19);
var cryptojs = { MD5: cryptojsm5d };
var numeral = __webpack_require__(18);
var swipe = __webpack_require__(20);
var MSG = __webpack_require__(4);
var LocationDetailsAppender = __webpack_require__(11);
var locking = __webpack_require__(10);
var NAV = __webpack_require__(3);
var CMN = __webpack_require__(5);
var TT = __webpack_require__(7);
var ErrorController = __webpack_require__(9);
var PreferencesService = __webpack_require__(8);
var TupleSpace = __webpack_require__(13);
var raceReplay = __webpack_require__(15);
var blackbookAddViewBinding = __webpack_require__(16);
var blackbookAddViewController = __webpack_require__(17);
var NOTE = __webpack_require__(12);
var jQueryToDictionary = __webpack_require__(14);

// Namespace for managing tote selection data
legacyReturn.TOTESEL = window.TOTESEL = (function() {
    var tabSelectionsArray = [];
    var isMultiRace = false;
    var isAllUpBetType = false;
    var isSNotationAvailable = false;
    var allUpFormula = "";
    var defaultFormula = "";
    //common strings
    var selected = "selected", checked = "checked", disabled = "disabled";

    //Creates an object to represent the selections for a tab.
    function tabSelections(raceNo, supportsField, sCount, title, isQuinella) {
        
        var self = this;
        this.isQuinella = isQuinella;
        this.raceNo = raceNo;
        this.supportsField = supportsField;
        this.sCount = sCount;
        this.title = title || "Race " + raceNo;
        this.starterName = "";
        this.sName = "S" + (sCount + 1);
        this.starters = [];
        this.sButtons = []; //S Buttons selected for this tab
        this.isField = false;
        this.isFixed = false;
        this.fixedPrice = "";
        this.propNum = "0";
        this.cache = null;
        this.hasMinSelections = hasMinSelections;
        this.hasMinAllUpSelections = hasMinAllUpSelections;
        this.hasNoSelections = hasNoSelections;
        this.getSelections = getSelections;
        this.selectionCount = selectionCount;
        this.getAllUpBetType = getAllUpBetType;
        this.getRaceNumber = getRaceNumber;
        self.isRacingFormat = false;
        this.isRovingBanker = false;
        this.allUpBetType = "Win";

        function hasMinSelections(min) {
            return (this.starters.length >= min) || this.isField;
        }

        function hasMinAllUpSelections() {

            if (this.allUpBetType == "Quinella") {
                return (this.starters.length >= 2) || this.isField;
            }

            return (this.starters.length >= 1) || this.isField;
        }

        function hasNoSelections() {
            return this.starters.length == 0 && this.sButtons.length == 0 && !this.isField;
        }

        function getSelections() {
            var seln = "";

            if (this.isField) {
                return "FD";
            }

            if (this.sButtons.length > 0) {
                //\u200B is a zero-width space so the string will break over multiple lines
                seln = this.sButtons.join(".\u200B");
            }

            if (this.starters.length > 0) {
                if (seln !== "") {
                    seln += "."; //add a dot if we already have sButtons in there
                }

                seln += this.starters.join(".\u200B");


                if (this.starters.length == 1 && this.starterName) {
                    if (seln) {
                        seln += " - ";
                    }

                    seln += this.starterName;
                }
            }

            return seln;
        }

        function selectionCount() {
            return this.starters.length;
        }

        function getAllUpBetType() {
            return this.allUpBetType;
        }

        function getRaceNumber() {
            return this.raceNo;
        }
    }

    function clearAllSelections() {

        var tabData;
        for (var i = 0; i < tabSelectionsArray.length; i++) {

            tabData = tabSelectionsArray[i];

            tabData.sButtons = [];
            tabData.starters = [];
            tabData.propNum = 0;
            tabData.isFixed = false;
            tabData.isField = false;
            tabData.isRovingBanker = false;
            tabData.isPlaceAvailable = false;
            tabData.isQuinellaAvailable = false;
            tabData.allUpBetType = "Win";
            var prefix = 'input[name="Tabs[' + i + '].';

            jQuery(prefix + 'Sel"]').val(tabData.starters.join("."));
            jQuery(prefix + 'IsField"]').val(tabData.isField);
            jQuery(prefix + 'SButt"]').val(tabData.sButtons.join("."));
            jQuery(prefix + 'AllUpBetType"]').val(tabData.allUpBetType);
            jQuery(prefix + 'RaceNo"]').val(tabData.raceNo);
        }
    }

    //Saves the current selections into the tabSelectionArray
    function saveSelections() {

        var index = jQuery("input#SelectedTab").length ? jQuery("input#SelectedTab").val() : 0;

        if (jQuery("ul.tabs.top li.ui-state-active").hasClass('roving-banker-tab')) {
            index = 0;
        }

        if (jQuery("ul.tabs.top li.ui-state-active").hasClass('roving-banker-with')) {
            index = 1;
        }

        var tabData = tabSelectionsArray[index],
            prefix = 'input[name="Tabs[' + index + '].',
            fixedSeln = jQuery('ul.runners-list a.fixed.selected'),
            fixedWin = 0,
            fixedPlace = 0;


        tabData.sButtons = [];
        tabData.starters = [];
        tabData.propNum = 0;
        tabData.isFixed = false;
        tabData.isField = false;
        tabData.isRovingBanker = false;

        var oddsAndEvensSelectedButton = jQuery('.odds-evens span.selected');
        var fobPropositionType = jQuery('#fobPropositionType');
        var winPriceHidden = jQuery('#FixedWinPrice');

        tabData.specialFobBet = null;
        fobPropositionType.val(null);
        if (oddsAndEvensSelectedButton.length > 0) {
            tabData.specialFobBet = oddsAndEvensSelectedButton.children('.js-propType').val();
            fobPropositionType.val(tabData.specialFobBet);
            winPriceHidden.val(oddsAndEvensSelectedButton.children('[name="fixed-win"]').val());
            var propNum = oddsAndEvensSelectedButton.children("[name=prop-num]").val();
            tabData.propNum = propNum;
            var propNumHidden = jQuery('#PropositionNumber');
            if (propNumHidden.length > 0) {
                propNumHidden.val(propNum);
            }
        }
        else if (fixedSeln.length) {
            tabData.isFixed = true;
            tabData.propNum = fixedSeln.children('input[name="prop-num"]').val();
            tabData.propSeq = fixedSeln.children('input[name="prop-seq"]').val();
            jQuery('#selectedStarterNumber').val(fixedSeln.children('input[name="fixed-num"]').val());
            tabData.starters.push(fixedSeln.children('input[name="fixed-num"]').val());
            tabData.starterName = fixedSeln.parents('li').find(".selection-name").text();
            jQuery('#selectedStarterName').val(tabData.starterName);
            tabData.fixedPrice = fixedSeln.find('div.fixed-pay').html();
            fixedWin = fixedSeln.children('input[name="fixed-win"]').val();
            fixedPlace = fixedSeln.children('input[name="fixed-place"]').val();

            if (jQuery('#PropositionNumber').length > 0) {
                jQuery('#PropositionNumber').val(tabData.propNum);
            }

            if (jQuery('#PropositionSequence').length > 0) {
                jQuery('#PropositionSequence').val(tabData.propSeq);
            }

            if (jQuery('#MultiPropositionNumber').length > 0) {
                jQuery('#MultiPropositionNumber').val(tabData.propNum);
            }

            if (jQuery('#FixedWinPrice').length > 0) {
                jQuery('#FixedWinPrice').val(fixedWin).change();
            }

            if (jQuery('#FixedPlacePrice').length > 0) {
                jQuery('#FixedPlacePrice').val(fixedPlace).change();
            }
        } else {
            if (jQuery('#PropositionNumber').length > 0) {
                jQuery('#PropositionNumber').val(0);
            }

            if (jQuery('#PropositionSequence').length > 0) {
                jQuery('#PropositionSequence').val(0);
            }

            if (jQuery('#MultiPropositionNumber').length > 0) {
                jQuery('#MultiPropositionNumber').val(0);
            }

            tabData.isField = jQuery('.totebet-field-button').hasClass(selected);
            tabData.isRovingBanker = jQuery('.rb-box').hasClass(selected);
            tabData.isLegin = jQuery('.legin-box').hasClass(selected);
            if (jQuery('.allup-group input[name="allup"]:checked:enabled').length > 0) {
                tabData.allUpBetType = jQuery('.allup-group input[name="allup"]:checked:enabled').val();
            }

            if (!tabData.isField) {
                var checkedStarters = jQuery('div.starter-tab input[name="starter"]:checked:enabled');
                checkedStarters.each(function () {
                    if (jQuery.inArray(jQuery(this).val(), tabData.starters) == -1) {
                        tabData.starters.push(jQuery(this).val());
                    }
                });

                if (tabData.isQuinella && tabSelectionsArray.length > 1 && index == 0) {
                    removeStarterSelectionFromTab(checkedStarters.val(), 1);
                }

                if (tabData.isRovingBanker && tabSelectionsArray.length > 1 && index == 0) {

                    checkedStarters.each(function () { removeStarterSelectionFromTab(jQuery(this).val(), 1); });
                }

                //if starters are not sorted by number, we need to convert back to starter order
                if (jQuery('input#SortOrder').val() !== 'Number') {
                    tabData.starters.sort(function (a, b) {
                        return a - b;
                    });
                }

                //if only one starter, save the name for the display
                if (tabData.starters.length == 1) {
                    tabData.starterName = checkedStarters.parents('li').find(".selection-name").text();
                }
                else {
                    tabData.starterName = "";
                }
            }

            if (isSNotationAvailable) {
                jQuery('span.s-button.selected').each(function () { tabData.sButtons.push(jQuery(this).text()); });

                //mark each input with a class to make disabling easier.
                jQuery('ul.runners-list input').each(function () {
                    jQuery(this).toggleClass(tabData.sName, jQuery(this).is(':checked:enabled'));
                });
            }
        }

        //update hidden fields so data is submitted.
        if (jQuery('#IsRovingBanker').length > 0) {
            jQuery('#IsRovingBanker').val(tabData.isRovingBanker);
        }
        jQuery(prefix + 'Sel"]').val(tabData.starters.join("."));
        jQuery(prefix + 'IsField"]').val(tabData.isField);
        jQuery(prefix + 'SButt"]').val(tabData.sButtons.join("."));
        jQuery(prefix + 'AllUpBetType"]').val(tabData.allUpBetType);
        jQuery(prefix + 'RaceNo"]').val(tabData.raceNo);

    }

    function removeStarterSelectionFromTab(starterNumber, tabIndex) {
        var tabData = tabSelectionsArray[tabIndex];
        var tempArray = new Array();

        var startersLen = tabData.starters.length;
        for (var i = 0; i < startersLen; i++) {
            if (tabData.starters[i] != starterNumber) {
                tempArray.push(tabData.starters[i]);
            }
        }

        tabData.starters = tempArray;

        if (tabData.starters.length == 1) {
            tabData.starterName = jQuery('div.starter-tab input[name="starter"][value="' + tabData.starters[0] + '"]').parents('li').find(".selection-name").text();
        }
    }

    //loads the starters from either the cache or the server
    function loadNewStarters(newIndex, url, callback) {
        var newTabData = tabSelectionsArray[newIndex];

        if (newTabData == null) {
            newTabData = null;
        }
        if (newTabData.cache) {
            displayNewStarters(newTabData.cache, newIndex, callback);
        } else {
            NAV.ajaxGet(url, function (data) {
                newTabData.cache = data;
                displayNewStarters(data, newIndex, callback);
            });
        }
    }

    //updates the displayed starters
    function displayNewStarters(data, newIndex, callback) {
        jQuery('div.starter-tab').html(data);
        CMN.initDisplayListStyle(jQuery('div.starter-tab ul:not(.silkforms)'));
        reloadSelections(newIndex);
        TOTE.initSelections();
        if (callback) {
            callback();
        }
    }

    //repopulates the selections into the input fields
    function reloadSelections(index, callback) {
        var tabData = tabSelectionsArray[index];
        var starterCheckBoxes = jQuery('div.starter-tab input[name="starter"]:not(.leginselection)');

        //clear selections first and remove disabled element for S-selections.
        starterCheckBoxes.removeAttr(checked).removeAttr(disabled);
        jQuery('span.field, span.s-button').removeClass(selected);
        jQuery('ul.runners-list a.tote').removeClass(selected);
        jQuery('ul.runners-list a.fixed').removeClass(selected);

        if (tabData.specialFobBet) {
            var fobPropButton = jQuery('.js-propType[value="' + tabData.specialFobBet + '"]').parent();
            if (!fobPropButton.hasClass(disabled)) {
                fobPropButton.addClass(selected);
            }
        }

        if (tabData.isQuinella) {
            jQuery('div.starter-tab input[type="radio"]').prop('disabled', true);
        }

        if (tabData.isLegin) {
            LEGIN.toggleOn();
        }

        if (tabData.isRovingBanker) {
            TOTE.toggleRovingBankerTabs(true, index);
        }

        //show/hide appropriate s-buttons

        if (!jQuery('.rb-box').hasClass(selected)) {
            jQuery('span.s-button').each(function () {
                jQuery(this).toggle(jQuery(this).index() < tabData.sCount);
                if (jQuery.inArray(jQuery(this).text(), tabData.sButtons) != -1) {
                    jQuery(this).addClass(selected);
                }
            });

            jQuery('.totebet-field-button').show();
        }
        else {
            if (jQuery("ul.tabs.top li.roving-banker-tab").hasClass('ui-state-active')) {

                jQuery('span.s-button').each(function () {
                    jQuery(this).hide();
                });

                jQuery('.totebet-field-button').hide();
            }
            else {
                jQuery('.totebet-field-button').show();

                disabledMatchingRovingBankers();
            }
        }

        //Samsung Galaxy III does not correctly redraw the S-buttons if they are not on-screen.
        CMN.redrawFix(jQuery('div.prefill-options'));

        //pre-select and disable anything selected by the s-buttons
        if (tabData.sButtons.length > 0) {
            var sbucket = tabData.sButtons.slice(0), //make a copy because the getFullSClasses modifies the argument
                filter = getFullSClasses(sbucket);

            starterCheckBoxes.filter(filter).prop(disabled, true).prop(checked, true);
        }

        //now reselect starters
        if (tabData.isField) {
            jQuery('.totebet-field-button').addClass(selected);
            starterCheckBoxes.prop(checked, true);
            jQuery('ul.runners-list a.tote').not('.disabled').addClass(selected);
        }
        else {
            if (tabData.isFixed) {
                jQuery('ul.runners-list input[name="prop-num"][value="' + tabData.propNum + '"]').parent('.fixed').not('.disabled').addClass(selected);
            } else {
                starterCheckBoxes.each(function () {
                    if (jQuery.inArray(jQuery(this).val(), tabData.starters) != -1) {
                        jQuery(this).prop(checked, true);
                        jQuery(this).parent('.tote').addClass(selected);
                    }
                });
            }
        }

        var prefix = 'input[name="Tabs[' + index + '].';

        if (jQuery(prefix + 'IsPlaceAllUpAvailable"]').length > 0) {
            jQuery('.allup-group input[value="Place"]').parent('li').show();
            jQuery('.allup-group input[value="Eachway"]').parent('li').show();
        } else {
            jQuery('.allup-group input[value="Place"]').parent('li').hide();
            jQuery('.allup-group input[value="Eachway"]').parent('li').hide();
        }

        if (jQuery(prefix + 'IsQuinellaAllUpAvailable"]').length > 0) {
            jQuery('.allup-group input[value="Quinella"]').parent('li').show();
        } else {
            jQuery('.allup-group input[value="Quinella"]').parent('li').hide();
        }

        jQuery('.allup-group input[value="' + tabData.allUpBetType + '"]').prop('checked', true); ;

        if (callback) {
            callback();
        }
    }

    ///Performs basic checks to see if the bet is legal
    // * For Win/Place, at least one selection is made
    // * For quinella, at least two selections.
    // * For exacta/trifecta/First4 at least 2/3/4 selections in the first leg (allways) or one in each leg.
    // * For double/quaddie/all up at least one selection in each leg.
    // S-Buttons count as selections for this logic.
    function isValidBet() {
        var enabled = false,
            allLegs = true,
            onlyFirst = true;

        //If there's a fixed odds selection it's automatically valid.
        if ((tabSelectionsArray.length > 0 && tabSelectionsArray[0].isFixed) || tabSelectionsArray[0].specialFobBet) {
            return true;
        }

        if (jQuery('#BetType').val() === 'AllUp') {

            var validAllUpLegs = true;
            for (var j = 0; j < tabSelectionsArray.length; j++) {
                if (tabSelectionsArray[j].hasNoSelections()) {
                    validAllUpLegs = false;
                } else if (tabSelectionsArray[j].hasMinAllUpSelections() == false) {
                    validAllUpLegs = false;
                }
            }

            enabled = validAllUpLegs;

        } else {
            for (var i = 0; i < tabSelectionsArray.length; i++) {
                if (tabSelectionsArray[i].hasNoSelections()) {
                    allLegs = false;
                } else if (i != 0) {
                    onlyFirst = false;
                }
            }

            //first do a special case check for quinella
            if (jQuery('#BetType').val() === 'Quinella') {
                if (jQuery('#quinellalegin-toggle').hasClass('selected')) {
                    enabled = tabSelectionsArray[0].starters.length == 1 && tabSelectionsArray[1].hasMinSelections(2);
                } else {
                    enabled = tabSelectionsArray[0].hasMinSelections(2);
                }
            } else if (jQuery('.rb-box').hasClass(selected)) {

                var minSelections = 0;

                if (jQuery('#BetType').val() === 'Exacta') {
                    minSelections = 2;
                }
                if (jQuery('#BetType').val() === 'Trifecta') {
                    minSelections = 3;
                } else if (jQuery('#BetType').val() === 'First4') {
                    minSelections = 4;
                }

                enabled = hasMinimumRbSelections(minSelections);
            }
            else {
                //all other bet types are good if there's one selection in each leg
                enabled = allLegs;

                //last case to check is for an allways bet
                if (!enabled && onlyFirst && jQuery('#BetType').is('.allways')) {
                    enabled = tabSelectionsArray[0].hasMinSelections(tabSelectionsArray.length);
                }
            }
        }

        return enabled;
    }

    function isValidFixedoddsBet() {
        if ((tabSelectionsArray.length > 0 && tabSelectionsArray[0].isFixed) || tabSelectionsArray[0].specialFobBet) {
            return true;
        }

        return false;
    }
    function isFixedOddsRacing() {
        return jQuery("#isFobRacing").val() === "true";
    }
    function getAllSelections() {
        var selections = "";
        var title = "";

        for (var i = 0; i < tabSelectionsArray.length; i++) {
            if (!tabSelectionsArray[i].hasNoSelections()) {
                if (tabSelectionsArray[i].isFixed) {
                    if (typeof self.isRacingFormat === 'undefined' || self.isRacingFormat === true) {
                        selections += "<li class='clearfix'><span class='position-name right-10'>W" + ((jQuery('#FixedPlacesPaying').val() > 1) ? "<br/>P" : "") + "</span><span class='position-value'>" + jQuery('#FixedWinPrice').val() + ((jQuery('#FixedPlacesPaying').val() > 1) ? ("<br/>" + jQuery('#FixedPlacePrice').val()) : "") + "</span><span class='data left-10'>" + tabSelectionsArray[i].getSelections() + "</span></li>";
                    } else {
                        selections += "<li><span class='title'>Seln No.</span><span class='data'>" + jQuery('#PropositionNumber').val() + "</span></li>";
                        selections += "<li><span class='title'>Selection</span><span class='data'>" + jQuery("#selectedStarterName").val() + "</span></li>";
                        selections += "<li class='win-return'><span class='title'>Win Return</span><span class='data'>$" + jQuery("#FixedWinPrice").val() + "</span></li>";
                        if (jQuery("#IsEachWayAvailable").val() === 'True') {
                            selections += "<li class='place-return'><span class='title'>Plc Return</span><span class='data'>$"
                                + jQuery("#FixedPlacePrice").val() + "</span></li>";
                        }
                    }

                } else {

                    if (jQuery('.rb-box').hasClass(selected)) {

                        title = 'WITH';
                        if (i === 0) {
                            title = 'RB';
                        }

                        selections += "<li><span class='title'>" + title + "</span><span class='data'>" + tabSelectionsArray[i].getSelections() + "</span></li>";
                    }
                    else {

                        if (isAllUpBetType) {
                            title = "Race " + tabSelectionsArray[i].raceNo;

                            selections += "<li><span class='title'>" + title + "</span><span class='data'>" + '(' + tabSelectionsArray[i].getAllUpBetType() + ')' + '&nbsp' + tabSelectionsArray[i].getSelections() + "</span></li>";
                        } else {
                            title = tabSelectionsArray[i].title;
                            if (tabSelectionsArray[i].isQuinella && !LEGIN.isLeginSelected()) {
                                title = "Race " + tabSelectionsArray[i].raceNo;
                            }

                            selections += "<li><span class='title'>" + title + "</span><span class='data'>" + tabSelectionsArray[i].getSelections() + "</span></li>";
                        }

                    }
                }
            } else if (tabSelectionsArray[i].specialFobBet) {
                selections = "<li class='clearfix'><span class='position-name right-10'>W" + "</span><span class='position-value'>" + jQuery('.odds-evens span.selected').children('span').first().html() + "</span><span class='data left-10'>" + tabSelectionsArray[i].specialFobBet + "</span></li>";
            }
        }

        return selections;
    }

    //Returns "fixed" if the user has selected a fixed bet, "tote" for a tote bet, "none" for no selections.
    //Only checks the first tab, so only valid for win/place bets.
    function getFixedToteType() {
        if (tabSelectionsArray[0].isFixed || tabSelectionsArray[0].specialFobBet) {
            return "fixed";
        }

        if (tabSelectionsArray[0].hasNoSelections()) {
            return "none";
        }

        return "tote";
    }

    function getSubProductTypeHeaderText() {
        var spFobBet = tabSelectionsArray[0].specialFobBet;
        if (spFobBet === "Odds" || spFobBet === "Evens") {
            return "ODDS <span class='text-lower'>vs</span> EVENS";
        }
        if (spFobBet === "Inside" || spFobBet === "Outside") {
            return "INSIDE <span class='text-lower'>vs</span> OUTSIDE";
        }

        return "";
    }

    //returns a jquery selector that will cover all inputs that correspond to a given set of Sbutton selections
    //sourceArray is the list of the selected buttons. It will be modified by this function.
    function getFullSClasses(sourceArray) {
        var targetData;

        if (sourceArray.length == 0) {
            return "";
        }

        for (var index = tabSelectionsArray.length - 1; index >= 0; index--) {
            targetData = tabSelectionsArray[index];

            //if this index is referenced by the current tab
            if (jQuery.inArray(targetData.sName, sourceArray) != -1) {
                for (var sfields = 0; sfields < targetData.sButtons.length; sfields++) {
                    //find any s references in this tab and add them to the bucket (if not already there)
                    if (jQuery.inArray(targetData.sButtons[sfields], sourceArray) == -1) {
                        sourceArray.push(targetData.sButtons[sfields]);
                    }
                }
            }
        }

        return "." + sourceArray.join(",.");
    }

    function disabledMatchingRovingBankers() {

        jQuery('div.starter-tab input[name="starter"]').filter('.S1').prop(disabled, true).prop(checked, true);
    }

    function clearCache() {
        for (var i = 0; i < tabSelectionsArray.length; i++) {
            tabSelectionsArray[i].cache = null;
        }
    }

    // Sets up the global array that keeps track of the user's selections
    function initTabArray(tabCount, races, supportsField, supportsSNotation, isMulti, isQuinella, isAllUp, isPreselect, isRacingFormat) {
        tabSelectionsArray = [];
        isMultiRace = isMulti;
        isSNotationAvailable = supportsSNotation;
        isAllUpBetType = isAllUp;
        allUpFormula = "";
        defaultFormula = "";
        self.isRacingFormat = isRacingFormat;
        for (var i = 0; i < tabCount; i++) {
            tabSelectionsArray.push(new tabSelections(races[i], supportsField, supportsSNotation ? i : 0, jQuery("ul.tabs.top a").eq(i).text(), isQuinella, isRacingFormat));
        }

        //if isPreselect is true it means there are some selections in the HTML that we need to maintain.
        //Only coded/tested for FOB pre-selections so far.
        if (isPreselect) {
            saveSelections();
        }

        changeToTab(0);
    }

    //changes to a new TAB
    function changeToTab(newIndex, url, callback) {
        if (isMultiRace) {
            // if it's multi-race we'll have to load the starters from either the cache or server
            url = url ? url : jQuery("ul.tabs.top li.ui-state-active a").attr("href");
            loadNewStarters(newIndex, url, callback);
        }
        else {
            reloadSelections(newIndex, callback);
        }
    }

    function hasMinimumRbSelections(minSelections) {

        var hasMinimum = false;
        var noOfSelections = 0;
        var allLegs = false;

        if (tabSelectionsArray.length > 1) {

            allLegs = tabSelectionsArray[0].hasMinSelections(1) && tabSelectionsArray[1].hasMinSelections(1);

            noOfSelections += tabSelectionsArray[0].selectionCount() + tabSelectionsArray[1].selectionCount();

            if (allLegs) {
                // Doesnt include field
                if (noOfSelections >= minSelections) {
                    hasMinimum = true;
                } else {
                    if (tabSelectionsArray[0].hasMinSelections(1) && tabSelectionsArray[1].isField) {
                        hasMinimum = true;
                    }

                }
            }
        }

        return hasMinimum;
    }

    function getRaceTabByRaceNumber(raceNumber) {
        var raceTab = null;

        for (var index = 0; index < tabSelectionsArray.length; index++) {

            if (tabSelectionsArray[index].raceNo == raceNumber) {
                raceTab = tabSelectionsArray[index];
                break;
            }
        }

        return raceTab;
    }

    function getRaceTabByIndex(index) {
        var raceTab = null;

        if (index >= 0 && index < tabSelectionsArray.length) {
            raceTab = tabSelectionsArray[index];
        }

        return raceTab;
    }

    function createRaceTab(raceNumber, supportsField, sCount, isMulti, title, isQuinella) {
        return new tabSelections(raceNumber, supportsField, sCount, title, isQuinella);
    }

    function replaceRaceTabs(newRaceTabs) {
        tabSelectionsArray = newRaceTabs;
    }

    function tabExists(index) {
        var newTabData = tabSelectionsArray[index];

        if (newTabData) {
            return true;
        }

        return false;
    }

    function getSelections(index) {

        return tabSelectionsArray[index].starters;
    }

    function refreshHiddenFields() {

        for (var index = 0; index < tabSelectionsArray.length; index++) {
            var tabData = tabSelectionsArray[index],
                prefix = 'input[name="Tabs[' + index + '].';

            //update hidden fields so data is submitted.
            if (jQuery('#IsRovingBanker').length > 0) {
                jQuery('#IsRovingBanker').val(tabData.isRovingBanker);
            }
            jQuery(prefix + 'Sel"]').val(tabData.starters.join("."));
            jQuery(prefix + 'IsField"]').val(tabData.isField);
            jQuery(prefix + 'SButt"]').val(tabData.sButtons.join("."));
            jQuery(prefix + 'AllUpBetType"]').val(tabData.allUpBetType);
            jQuery(prefix + 'RaceNo"]').val(tabData.raceNo);
        }
    }

    function setAllUpFormula(formula) {
        allUpFormula = formula;
    }

    function getAllUpFormula() {
        return allUpFormula;
    }

    function setDefaultFormula(option) {
        defaultFormula = option;
    }

    function getDefaultFormula() {
        return defaultFormula;
    }

    function isSpecialFobPropositionSelected() {
        return getRaceTabByIndex(0).specialFobBet && getRaceTabByIndex(0).specialFobBet.length > 0;
    }

    function isInsideOutsideSelected() {
        return  getRaceTabByIndex(0).specialFobBet.toUpperCase() === 'INSIDE' ||
                getRaceTabByIndex(0).specialFobBet.toUpperCase() === 'OUTSIDE';
    }

    function isOddsEvensSelected() {
        return  getRaceTabByIndex(0).specialFobBet.toUpperCase() === 'ODDS' ||
                getRaceTabByIndex(0).specialFobBet.toUpperCase() === 'EVENS';
    }

    function setSelectedTab(tabId) {
        jQuery("#SelectedTab").val(tabId);
    }

    return {
        saveSelections: saveSelections,
        getFullSClasses: getFullSClasses,
        changeToTab: changeToTab,
        clearCache: clearCache,
        isValidBet: isValidBet,
        getAllSelections: getAllSelections,
        getSelections: getSelections,
        getFixedToteType: getFixedToteType,
        initTabArray: initTabArray,
        clearAllSelections: clearAllSelections,
        getRaceTabByIndex: getRaceTabByIndex,
        getRaceTabByRaceNumber: getRaceTabByRaceNumber,
        replaceRaceTabs: replaceRaceTabs,
        tabExists: tabExists,
        createRaceTab: createRaceTab,
        refreshHiddenFields: refreshHiddenFields,
        setAllUpFormula: setAllUpFormula,
        getAllUpFormula: getAllUpFormula,
        setDefaultFormula: setDefaultFormula,
        getDefaultFormula: getDefaultFormula,
        isValidFixedoddsBet: isValidFixedoddsBet,
        isFixedOddsRacing: isFixedOddsRacing,
        getSubProductTypeHeaderText: getSubProductTypeHeaderText,
        isSpecialFobPropositionSelected: isSpecialFobPropositionSelected,
        isInsideOutsideSelected: isInsideOutsideSelected,
        isOddsEvensSelected: isOddsEvensSelected,
        setSelectedTab : setSelectedTab
    };

})();


/***/ }),
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */
/***/ (function(module, exports) {

module.exports = "<form data-bind=\"submit: attemptChangePassword\">\n\n    <!-- ko if: !!errorMessage() -->\n    <span class=\"big-14-10 field__error bottom-spacing\" data-bind=\"text: errorMessage\"></span>\n    <!-- /ko -->\n    <span class=\"field field--text field-plain-text-password\" data-bind=\"css: { 'has-content': !!plaintextPassword(), 'has-focus': plaintextPasswordFocused() }\">\n        <span class=\"field__input\">\n            <input id=\"plain-text-password-input\" required=\"required\" tabindex=\"100\" autofocus=\"autofocus\" data-bind=\"textInput: plaintextPassword, hasFocus: plaintextPasswordFocused, attr: { type: passwordInputType }\" />\n        </span>\n        <span class=\"field__label\">\n            <label for=\"plain-text-password-input\">Enter a new password</label>\n        </span>\n    </span>\n    <span class=\"field-toggle\">\n        <span class=\"field field--check field-display-password\">\n            <span class=\"field__input\">\n                <input id=\"display-password-input\" type=\"checkbox\" tabindex=\"101\" autofocus=\"autofocus\" data-bind=\"checked: displayPassword\" />\n            </span><!--\n            --><span class=\"field__label\">\n                <div class=\"onoffswitch\">\n                    <input type=\"checkbox\" name=\"onoffswitch\" data-bind=\"checked: displayPassword\" class=\"onoffswitch-checkbox\" id=\"myonoffswitch\" checked>\n                    <label class=\"onoffswitch-label\" for=\"myonoffswitch\">\n                        <span class=\"onoffswitch-inner\"></span>\n                        <span class=\"onoffswitch-switch\"></span>\n                    </label>\n                </div>\n            </span>\n        </span>\n    </span>\n    <section class=\"info info--validations info--validations--password\">\n        <span class=\"info__validation info__validation--numbers-only\" data-bind=\" css: {'is-met': conditionNumbersOnly, 'is-not-met': !conditionNumbersOnly()}\">\n            <span class=\"check-icon\" data-bind=\" css: {'is-met': conditionNumbersOnly, 'is-not-met': !conditionNumbersOnly()}\"></span>\n            <span class=\"valign-validation-text left-spacing\">Numbers only</span>\n        </span><!--\n        --><span class=\"info__validation info__validation--length\" data-bind=\" css: {'is-met': conditionLength, 'is-not-met': !conditionLength()}\">\n            <span class=\"check-icon\" data-bind=\" css: {'is-met': conditionLength, 'is-not-met': !conditionLength()}\"></span>\n            <span class=\"valign-validation-text left-spacing\">4 - 8 numbers</span>\n        </span><!--\n        --><span class=\"info__validation info__validation--not-account-number\" data-bind=\" css: {'is-met': conditionNotEqualToAccountNumber, 'is-not-met': !conditionNotEqualToAccountNumber()}\">\n            <span class=\"check-icon\" data-bind=\" css: {'is-met': conditionNotEqualToAccountNumber, 'is-not-met': !conditionNotEqualToAccountNumber()}\"></span>\n            <span class=\"valign-validation-text left-spacing\">Different from your account number</span>\n        </span><!--\n        --><span class=\"info__validation info__validation--non-repeating\" data-bind=\" css: {'is-met': conditionRepeatingDigits, 'is-not-met': !conditionRepeatingDigits()}\">\n            <span class=\"check-icon\" data-bind=\" css: {'is-met': conditionRepeatingDigits, 'is-not-met': !conditionRepeatingDigits()}\"></span>\n            <span class=\"valign-validation-text left-spacing\">Should not contain the same digit more than twice in succession</span>\n        </span>\n    </section><!--\n    --><section class=\"info info-reuse-notice top-spacing\">\n        <span class=\"validation-note\">\n            <span><strong>Note:</strong></span>\n            <span class=\"left-spacing\">The new password must not be the same as the last four passwords used</span>\n        </span>\n    </section><!--\n    --><span class=\"field field--submit field-next\" data-bind=\"css: {'is-disabled': !isValid()}\">\n        <span class=\"field__input\">\n            <button id=\"submit-next\" tabindex=\"201\" data-bind=\"enable: isValid\">Next</button>\n        </span>\n    </span>\n</form>\n\n<footer>\n    <span class=\"field field--link field-call\">\n        <a href=\"tel:1300363688\" tabindex=\"301\">\n            <span>\n                <span class=\"phone-text\">\n                    <span>For assistance,</span>\n                    <span>please call</span>\n                </span>\n                <span class=\"call-icon\"></span>\n            </span>\n            <span class=\"phone-number\">\n                1300 36 36 88\n            </span>\n        </a>\n    </span>\n</footer>"

/***/ }),
/* 351 */
/***/ (function(module, exports) {

module.exports = "<form data-bind=\"submit: attemptLogin\">\n    <span class=\"field field--text field-account-number\" data-bind=\"css: { 'has-content': !!accountNumber(), 'has-focus': accountNumberFocused(), 'has-error': !!errorMessage() }\">\n\t    <!--ko if: !!errorMessage()-->\n        <span class=\"field__error\" data-bind=\" text: errorMessage()\"></span><!--/ko\n        --><span class=\"field__input\">\n            <input id=\"account-number-input\" type=\"tel\" tabindex=\"200\" data-bind=\"textInput: accountNumber, hasFocus: accountNumberFocused\" maxlength=\"8\" data-tid-login-account=\"\" />\n        </span>\n        <span class=\"field__label\">\n            <label for=\"account-number-input\">Account Number</label>\n        </span>\n        <a href=\"#\" class=\"field__rel-link\" tabindex=\"300\" data-bind=\"click: beginRecoverAccountNumber\">Forgot account number</a>\n    </span><!-- This comment allows us to put the spans on different lines without introducing whitespace between them.\n    If we didn't two `50%` width spans would not fit next to each other.\n    --><span class=\"field field--text field-account-password\" data-bind=\"css: { 'has-content': !!password(), 'has-focus': passwordFocused() }\">\n        <span class=\" field__input\">\n            <input id=\"password-input\" type=\"password\" tabindex=\"201\" data-bind=\"textInput: password, hasFocus: passwordFocused\" maxlength=\"8\" data-tid-login-password=\"\" />\n        </span>\n        <span class=\"field__label\">\n            <label for=\"password-input\">Password</label>\n        </span>\n        <a href=\"#\" class=\"field__rel-link\" tabindex=\"301\" data-bind=\"click: beginRecoverPassword\">Forgot password</a>\n    </span><!--\n    --><span class=\"field field--check field-remember-user top-spacing\" data-bind=\" css: {'checkbox-has-focus': rememberUserFocused() }\">\n    <span class=\" field__input\">\n        <input id=\"remember-input\" tabindex=\"202\" type=\"checkbox\" data-bind=\"checked: rememberUser, hasFocus:rememberUserFocused\" />\n    </span>\n    <span class=\"field__label\">\n        <label for=\"remember-input\">Remember me</label>\n    </span>\n</span><!--\n    --><span class=\"field field--submit field-login top-spacing\" data-bind=\"css: {'is-disabled': !isValid()}\">\n    <span class=\"field__input\">\n        <button id=\"submit-login\" data-bind=\"enable: isValid()\" tabindex=\" 203\" data-tid-login-submit=\"\">Login</button>\n    </span>\n</span>\n</form>\n<footer>\n    <span class=\"field field--link field-call\">\n        <a href=\"tel:1300363688\" tabindex=\"301\">\n            <span>\n                <span class=\"phone-text\">\n                    <span>For assistance,</span>\n                    <span>please call</span>\n                </span>\n                <span class=\"call-icon\"></span>\n            </span>\n            <span class=\"phone-number\">\n                1300 36 36 88\n            </span>\n        </a>\n    </span><!--\n    --><span class=\"field field--submit field-sign-up\" data-bind=\"click: signUp\">\n    <span>\n        Don&#8217;t have an account?\n    </span>\n    <button id=\"submit-signup\" class=\"btn orange-button\" tabindex=\"302\">Sign up now</button>\n</span>\n</footer>"

/***/ }),
/* 352 */
/***/ (function(module, exports) {

module.exports = "<div class=\"neo\" data-bind=\"css: { 'logon': showLogon, 'recover-password': showRecoverPassword}\">\n    <header>\n        <!-- ko if: !!backHandler() -->\n        <a href=\"#\" class=\"button button--back\" tabindex=\"500\" data-bind=\"click: backHandler()\">\n            <span class=\"visuallyhidden\">Back</span>\n        </a>\n        <!-- /ko -->\n        <h4 data-bind=\"text: heading\"></h4>\n        <a href=\"#\" class=\"button button--close\" tabindex=\"501\" data-bind=\"click: close\">\n            <span class=\"visuallyhidden\">Close dialog</span>\n        </a>\n    </header>\n\n    <tt-progress-steps params=\"delegate: progressDelegate\"></tt-progress-steps>\n\n    <!-- ko if: showLogon -->\n    <tt-logon params=\"delegate: logonDelegate, logonUrl: logonUrl\"></tt-logon>\n    <!-- /ko -->\n\n    <!-- ko if: showRecoverPassword -->\n    <tt-recover-password params=\"delegate: recoverPasswordDelegate\"></tt-recover-password>\n    <!-- /ko -->\n    \n    <!-- ko if: showRecoverAccountNumber -->\n    <tt-recover-account-number params=\"delegate: recoverAccountNumberDelegate\"></tt-recover-account-number>\n    <!-- /ko -->\n\n    <!-- ko if: showChangePassword -->\n    <tt-logon-change-password params=\"delegate: changePasswordDelegate, changePasswordUrl: changePasswordUrl\"></tt-logon-change-password>\n    <!-- /ko -->\n</div>"

/***/ }),
/* 353 */
/***/ (function(module, exports) {

module.exports = "<span class=\"progress-indicator\" data-bind=\"foreach: steps()\">\n    <span class=\"circle\" data-bind=\"css: {'selected': $parent.isCurrentStep($index)}\"></span>\n</span>\n"

/***/ }),
/* 354 */
/***/ (function(module, exports) {

module.exports = "<!-- ko if: remoteComponentLoadedWithoutError -->\n    <rwwa-identity-recover-account-number params=\"delegate: delegate\"></rwwa-identity-recover-account-number>\n<!-- /ko -->\n\n<!-- ko if: errorLoadingRemote -->\n<p class=\"fg-gray-lightest\">\n    Account number recovery service is currently unavailable.\n</p>\n<span class=\"field field--link field-call\">\n    <span class=\"center-text\">\n        <a href=\"tel:1300363688\" tabindex=\"301\">\n            <span class=\"phone-text\">\n                <span>For assistance, please call</span>\n                <span class=\"phone-number\">1300 36 36 88</span>\n            </span>\n            <span class=\"call-icon2\"></span>\n        </a>\n    </span>\n</span>\n<!-- /ko -->"

/***/ }),
/* 355 */
/***/ (function(module, exports) {

module.exports = "<!-- ko if: remoteComponentLoadedWithoutError -->\n    <rwwa-identity-recover-password params=\"delegate: delegate\"></rwwa-identity-recover-password>\n<!-- /ko -->\n\n<!-- ko if: errorLoadingRemote -->\n<p class=\"fg-gray-lightest\">\n    Password recovery service is currently unavailable.\n</p>\n<span class=\"field field--link field-call\">\n    <span class=\"center-text\">\n        <a href=\"tel:1300363688\" tabindex=\"301\">\n            <span class=\"phone-text\">\n                <span>For assistance, please call</span>\n                <span class=\"phone-number\">1300 36 36 88</span>\n            </span>\n            <span class=\"call-icon2\"></span>\n        </a>\n    </span>\n</span>\n<!-- /ko -->"

/***/ }),
/* 356 */
/***/ (function(module, exports) {

module.exports = "<input type=\"number\" class=\"numpad-replaceable\" data-bind=\"textInput: Amount\" style=\"display: none\" />\n<span data-key=\"calcDisplay\" class=\"numpad-finput\" data-bind=\"css : {'finput-focus': IsNumberPadVisible()}, text: AmountString, click: ShowNumberPad\"></span>\n<a data-key=\"calcDisplayClear\" class=\"tticon tticon-cross finput-clear\" data-bind=\"click: ClearAmount\"><span class=\"accessible\">Clear</span></a>\n"

/***/ }),
/* 357 */
/***/ (function(module, exports) {

module.exports = "<div class=\"inputbar\" data-bind='component: { name: \"amountinput\", params: BetAmount }'></div>\n<div data-bind='component: { name: \"numberpad\", params: Calculator }, visible: BetAmount.IsNumberPadVisible'></div>"

/***/ }),
/* 358 */
/***/ (function(module, exports) {

module.exports = "<!--<div >-->\n    <div class=\"numpad\">\n        <div class=\"row clearfix r0 l0\">\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc50c\" class=\"quickpick\" data-bind=\"css: {disabled: (Calculator.BetAmount.Step() != 0.5)}, click: function(data,event){ UpdateAmount(.5); return false;}, clickBubble: false\">50c</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc1d\" class=\"quickpick\" data-bind=\"click: function(data,event){ UpdateAmount(1); return false;}, clickBubble: false\">$1</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc5d\" class=\"quickpick\" data-bind=\"click: function(data,event){ UpdateAmount(5); return false;}, clickBubble: false\">$5</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc10d\" class=\"quickpick\" data-bind=\"click: function(data,event){ UpdateAmount(10); return false;}, clickBubble: false\">$10</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc50d\" class=\"quickpick\" data-bind=\"click: function(data,event){ UpdateAmount(50); return false;}, clickBubble: false\">$50</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc100d\" class=\"quickpick\" data-bind=\"click: function(data,event){ UpdateAmount(100); return false;}, clickBubble: false\">$100</a></div>\n        </div>\n        <div class=\"row clearfix r0 l0\">\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc1n\" data-bind=\"click: function(data,event){ AppendAmount('1'); return false;}, clickBubble: false\">1</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc2n\" data-bind=\"click: function(data,event){ AppendAmount('2'); return false;}, clickBubble: false\">2</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc3n\" data-bind=\"click: function(data,event){ AppendAmount('3'); return false;}, clickBubble: false\">3</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc4n\" data-bind=\"click: function(data,event){ AppendAmount('4'); return false;}, clickBubble: false\">4</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc5n\" data-bind=\"click: function(data,event){ AppendAmount('5'); return false;}, clickBubble: false\">5</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calcdn\" class=\"key-decimal\" data-bind=\"css: {disabled: (Calculator.BetAmount.Step() != 0.5)}, click: function(data,event){ AppendAmount('.'); return false;}, clickBubble: false\">.</a></div>\n        </div>\n        <div class=\"row clearfix r0 l0\">\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc6n\" data-bind=\"click: function(data,event){ AppendAmount('6'); return false;}, clickBubble: false\">6</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc7n\" data-bind=\"click: function(data,event){ AppendAmount('7'); return false;}, clickBubble: false\">7</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc8n\" data-bind=\"click: function(data,event){ AppendAmount('8'); return false;}, clickBubble: false\">8</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc9n\" data-bind=\"click: function(data,event){ AppendAmount('9'); return false;}, clickBubble: false\">9</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calc0n\" data-bind=\"click: function(data,event){ AppendAmount('0'); return false;}, clickBubble: false\">0</a></div>\n            <div class=\"col-xs-2 pr0 pl0\"><a data-key=\"calcBS\" class=\"key-backspace\" data-bind=\"click: function(data,event){ BackSpaceAmount(); return false;}, clickBubble: false\"><span class=\"tticon tticon-backspace\"><span class=\"accessible\">Backspace</span></span></a></div>\n        </div>\n    </div>\n<!--</div>-->\n"

/***/ }),
/* 359 */
/***/ (function(module, exports) {

module.exports = "<div class=\"mystery-pool-type-container\">\n    <div class=\"mystery-pool-type clearfix\" data-bind=\"foreach: BetTypes\">\n        <div class=\"mystery-pool-type-item\" data-bind=\"css : {'selected': IsActive(), 'disabled': IsDisabled}, click: function(data,event){ $parent.UpdateActiveBetType(data); return false;}\">\n            <a><span class=\"mystery-type pool-type\" data-bind=\"text: Name, css: Type.toLowerCase()\"></span></a>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 360 */
/***/ (function(module, exports) {

module.exports = "<span data-bind='component: { name: \"mysterybet-bettypes\", params: BetTypesComponentViewModel }'></span>\n<h3 class=\"mystery-number-of-bets\">Option</h3>\n<span data-bind='component: { name: \"mysterybet-options\", params: OptionsComponentViewModel }'></span>\n<h3 class=\"mystery-number-of-bets\">Number of bets</h3>\n<span data-bind='component: { name: \"mysterybet-numberofbets\", params: NumberOfBetsComponentViewModel }'></span>\n<h3 class=\"mystery-number-of-bets\">Spend per bet</h3>\n<div class=\"mystery-flexi\" data-bind='visible: BetTypesComponentViewModel.ActiveBetType().Type !== \"WinPlace\" && BetTypesComponentViewModel.ActiveBetType().Type !== \"Combo\"'>\n    <div class=\"mystery-flexi-container\">\n        <span class=\"mystery-flexi-label\">\n            Flexi\n            <span class=\"mystery-flexi-percent\" data-bind=\"html: FlexiPercent\"></span>\n        </span>\n        <span data-bind='component: { name: \"calculator\", params: BetAmountViewModelForFourBetType}, click: function(){ ActivateCalculator(BetAmountViewModelForFourBetType); return false;}, clickBubble: false'></span>\n    </div>\n</div>\n<div class=\"mystery-win-place-amount-container\" data-bind='visible: BetTypesComponentViewModel.ActiveBetType().Type === \"WinPlace\"'>\n    <div class=\"mystery-win-place-amount\">\n        <label>Win (Tote)</label>\n        <span data-bind='component: { name: \"calculator\", params: BetAmountViewModelForWin}, click: function(){ ActivateCalculator(BetAmountViewModelForWin); return false;}, clickBubble: false'></span>\n        <label>Place (Tote)</label>\n        <span data-bind='component: { name: \"calculator\", params: BetAmountViewModelForPlace}, click: function(){ ActivateCalculator(BetAmountViewModelForPlace); return false;}, clickBubble: false'></span>\n    </div>\n</div>\n<div class=\"mystery-combo-amount-container\" data-bind='visible: BetTypesComponentViewModel.ActiveBetType().Type === \"Combo\"'>\n    <div class=\"mystery-combo-amount\">\n        <span data-bind='component: { name: \"calculator\", params: BetAmountViewModelForCombo}, click: function(){ ActivateCalculator(BetAmountViewModelForCombo); return false;}, clickBubble: false'></span>\n    </div>\n</div>"

/***/ }),
/* 361 */
/***/ (function(module, exports) {

module.exports = "<div class=\"mystery-calculator-container\">\n    <div class=\"mystery-calculator\">\n        <div class=\"mystery-calculator-list\" data-bind=\"foreach: NumberOfBetsViewModels\">\n            <div class=\"mystery-calculator-list-item\" data-bind=\"css : {'selected': IsActive()}, text: Value, click: function(data,event){ $parent.UpdateActiveNumberOfBets(data); return false;}\">\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 362 */
/***/ (function(module, exports) {

module.exports = "<div class=\"mystery-combination-container\">\n    <div class=\"mystery-combination clearfix\" data-bind=\"foreach: OptionViewModels\">\n        <div class=\"mystery-combination-item\" data-bind=\"css : {'selected': IsActive()}, click: function(data,event){ $parent.UpdateActiveOption(data); return false;}\">\n            <span class=\"combination-large\" data-bind=\"text: OptionNumber\"></span>\n            <span class=\"combination-small\" data-bind=\"text: NumberOfCombinations\"></span>\n            <span data-bind=\"text: Description\"></span>\n        </div>\n    </div>\n</div>\n<div class=\"mystery-bet-explanation-container\">\n    <div class=\"mystery-bet-explanation-message\">\n        <span class=\"mystery-bet-exclaim tticon tticon-infoinvertround\"></span>\n        <span data-bind=\"text: ActiveOption().BetExplanation\"></span>\n    </div>\n</div>"

/***/ }),
/* 363 */
/***/ (function(module, exports) {

module.exports = "<div class=\"mystery-bet-type-container\">\n\n    <div class=\"mystery-bet-type clearfix\" data-bind=\"foreach: QuickPicks\">\n\n        <div class=\"mystery-bet-type-item\" data-bind=\"css : {'selected': IsActive(), 'disabled': IsDisabled}, click: function(data,event){ $parent.UpdateActiveQuickPick(data); return false;}, clickBubble: false\">\n            <a>\n                <span class=\"mystery-amount\" data-bind=\"text: CostString\"></span> <span class=\"mystery-type\" data-bind=\"text: Name\"></span>\n            </a>\n        </div>\n    </div>\n\n</div>\n"

/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = "<span data-bind='component: { name: \"mysterybet-quickpicks\", params: QuickPicksComponentViewModel }'></span>\n<h3 class=\"mystery-number-of-bets\">Number of bets</h3>\n<span data-bind='component: { name: \"mysterybet-numberofbets\", params: NumberOfBetsComponentViewModel }'></span>"

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = "<div class=\"mystery-tabs-container\">\n    <div class=\"mystery-tabs\" data-bind=\"foreach: TabViewModels\">\n        <div class=\"mystery-tabs-item\" data-bind=\"css : {'selected': IsActive()}, text: Name, click: function(data,event){ $parent.UpdateActiveTab(data); return false;}, clickBubble: false\"></div>\n    </div>\n</div>"

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = "<div id=\"modal-container\" class=\"popup\"  data-bind=\"style: {display : isOpen()? 'block' : 'none'}\">\n    <header class=\"modal__header\">\n\n        <!-- ko if: showBackButton -->\n        <a href=\"#\" class=\"button button--back\" tabindex=\"500\" data-bind=\"click: back\">\n            <span class=\"visuallyhidden\">Back</span>\n        </a>\n        <!-- /ko -->\n\n        <h4 class=\"fz-21\" data-bind=\"text: title\"></h4>\n        <a href=\"#\" class=\"button button--close\" tabindex=\"501\" data-bind=\"click: close\">\n            <span class=\"visuallyhidden\">Close dialog</span>\n        </a>\n    </header>\n\n    <!-- ko if: displayComponent -->\n\n    <div data-bind=\"component: { name: component().name, params: component().params }\"></div>\n    <!--<tt-remote params=\"{factory: factory(), title: title()}\"></tt-remote>-->\n    <!-- /ko -->\n\n</div> "

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = "<div>\n    <div class=\"remote-app-host\">\n        <div data-bind=\"visible: isLoading\" class=\"modalSection m1em pb70 pt70\">\n            <div class=\"center-text\">\n                <div class=\"spinner spinner-purple fz-24\" style=\"display: block; margin: auto;\"></div>\n            </div>\n        </div>\n\n        <div data-bind=\"visible: isError\" class=\"modalSection m1em text-center fadein\">\n            <span class=\"alertBox__icon alertBox__icon--confirm\"></span>\n            <div class=\"pb5 pt10 fz-16 faux-strong\" data-bind=\"text: title\">\n                Deposits are not enabled for this account\n            </div>\n            <div class=\"alertBox__text\"\n                 data-tid-alertboxmessage=\"\">\n                Service is currently unavailable.<br/>\n                Please contact our Customer Service Centre on <a href=\"tel:1300363688\">1300 36 36 88</a> for more information.\n            </div>\n            <div class=\"l-faux-table l-table-fixed w100\">\n                <div class=\"l-faux-row\">\n                    <div class=\"l-faux-cell p1em\">\n                        <button class=\"button modalSection__button flat ls0 w100 fz-14 greenwhite\" data-bind=\"click: retry\">Try again</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 368 */,
/* 369 */
/***/ (function(module, exports) {

module.exports = "<div class=\"projected-pay\"  data-bind=\"visible:isVisible()\">\n    <ul class=\"display-list\">\n        <li><span class=\"title\">Projected Pay</span><span class=\"position-value\" data-bind=\"text:'$'+projectedPay()\"></span></li>\n    </ul>\n</div>\n "

/***/ }),
/* 370 */
/***/ (function(module, exports) {

module.exports = "<div class=\"card-old fz-12 r10 l10\" data-bind=\"visible:isVisible()\">\n    <span class=\"l-faux-cell cell-icon text-center alignmid pt5 pb5\"><span class=\"tticon tticon-exclaiminvert fz-24 fg-ui-warn\"></span></span>\n    <span class=\"l-faux-cell alignmid\" data-bind=\"text:messageText()\"></span>\n</div>\n\n "

/***/ }),
/* 371 */
/***/ (function(module, exports) {

module.exports = "<div id=\"power-play\" class=\"superPick\" data-bind=\"visible: isVisible(), css: { selected: selectedSpecial() }\">\n    <!-- ko with: selectedSpecial() -->\n    <!-- This is required for non - bpr to support posting of form-->\n    <input type=\"hidden\" data-bind=\"attr: { id: $parent.formFieldId()+'.SpecialSeq', name: $parent.formFieldId()+'.SpecialSeq' }, value: SpecialSeq\"/>\n    <input type=\"hidden\" data-bind=\"attr: { id: $parent.formFieldId()+'.TokenId', name: $parent.formFieldId()+'.TokenId' }, value:TokenId\"/>\n    <!-- /ko -->\n    <div class=\"l-faux-table w100 cardHeader\">\n        <div class=\"l-faux-cell alignmid pthalfem pbhalfem pl1em cell-icon\">\n            <div class=\"tticon fz-21 tticon-special\"></div>\n        </div>\n        <div class=\"l-faux-cell alignmid pthalfem pbhalfem plhalfem pr1em\">\n            <div class=\"l-faux-table w100 l-table-fixed\">\n                <div class=\"l-faux-cell\">\n                    <div class=\"fz-12 faux-strong text-ellipsis\">\n                        <span>SuperPick</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"l-faux-cell alignmid pthalfem pbhalfem pr1em cell-icon text-right\">\n            <div class=\"fz-12 faux-strong superPick-reward\" data-bind=\"text: projectedReward(selectedSpecial(), true)\"></div>\n        </div>\n    </div>\n    <div class=\"pthalfem pbhalfem\">\n        <!-- ko foreach: specialOffers() -->\n        <div class=\"l-faux-table l-table-fixed w100 text-center l-table-spaced plhalfem prhalfem\">\n            <!-- ko foreach: $data -->\n            <!-- ko if: !$parents[1].isObjectEmptyObject($data) -->\n            <div class=\"l-faux-cell alignmid superPick-offer\" data-bind=\"css: { selected: $parents[1].isSelectedSpecialSeq($data)}\">\n                <div class=\"l-faux-table w100 l-table-spaced-none\">\n                    <div class=\"l-faux-row\">\n                        <div class=\"l-faux-cell alignmid btn-superpick phalfem\" data-bind=\"click: $parents[1].setSelectedSpecial\">\n                            <div class=\"fz-12\" data-bind=\"text: $data.Title ? $data.Title.split('-')[0] : ''\"></div>\n                            <div class=\"fz-12 faux-strong\" data-bind=\"text: $data.Title? $data.Title.split('-')[1] : ''\"></div>\n                        </div>\n                    </div>\n                    <div class=\"l-faux-row\">\n                        <div class=\"l-faux-cell alignmid\">\n                            <div class=\"fz-12 text-reward\">\n                                <span class=\"faux-strong\" data-bind=\"text:  $parents[1].projectedReward($data)\"></span>\n                                <span class=\"\" data-bind=\"text:  $data.MaxReward ? ' up to $' +  $data.MaxReward : ''\"></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- /ko -->\n            <!-- ko if: $parents[1].isObjectEmptyObject($data) -->\n            <div class=\"l-faux-cell alignmid\"></div>\n            <!-- /ko -->\n            <!-- /ko -->\n        </div>\n        <!-- /ko -->\n    </div>\n</div>"

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ko, jQuery) {
    "use strict";
    ko.bindingHandlers["slideVisible"] = {
        init: function (element, valueAccessor) {
            var value = valueAccessor();
            jQuery(element).toggle(ko.unwrap(value));
        },
        update: function (element, valueAccessor) {
            var value = valueAccessor();
            ko.unwrap(value) ? jQuery(element).slideDown('fast') : jQuery(element).slideUp('fast');
        }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var InvariantFailureException = (function () {
        function InvariantFailureException(message) {
            this.message = message;
        }
        return InvariantFailureException;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = InvariantFailureException;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(21), __webpack_require__(375), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_1, services_config_1, underscore) {
    "use strict";
    var initialiseKernel = underscore.once(function () {
        var kernel = new inversify_1.Kernel();
        kernel.load(services_config_1.default);
        return kernel;
    });
    var rootKernel = initialiseKernel();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = rootKernel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(21), __webpack_require__(182), __webpack_require__(189), __webpack_require__(183), __webpack_require__(190), __webpack_require__(186), __webpack_require__(184)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_1, EventAggregator_1, ProgressIndicator_1, AppWindow_1, CountdownTimer_1, LogInHelper_1, PreferencesServiceWrapper_1) {
    "use strict";
    var services = new inversify_1.KernelModule(function (bind) {
        bind("IEventAggregator").to(EventAggregator_1.default).inSingletonScope();
        bind("IPreferencesServiceWrapper").to(PreferencesServiceWrapper_1.PreferencesServiceWrapper).inSingletonScope();
        bind("IAppWindow").to(AppWindow_1.default).inSingletonScope();
        bind("ICountdownTimer").to(CountdownTimer_1.default);
        bind("IProgressIndicator").to(ProgressIndicator_1.default);
        bind("ILoginHelper").to(LogInHelper_1.LogInHelper);
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = services;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    var Lock = (function () {
        function Lock() {
            this._value = 0;
        }
        Lock.prototype.trylock = function () {
            if (this._value) {
                return false;
            }
            this._value = 1;
            return true;
        };
        Lock.prototype.unlock = function () {
            this._value = 0;
        };
        Lock.prototype.count = function () {
            return this._value;
        };
        return Lock;
    }());
    exports.Lock = Lock;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(1), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, ko, inversify_1) {
    "use strict";
    var ProgressIndicatorBase = (function () {
        function ProgressIndicatorBase() {
            this.serviceCallCompleted = ko.observable(false);
        }
        ProgressIndicatorBase.prototype.beginning = function () {
            this.setServiceCallCompleted(false);
        };
        ProgressIndicatorBase.prototype.finished = function () {
            this.setServiceCallCompleted(true);
        };
        ProgressIndicatorBase.prototype.displayFor = function (_) {
            throw new Error("must override this operation");
        };
        ProgressIndicatorBase.prototype.setServiceCallCompleted = function (isRunning) {
            this.serviceCallCompleted(isRunning);
            this.serviceCallCompleted.valueHasMutated();
        };
        return ProgressIndicatorBase;
    }());
    ProgressIndicatorBase = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], ProgressIndicatorBase);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ProgressIndicatorBase;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(29), __webpack_require__(58), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, Decimal, PyosStore_1, inversify_1) {
    "use strict";
    var ProjectedPayViewModel = (function () {
        function ProjectedPayViewModel(store) {
            this._store = store;
            this._maxProjectedPay = new Decimal("999999999.99");
        }
        ProjectedPayViewModel.prototype.isVisible = function () {
            return !!(this._store.stake() && this._store.priceDetails());
        };
        ProjectedPayViewModel.prototype.projectedPay = function () {
            var projectedPay = new Decimal(0);
            if (this._store.stake() && this._store.priceDetails()) {
                var winPay = this._store.stake().Win.times(this._store.priceDetails().Win.DollarReturn);
                var placePay = this._store.stake().Place.times(this._store.priceDetails().Place.DollarReturn);
                projectedPay = winPay.plus(placePay);
                projectedPay = Decimal.min(projectedPay, this._maxProjectedPay);
                projectedPay = Decimal.max(projectedPay, 0);
            }
            return projectedPay.toFixed(2, Decimal.ROUND_FLOOR);
        };
        return ProjectedPayViewModel;
    }());
    ProjectedPayViewModel = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("PyosStore")),
        tslib_1.__metadata("design:paramtypes", [PyosStore_1.PyosStore])
    ], ProjectedPayViewModel);
    exports.ProjectedPayViewModel = ProjectedPayViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(58), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, PyosStore_1, inversify_1) {
    "use strict";
    var PyosMessageViewModel = (function () {
        function PyosMessageViewModel(store) {
            this._store = store;
        }
        PyosMessageViewModel.prototype.isVisible = function () {
            return !!this._store.errorMessage();
        };
        PyosMessageViewModel.prototype.messageText = function () {
            return this._store.errorMessage();
        };
        return PyosMessageViewModel;
    }());
    PyosMessageViewModel = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("PyosStore")),
        tslib_1.__metadata("design:paramtypes", [PyosStore_1.PyosStore])
    ], PyosMessageViewModel);
    exports.PyosMessageViewModel = PyosMessageViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(58), __webpack_require__(21), __webpack_require__(191), __webpack_require__(372)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, PyosStore_1, inversify_1, CurrencyConverter_1) {
    "use strict";
    var PyosSelectViewModel = (function () {
        function PyosSelectViewModel(params, store) {
            var _this = this;
            this.isSelectedSpecialSeq = function (specialOffer) {
                var selectedSpecialSeq = _this._store.selectedSpecialSeq();
                return selectedSpecialSeq === specialOffer.SpecialSeq;
            };
            this.projectedReward = function (specialOffer, isHeader) {
                if (isHeader === void 0) { isHeader = false; }
                if (specialOffer) {
                    var reward = _this._store.projectedReward(specialOffer);
                    if (reward.greaterThan(0)) {
                        if (reward.isInt()) {
                            return _this._currencyConverter.toMoney(Number(reward), 0);
                        }
                        return _this._currencyConverter.toMoney(Number(reward), 2);
                    }
                    else {
                        return isHeader ? "$0" : "";
                    }
                }
                return null;
            };
            this.setSelectedSpecial = function (specialOffer) {
                _this._store.setSelectedSpecial(specialOffer);
            };
            this.isObjectEmptyObject = function (specialOffer) {
                return Object.getOwnPropertyNames(specialOffer).length === 0;
            };
            this._formFieldId = params.formFieldId;
            this._store = store;
            this._currencyConverter = new CurrencyConverter_1.CurrencyConverter();
        }
        PyosSelectViewModel.prototype.formFieldId = function () {
            return this._formFieldId;
        };
        PyosSelectViewModel.prototype.loading = function () {
            return this._store.loading();
        };
        PyosSelectViewModel.prototype.specialOffers = function () {
            var offers = this._store.specialOffers();
            var numberOfRows = Math.ceil(offers.length / 3);
            var numberOfColoumns = numberOfRows * 3;
            var tableRows = [];
            for (var i = 0; i < numberOfRows; i++) {
                tableRows.push([]);
            }
            var row = 0;
            for (var cell = 0; cell < numberOfColoumns; cell++) {
                if (offers.length <= 3 && cell < offers.length) {
                    tableRows[row].push(offers[cell]);
                }
                else if (offers.length === 4 && cell < offers.length) {
                    tableRows[row].push(offers[cell]);
                    if (cell === 1) {
                        row++;
                    }
                }
                else if (offers.length >= 5) {
                    tableRows[row].push(cell >= offers.length ? {} : offers[cell]);
                    if ((cell + 1) % 3 === 0) {
                        row++;
                    }
                }
            }
            return tableRows;
        };
        PyosSelectViewModel.prototype.selectedSpecialSeq = function () {
            return this._store.selectedSpecialSeq();
        };
        PyosSelectViewModel.prototype.isExpanded = function () {
            return this._store.isExpanded();
        };
        PyosSelectViewModel.prototype.isVisible = function () {
            return this._store.isVisible();
        };
        PyosSelectViewModel.prototype.selectedSpecial = function () {
            return this._store.selectedSpecial();
        };
        PyosSelectViewModel.prototype.primaryAction = function () {
            this._store.primaryAction();
        };
        PyosSelectViewModel.prototype.clearSelectedSpecial = function () {
            this._store.clearSelectedSpecial();
        };
        return PyosSelectViewModel;
    }());
    PyosSelectViewModel = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("$params")),
        tslib_1.__param(1, inversify_1.inject("PyosStore")),
        tslib_1.__metadata("design:paramtypes", [Object, PyosStore_1.PyosStore])
    ], PyosSelectViewModel);
    exports.PyosSelectViewModel = PyosSelectViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21), __webpack_require__(1), __webpack_require__(180)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1, ko, Disposable_1) {
    "use strict";
    var FobSpecialTokensViewModel = (function (_super) {
        tslib_1.__extends(FobSpecialTokensViewModel, _super);
        function FobSpecialTokensViewModel(eventAggregator, pyosService, loginHelper, tokensMapper, appWindow) {
            var _this = _super.call(this, eventAggregator, appWindow) || this;
            _this.pyosService = pyosService;
            _this.loginHelper = loginHelper;
            _this.tokensMapper = tokensMapper;
            _this.appWindow = appWindow;
            return _this;
        }
        FobSpecialTokensViewModel.prototype.init = function () {
            var _this = this;
            this.isBusy = ko.observable(false);
            this.isUserAuthenticated = ko.observable(this.loginHelper.isUserLoggedIn());
            this.isExpandedView = ko.observable(false);
            this.standardPowerPlaysTokenId = ko.observable();
            this.bonusTokens = ko.observableArray([]);
            this.numberOfStandardPowerPlayBets = ko.observable(0);
            this.numberOfBonusPowerPlayBets = ko.observable(0);
            this.totalNumberOfBets = ko.observable(0);
            this.emptyTokensReason = ko.observable(null);
            this.shouldDisplayEmptyTokensReason = ko.observable(false);
            this.safeSubscribe('nav.menu', function (state) {
                if (state === "open" && _this.isUserAuthenticated()) {
                    _this.getSpecialTokens();
                }
            });
            this.safeSubscribe('lo.login', function (_) {
                _this.isUserAuthenticated(true);
            });
            this.safeSubscribe('lo.logout', function (_) {
                _this.clearData();
                _this.isUserAuthenticated(false);
            });
            return this;
        };
        FobSpecialTokensViewModel.prototype.toggleView = function () {
            var newState = !this.isExpandedView();
            this.isExpandedView(newState);
            if (newState) {
                this.getSpecialTokens();
            }
        };
        FobSpecialTokensViewModel.prototype.navigateToOffer = function (tokenId) {
            var _this = this;
            if (tokenId) {
                this.isBusy(true);
                var promise = this.pyosService.getSpecialUrl(tokenId);
                promise.then(function (result) {
                    if (result != undefined && result.success) {
                        if (result.data.SpecialUrl != undefined && result.data.SpecialUrl.length > 0) {
                            _this.evtAggregator.publish("menu.shouldClose");
                            _this.appWindow.redirectTo(result.data.SpecialUrl);
                        }
                        else {
                            _this.getSpecialTokens();
                        }
                    }
                    _this.isBusy(false);
                })
                    .catch(function (_) {
                    _this.isBusy(false);
                });
            }
        };
        FobSpecialTokensViewModel.prototype.getSpecialTokens = function () {
            var _this = this;
            this.isBusy(true);
            var promise = this.pyosService.retrieveFobSpecialTokens();
            promise.then(function (result) {
                if (result != undefined) {
                    if (result.success) {
                        _this.updateData(result);
                        if (!_this.isUserAuthenticated()) {
                            _this.isUserAuthenticated(true);
                        }
                    }
                    else if (result.errorCode === 403) {
                        _this.clearData();
                        if (_this.isUserAuthenticated()) {
                            _this.isUserAuthenticated(false);
                        }
                    }
                }
                _this.isBusy(false);
            })
                .catch(function (_) {
                _this.clearData();
                _this.isBusy(false);
            });
        };
        FobSpecialTokensViewModel.prototype.updateData = function (dto) {
            var _this = this;
            var totalNoOfBonusBets = 0;
            var totalNoOfStandardBets = 0;
            var bonusTokens = [];
            this.standardPowerPlaysTokenId(null);
            dto.data.Tokens.forEach(function (token) {
                if (token.IsBonusToken) {
                    bonusTokens.push(token);
                    totalNoOfBonusBets = totalNoOfBonusBets + token.BetsAvailable;
                }
                else {
                    totalNoOfStandardBets = totalNoOfStandardBets + token.BetsAvailable;
                    _this.standardPowerPlaysTokenId(token.TokenId);
                }
            });
            this.numberOfBonusPowerPlayBets(totalNoOfBonusBets);
            this.numberOfStandardPowerPlayBets(totalNoOfStandardBets);
            this.totalNumberOfBets(totalNoOfBonusBets + totalNoOfStandardBets);
            this.tokensMapper.mapTokens(this.bonusTokens, bonusTokens);
            this.emptyTokensReason(dto.data.TokensFault ? dto.data.TokensFault.Message : null);
            this.shouldDisplayEmptyTokensReason((dto.data.Tokens.length <= 0 && dto.data.TokensFault != null && dto.data.TokensFault.Message.length > 0));
        };
        FobSpecialTokensViewModel.prototype.clearData = function () {
            this.standardPowerPlaysTokenId(null);
            this.numberOfBonusPowerPlayBets(0);
            this.numberOfStandardPowerPlayBets(0);
            this.totalNumberOfBets(0);
            this.bonusTokens.removeAll();
            this.isExpandedView(false);
            this.emptyTokensReason(null);
            this.shouldDisplayEmptyTokensReason(false);
        };
        return FobSpecialTokensViewModel;
    }(Disposable_1.Disposable));
    FobSpecialTokensViewModel = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("IEventAggregator")),
        tslib_1.__param(1, inversify_1.inject("IPyosService")),
        tslib_1.__param(2, inversify_1.inject("ILoginHelper")),
        tslib_1.__param(3, inversify_1.inject("ITokensMapper")),
        tslib_1.__param(4, inversify_1.inject("IAppWindow")),
        tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object])
    ], FobSpecialTokensViewModel);
    exports.FobSpecialTokensViewModel = FobSpecialTokensViewModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21), __webpack_require__(387)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1, SpecialTokenModel_1) {
    "use strict";
    var TokensMapper = (function () {
        function TokensMapper() {
        }
        TokensMapper.prototype.mapTokens = function (oldTokens, newTokens) {
            if (oldTokens() == undefined || newTokens == undefined) {
                return;
            }
            this.updateExisting(oldTokens, newTokens);
            this.addNewOnes(oldTokens, newTokens);
            this.removeOldOnes(oldTokens, newTokens);
        };
        TokensMapper.prototype.updateExisting = function (oldTokens, newTokens) {
            newTokens.forEach(function (newTokenDto) {
                oldTokens().forEach(function (oldToken) {
                    if (newTokenDto.TokenId === oldToken.id) {
                        oldToken.name(newTokenDto.TokenName);
                        oldToken.betsAvailable(newTokenDto.BetsAvailable);
                    }
                });
            });
        };
        TokensMapper.prototype.addNewOnes = function (oldTokens, newTokens) {
            newTokens.forEach(function (newTokenDto) {
                var alreadyExists = oldTokens().some(function (oldToken) { return oldToken.id === newTokenDto.TokenId; });
                if (!alreadyExists) {
                    oldTokens.push(new SpecialTokenModel_1.SpecialTokenModel(newTokenDto.TokenId, newTokenDto.TokenName, newTokenDto.BetsAvailable));
                }
            });
        };
        TokensMapper.prototype.removeOldOnes = function (oldTokens, newTokens) {
            var needsRemovingTokenIds = [];
            oldTokens().forEach(function (oldToken) {
                var alreadyExists = newTokens.some(function (newTokenDto) { return newTokenDto.TokenId === oldToken.id; });
                if (!alreadyExists) {
                    needsRemovingTokenIds.push(oldToken.id);
                }
            });
            needsRemovingTokenIds.forEach(function (oldTokenId) {
                oldTokens.remove(function (token) {
                    return token.id === oldTokenId;
                });
            });
        };
        return TokensMapper;
    }());
    TokensMapper = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], TokensMapper);
    exports.TokensMapper = TokensMapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1) {
    "use strict";
    var EnquirySelectionDto = (function () {
        function EnquirySelectionDto() {
        }
        return EnquirySelectionDto;
    }());
    exports.EnquirySelectionDto = EnquirySelectionDto;
    var RacingEnquirySelectionDto = (function (_super) {
        tslib_1.__extends(RacingEnquirySelectionDto, _super);
        function RacingEnquirySelectionDto() {
            return _super.apply(this, arguments) || this;
        }
        return RacingEnquirySelectionDto;
    }(EnquirySelectionDto));
    exports.RacingEnquirySelectionDto = RacingEnquirySelectionDto;
    var SportsEnquirySelectionExDto = (function (_super) {
        tslib_1.__extends(SportsEnquirySelectionExDto, _super);
        function SportsEnquirySelectionExDto() {
            return _super.apply(this, arguments) || this;
        }
        return SportsEnquirySelectionExDto;
    }(EnquirySelectionDto));
    exports.SportsEnquirySelectionExDto = SportsEnquirySelectionExDto;
    var FobBetPreEnquiryRequestDto = (function () {
        function FobBetPreEnquiryRequestDto() {
        }
        return FobBetPreEnquiryRequestDto;
    }());
    exports.FobBetPreEnquiryRequestDto = FobBetPreEnquiryRequestDto;
    function isRacingEnquirySelectionDto(sel) {
        var r = sel;
        return (r.FixtureId !== undefined
            && r.FixtureDateTime !== undefined
            && r.RaceNumber !== undefined);
    }
    exports.isRacingEnquirySelectionDto = isRacingEnquirySelectionDto;
    function isSportsEnquirySelectionExDto(sel) {
        var s = sel;
        return s.PropositionSeq !== undefined;
    }
    exports.isSportsEnquirySelectionExDto = isSportsEnquirySelectionExDto;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(21), __webpack_require__(388), __webpack_require__(390), __webpack_require__(382), __webpack_require__(389), __webpack_require__(161), __webpack_require__(58)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_1, PyosService_1, SpecialsUrlProvider_1, TokensMapper_1, PyosRewardCalculator_1, PyosExtensions_1, PyosStore_1) {
    "use strict";
    var services = new inversify_1.KernelModule(function (bind) {
        bind("IPyosService").to(PyosService_1.PyosService).inSingletonScope();
        bind("ISpecialsUrlProvider").to(SpecialsUrlProvider_1.SpecialsUrlProvider);
        bind("IPyosRewardCalculator").to(PyosRewardCalculator_1.PyosRewardCalculator).inSingletonScope();
        bind("PyosExtensions").to(PyosExtensions_1.PyosExtensions).inSingletonScope();
        bind("PyosStore").to(PyosStore_1.PyosStore).inSingletonScope();
        bind("ITokensMapper").to(TokensMapper_1.TokensMapper);
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = services;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(21), __webpack_require__(381), __webpack_require__(378), __webpack_require__(379), __webpack_require__(380)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, inversify_1, FobSpecialTokensViewModel_1, ProjectedPayViewModel_1, PyosMessageViewModel_1, PyosSelectViewModel_1) {
    "use strict";
    var viewmodels = new inversify_1.KernelModule(function (bind) {
        bind("IFobSpecialTokensViewModel").to(FobSpecialTokensViewModel_1.FobSpecialTokensViewModel);
        bind("ProjectedPayViewModel").to(ProjectedPayViewModel_1.ProjectedPayViewModel);
        bind("PyosMessageViewModel").to(PyosMessageViewModel_1.PyosMessageViewModel);
        bind("PyosSelectViewModel").to(PyosSelectViewModel_1.PyosSelectViewModel);
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = viewmodels;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, Decimal) {
    "use strict";
    var BetSpecialOffer = (function () {
        function BetSpecialOffer() {
        }
        BetSpecialOffer._toDecimal = function (value) {
            return value ? new Decimal(value) : new Decimal(0);
        };
        BetSpecialOffer.normalise = function (bso) {
            return {
                SpecialSeq: bso.SpecialSeq,
                Description: bso.Description,
                Title: bso.Title,
                LegTypeCode: bso.LegTypeCode,
                ShortDescription: bso.ShortDescription,
                SpecialType: bso.SpecialType,
                IsExclusiveLegType: bso.IsExclusiveLegType,
                MaxReward: BetSpecialOffer._toDecimal(bso.MaxReward),
                ProfitMultiplier: BetSpecialOffer._toDecimal(bso.ProfitMultiplier),
                StakeMultiplier: BetSpecialOffer._toDecimal(bso.StakeMultiplier),
                ProjectedReward: BetSpecialOffer._toDecimal(bso.ProjectedReward),
                IsTemplatedSpecial: bso.IsTemplatedSpecial,
                TokenId: bso.TokenId
            };
        };
        return BetSpecialOffer;
    }());
    exports.BetSpecialOffer = BetSpecialOffer;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ko) {
    "use strict";
    var SpecialTokenModel = (function () {
        function SpecialTokenModel(id, name, betsAvailable) {
            this.id = id;
            this.name = ko.observable(name);
            this.betsAvailable = ko.observable(betsAvailable);
        }
        return SpecialTokenModel;
    }());
    exports.SpecialTokenModel = SpecialTokenModel;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1) {
    "use strict";
    var PyosService = (function () {
        function PyosService(appWindow, urlProvider) {
            this.urlProvider = urlProvider;
            this.appWindow = appWindow;
        }
        PyosService.prototype.request = function (url) {
            return this.appWindow.fetch(url, true);
        };
        PyosService.prototype.retrieveFobSpecialTokens = function () {
            var url = this.urlProvider.retrieveFobSpecialTokensUrl;
            var promise = this.request(url);
            return promise.then();
        };
        PyosService.prototype.getSpecialUrl = function (tokenId) {
            var url = this.urlProvider.getSpecialUrl(tokenId);
            var promise = this.request(url);
            return promise.then();
        };
        PyosService.prototype.fobBetPreEnquiry = function (request) {
            var url = this.urlProvider.fobBetPreEnquiryUrl;
            return this.appWindow
                .post(url, request, true)
                .then();
        };
        return PyosService;
    }());
    PyosService = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__param(0, inversify_1.inject("IAppWindow")),
        tslib_1.__param(1, inversify_1.inject("ISpecialsUrlProvider")),
        tslib_1.__metadata("design:paramtypes", [Object, Object])
    ], PyosService);
    exports.PyosService = PyosService;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(29), __webpack_require__(21), __webpack_require__(160), __webpack_require__(159), __webpack_require__(158)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, Decimal, inversify_1, Stake_1, PriceDetails_1, LegTypeCode_1) {
    "use strict";
    var PyosRewardCalculator = (function () {
        function PyosRewardCalculator() {
        }
        PyosRewardCalculator.prototype.legTypeIsEligible = function (offerlegTypeCode, legTypeCode) {
            return ((offerlegTypeCode === LegTypeCode_1.LegTypeCode.WinPlace) || (offerlegTypeCode === legTypeCode));
        };
        PyosRewardCalculator.prototype.calculateLegReward = function (specialOffer, offerlegTypeCode, individualStake, dollarReturn, legTypeCode) {
            if (this.legTypeIsEligible(offerlegTypeCode, legTypeCode)) {
                var profit = new Decimal(dollarReturn).plus(-1.0);
                var actualProfitMultiplier = new Decimal(profit).times(specialOffer.ProfitMultiplier || 0);
                var combinedMultiplier = new Decimal(actualProfitMultiplier).plus(specialOffer.StakeMultiplier || 0);
                return new Decimal(individualStake).times(combinedMultiplier);
            }
            return new Decimal(0);
        };
        PyosRewardCalculator.prototype.checkEligible = function (specialOffer, stake) {
            stake = Stake_1.Stake.normalise(stake);
            if (specialOffer.IsExclusiveLegType) {
                return ((specialOffer.LegTypeCode === LegTypeCode_1.LegTypeCode.Win && stake.Place.isZero())
                    || (specialOffer.LegTypeCode === LegTypeCode_1.LegTypeCode.Place && stake.Win.isZero())
                    || (specialOffer.LegTypeCode === LegTypeCode_1.LegTypeCode.WinPlace && (stake.Win.isZero() || stake.Place.isZero())));
            }
            else {
                return ((specialOffer.LegTypeCode === LegTypeCode_1.LegTypeCode.Win && (!stake.Win.isZero() || stake.Place.isZero()))
                    || (specialOffer.LegTypeCode === LegTypeCode_1.LegTypeCode.Place && (stake.Win.isZero() || !stake.Place.isZero()))
                    || (specialOffer.LegTypeCode === LegTypeCode_1.LegTypeCode.WinPlace));
            }
        };
        PyosRewardCalculator.prototype.calculateProjectedReward = function (specialOffer, stake, priceDetails) {
            stake = Stake_1.Stake.normalise(stake);
            priceDetails = PriceDetails_1.PriceDetails.normalise(priceDetails);
            if (this.checkEligible(specialOffer, stake)) {
                var winReward = this.calculateLegReward(specialOffer, specialOffer.LegTypeCode, stake.Win, priceDetails.Win.DollarReturn, LegTypeCode_1.LegTypeCode.Win);
                var placeReward = this.calculateLegReward(specialOffer, specialOffer.LegTypeCode, stake.Place, priceDetails.Place.DollarReturn, LegTypeCode_1.LegTypeCode.Place);
                var totalReward = Decimal(winReward).plus(placeReward);
                return new Decimal(Decimal.min(specialOffer.MaxReward, totalReward).toFixed(2, Decimal.ROUND_FLOOR));
            }
            return Decimal(0);
        };
        return PyosRewardCalculator;
    }());
    PyosRewardCalculator = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], PyosRewardCalculator);
    exports.PyosRewardCalculator = PyosRewardCalculator;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tslib_1, inversify_1) {
    "use strict";
    var SpecialsUrlProvider = (function () {
        function SpecialsUrlProvider() {
            this.initialise();
        }
        SpecialsUrlProvider.prototype.initialise = function () {
            this.retrieveFobSpecialTokensUrl = "/api/pyos/RetrieveFobSpecialTokens";
            this.fobBetPreEnquiryUrl = "/api/pyos/fobbetpreenquiry";
            this.specialUrl = "/api/pyos/SpecialUrl";
        };
        SpecialsUrlProvider.prototype.getSpecialUrl = function (tokenId) {
            var url = this.specialUrl + "/" + tokenId;
            return url;
        };
        return SpecialsUrlProvider;
    }());
    SpecialsUrlProvider = tslib_1.__decorate([
        inversify_1.injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], SpecialsUrlProvider);
    exports.SpecialsUrlProvider = SpecialsUrlProvider;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 391 */,
/* 392 */,
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

﻿__webpack_require__(173);

var ko = __webpack_require__(1);
var jQuery = __webpack_require__(0);
var tabtouch = __webpack_require__(7);
var router = __webpack_require__(82);
var raceBettingPageHandler = __webpack_require__(167);
var nav = __webpack_require__(3);
var common = __webpack_require__(5);
var logon = __webpack_require__(31);
var legacy = __webpack_require__(174);
var rightMenu = __webpack_require__(83);
var rightMenuViewModel = __webpack_require__(168);
var featureService = __webpack_require__(30);
var msgBusService = __webpack_require__(4);
var accountMonitoringService = __webpack_require__(69);
var deviceIdentificationService = __webpack_require__(52);
var analyticsService = __webpack_require__(55);
var jockeyJsMessageService = __webpack_require__(81);
var checkInService = __webpack_require__(41);
var locationProvider = __webpack_require__(73);
var modal = __webpack_require__(48);
var appDyn = __webpack_require__(164);
var analyticsDataLayer = __webpack_require__(28);
var errorController = __webpack_require__(9);
var inlineRequireDef = __webpack_require__(166);
var bettingInlineRequireDef = __webpack_require__(163);
var cookies = __webpack_require__(27);
var cms = __webpack_require__(165);

function defer(func) {
    setTimeout(func, 0 );
}

ko.options.deferUpdates = true;

ko.onError = function (error) {
    console.error("Knockout Error: \n" + error.message);
    throw error;
}

window.AnalyticsDataLayer = analyticsDataLayer;

defer( function() {
    rightMenu.init();    

    defer( function() {
        ko.applyBindings(rightMenuViewModel, document.getElementById('settings'));
        ko.applyBindings({}, document.getElementById('myBetsAndOffers'));

        rightMenuViewModel.initView();
    });
});

defer( function() {
    setupLoginRefresh();
    setupJockeyJs();
});

defer(function() {
    checkFeatures();
});

defer(function() {
    modal.init();
});

defer(function() {
    errorController.init();
    tabtouch.init();
});

nav.setRaceBettingPageHandler(raceBettingPageHandler.handle);

//Hook in Google Analytics
msgBusService.subscribe("nav.content.shown", function(url) {
    //Google Analytics
    if (window._gaq != null) {
        window._gaq.push(['_trackPageview', url]);
    }
});

//Init app dynamics
appDyn.init();

//Init nav
nav.init();
nav.initHomeUrl(window.tabtouchhomeurl);

//Default route
router.addRoute("^.*$", "^.*$", nav.nav);

//Start navigation
router.follow(window.location.hash);

//Preload BPR bundle           
__webpack_require__.e/* require.ensure */(0).then((function() {
    __webpack_require__(88);
    console.log("betting-v2 has been preloaded");
}).bind(null, __webpack_require__)).catch(__webpack_require__.oe);

//Hide URL bar
defer(common.hideURLbar);

if (cookies.get('ShowDepositModal')) {
    cookies.remove('ShowDepositModal', { path: '/' });
    ModalService.deposit();
}

function setupJockeyJs() {
    jockeyJsMessageService.start();
}

function setupLoginRefresh() {
    msgBusService.subscribe('lo.login', function () {
        featureService.clear();
        checkFeatures();
    });
    msgBusService.subscribe('lo.logout', function () {
        featureService.clear();
        checkFeatures();
    });
};

function checkFeatures() {
    featureService.isActive("Analytics")
        .then(function (active) {
            if (active) {
                analyticsService.start();
            } else {
                analyticsService.stop();
            }
        });
    featureService.isActive("DynamicCashBetting")
        .then(function (active) {
            if (active) {
                msgBusService.publish('DynamicCashBetting.On');
            } else {
                msgBusService.publish('DynamicCashBetting.Off');
            }
        });
    featureService.isActive("LocationBasedServices")
        .then(function (active) {
            if (active) {
                var checkedInLocationId = checkInService.checkedInLocationId();
                if (checkedInLocationId !== '') {
                    locationProvider.start();
                } else {
                    locationProvider.stop();
                }
            } else {
                locationProvider.stop();
            }
        });
}

//TEMP - iOS app expects LO to be global (no other code expects it so safe to remove once iOS app is updated)
window.LO = logon;


/***/ })
],[393]);
//# sourceMappingURL=main_e4e35984ba73be2875eb.bundle.map